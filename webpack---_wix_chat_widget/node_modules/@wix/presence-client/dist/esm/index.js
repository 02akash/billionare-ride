import PresenceGroup from './group';
import PresenceGroupV2 from './group-v2';
import {
    PRESENCE_APP_DEF_ID
} from './constants';
import {
    Scope,
    Status,
    ActivityStatus
} from './domain';
export {
    Scope,
    Status,
    ActivityStatus
};
export {
    DeviceType
}
from '@wix/ambassador-presence-v2-presence/types';
var Presence = /** @class */ (function() {
    function Presence(_a) {
        var duplexer = _a.duplexer,
            getSignedInstance = _a.getSignedInstance,
            httpClient = _a.httpClient;
        this.duplexer = duplexer;
        this.getSignedInstance = getSignedInstance !== null && getSignedInstance !== void 0 ? getSignedInstance : (function() {
            return '';
        });
        this.httpClient = httpClient;
    }
    Presence.prototype.group = function(scope, opts) {
        var _this = this;
        verifyScope(scope);
        var getPresenceConnection = function() {
            return _this.getConnection();
        };
        return new PresenceGroup({
            getPresenceConnection: getPresenceConnection,
            scope: scope,
            getSignedInstance: this.getSignedInstance,
            initialState: opts === null || opts === void 0 ? void 0 : opts.initialState,
            keepAliveInterval: opts === null || opts === void 0 ? void 0 : opts.keepAliveInterval,
            onIdle: opts === null || opts === void 0 ? void 0 : opts.onIdle,
            onActive: opts === null || opts === void 0 ? void 0 : opts.onActive,
            isIdleMs: opts === null || opts === void 0 ? void 0 : opts.isIdleMs,
        });
    };
    Presence.prototype.groupV2 = function(scope, opts) {
        var _this = this;
        if (!this.httpClient) {
            throw new Error('Cannot init presence GroupV2 without HttpClient instance');
        }
        var getPresenceConnection = function() {
            return _this.getConnection();
        };
        return new PresenceGroupV2({
            getPresenceConnection: getPresenceConnection,
            scope: scope,
            httpClient: this.httpClient,
            getInitialState: opts === null || opts === void 0 ? void 0 : opts.getInitialState,
            keepAliveInterval: opts === null || opts === void 0 ? void 0 : opts.keepAliveInterval,
            onIdle: opts === null || opts === void 0 ? void 0 : opts.onIdle,
            onActive: opts === null || opts === void 0 ? void 0 : opts.onActive,
            isIdleMs: opts === null || opts === void 0 ? void 0 : opts.isIdleMs,
        });
    };
    Presence.prototype.getConnection = function() {
        return this.duplexer.connect({
            appDefId: PRESENCE_APP_DEF_ID
        });
    };
    return Presence;
}());
export default Presence;

function verifyScope(scope) {
    if (!Object.values(Scope).includes(scope)) {
        throw new Error("scope " + scope + " is invalid!");
    }
}
//# sourceMappingURL=index.js.map