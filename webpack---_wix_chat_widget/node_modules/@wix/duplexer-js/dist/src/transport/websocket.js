"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var transport_1 = __importDefault(require("./transport"));
var params_1 = require("./params");
var http_1 = require("./http");
var WS = /** @class */ (function(_super) {
    __extends(WS, _super);

    function WS(url, instanceUpdater, siteRevision) {
        if (instanceUpdater === void 0) {
            instanceUpdater = null;
        }
        var _this = _super.call(this, {
            keepAlive: true
        }) || this;
        _this.url = url;
        _this.instanceUpdater = instanceUpdater;
        _this.siteRevision = siteRevision;
        return _this;
    }
    WS.isSupported = function() {
        return typeof WebSocket !== 'undefined';
    };
    Object.defineProperty(WS.prototype, "name", {
        get: function() {
            return 'websocket';
        },
        enumerable: false,
        configurable: true
    });
    WS.prototype.open = function() {
        return __awaiter(this, void 0, void 0, function() {
            var params, url, opts;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , (0, params_1.createParams)(this.instanceUpdater, this.siteRevision)];
                    case 1:
                        params = _a.sent();
                        url = (0, params_1.withParams)(this.url, params);
                        opts = process.env.DUPLEXER_NODE_ENV === 'true' ?
                            {
                                headers: (0, http_1.resolveHeaders)(this.instanceUpdater)
                            } :
                            undefined;
                        this.closeClient();
                        this.ws = new WebSocket(url, opts);
                        this.listen();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    WS.prototype.closeClient = function() {
        if (this.ws) {
            this.cleanWebSocketHooks();
            /**
             * normal closure, the connection successfully completed whatever purpose
             * for which it was created.
             * more info here: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
             */
            this.ws.close(1000);
        }
    };
    WS.prototype.write = function(packet) {
        var normalized = JSON.stringify(packet);
        this.ws.send(normalized);
    };
    WS.prototype.listen = function() {
        var _this = this;
        this.ws.onclose = function(event) {
            /**
             * event is not clean when it's closed unexpectedly, usually during a network
             * error that the client experiences (but not only - it happens on service GA for
             * instace).
             *
             * error will be clean, but unrecoverable, when sockets service initiates it:
             *
             * - in case connection is idle (no subscribes).
             * - in case signed instance is invalid.
             *
             * note: when client decides to close the connection proactivly, this handler will
             * not be invoked, this.we.onclose becomes noop before we call this.ws.close.
             */
            var isRecoverable = !event.wasClean;
            var error = _this.transportError({
                status: event.code,
                message: event.reason,
                recoverable: isRecoverable,
            });
            _this.cleanWebSocketHooks();
            _this.onTransportClose(error);
        };
        this.ws.onmessage = function(ev) {
            var normalized = JSON.parse(ev.data);
            _this.onData(normalized);
        };
        this.ws.onerror = function() {};
    };
    WS.prototype.cleanWebSocketHooks = function() {
        if (this.ws) {
            this.ws.onmessage = function() {};
            this.ws.onclose = function() {};
        }
    };
    return WS;
}(transport_1.default));
exports.default = WS;
//# sourceMappingURL=websocket.js.map