"use strict";
var __spreadArray = (this && this.__spreadArray) || function(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var websocket_1 = __importDefault(require("../../transport/websocket"));
var xhr_1 = __importDefault(require("../../transport/xhr"));
var http_streaming_1 = __importDefault(require("../../transport/http-streaming"));
var transports_manager_1 = __importDefault(require("../../transport/transports-manager"));
var strategy_presets_1 = require("../../strategies/strategy-presets");

function transports(opts, useHttpStreaming) {
    if (useHttpStreaming === void 0) {
        useHttpStreaming = false;
    }
    var strategies = [];
    var ws = createWebSocket(opts);
    var httpStreaming = createHttpStreaming(opts);
    var httpLongPolling = createHttpLongPolling(opts);
    // tests purposes only
    var forcedTransport = process.env.DUPLEXER_FORCED_TRANSPORT;
    if (forcedTransport === 'websocket') {
        strategies = [(0, strategy_presets_1.primaryPreset)(ws)];
    } else if (forcedTransport === 'http') {
        strategies = [(0, strategy_presets_1.primaryPreset)(httpLongPolling)];
    } else if (forcedTransport === 'http_streaming') {
        strategies = [(0, strategy_presets_1.primaryPreset)(httpStreaming)];
    } else if (websocket_1.default.isSupported()) {
        var httpStrategies = useHttpStreaming ?
            [(0, strategy_presets_1.secondaryPreset)(httpStreaming), (0, strategy_presets_1.tertiaryPreset)(httpLongPolling)] :
            [(0, strategy_presets_1.secondaryPreset)(httpLongPolling)];
        strategies = __spreadArray([(0, strategy_presets_1.primaryPreset)(ws)], httpStrategies, true);
    } else {
        strategies = useHttpStreaming ?
            [(0, strategy_presets_1.primaryPreset)(httpStreaming), (0, strategy_presets_1.secondaryPreset)(httpLongPolling)] :
            [(0, strategy_presets_1.primaryPreset)(httpLongPolling)];
    }
    return new transports_manager_1.default(strategies);
}
exports.default = transports;

function createWebSocket(opts) {
    var protocol = isSSL() ? 'wss://' : 'ws://';
    var url = "".concat(protocol).concat(opts.baseUrl);
    return new websocket_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function createHttpStreaming(opts) {
    var url = httpUrl(opts.baseUrl);
    return new http_streaming_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function createHttpLongPolling(opts) {
    var url = httpUrl(opts.baseUrl);
    return new xhr_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function httpUrl(baseUrl) {
    var protocol = isSSL() ? 'https://' : 'http://';
    return "".concat(protocol).concat(baseUrl);
}

function isSSL() {
    return typeof self !== 'undefined' && self.location.protocol !== 'http:';
}
//# sourceMappingURL=transports.js.map