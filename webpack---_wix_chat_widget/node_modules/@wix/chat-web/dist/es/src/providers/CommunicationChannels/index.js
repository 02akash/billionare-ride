var _a;
import {
    __spreadArray
} from "tslib";
import {
    useCallback,
    useMemo
} from 'react';
import {
    contextify
} from '@wix/hooks-utils';
import {
    DeliveryMethodId
} from '@wix/chat-sdk';
import {
    ChannelType
} from '@wix/ambassador-comm-channels-v1-channel/types';
var _useCommunicationChannels = function(_a) {
    var communicationChannels = _a.communicationChannels;
    var _getChannel = useCallback(function(deliveryMethodId) {
        return communicationChannels[deliveryMethodId];
    }, [communicationChannels]);
    var _isDeliveryMethodsIncludesEmailChannelType = useCallback(function(deliveryMethods) {
        if (deliveryMethods === void 0) {
            deliveryMethods = [];
        }
        var isMessageFromExternalEmailChannel = deliveryMethods.some(function(_deliveryMethod) {
            var deliveryMethodLowerCase = (_deliveryMethod === null || _deliveryMethod === void 0 ? void 0 : _deliveryMethod.toLowerCase()) || '';
            var externalChannel = _getChannel(deliveryMethodLowerCase);
            return (externalChannel === null || externalChannel === void 0 ? void 0 : externalChannel.channelType) === ChannelType.EMAIL;
        });
        var isMessageFromLegacyEmailChannel = deliveryMethods.includes(DeliveryMethodId.Email);
        return (isMessageFromLegacyEmailChannel || isMessageFromExternalEmailChannel);
    }, [_getChannel]);
    var isMessageIsEmailType = useCallback(function(message) {
        var _a = message.deliveryMethods,
            deliveryMethods = _a === void 0 ? [] : _a,
            originMethod = message.originMethod;
        var allDeliveryMethods = __spreadArray(__spreadArray([], deliveryMethods, true), [originMethod !== null && originMethod !== void 0 ? originMethod : ''], false);
        return _isDeliveryMethodsIncludesEmailChannelType(allDeliveryMethods);
    }, [_isDeliveryMethodsIncludesEmailChannelType]);
    var isSelectedDeliveryMethodIsEmail = useCallback(function(deliveryMethods) {
        if (deliveryMethods === void 0) {
            deliveryMethods = [];
        }
        return _isDeliveryMethodsIncludesEmailChannelType(deliveryMethods);
    }, [_isDeliveryMethodsIncludesEmailChannelType]);
    return useMemo(function() {
        return ({
            isMessageIsEmailType: isMessageIsEmailType,
            isSelectedDeliveryMethodIsEmail: isSelectedDeliveryMethodIsEmail,
        });
    }, [isMessageIsEmailType, isSelectedDeliveryMethodIsEmail]);
};
export var CommunicationChannelProvider = (_a = contextify(_useCommunicationChannels), _a.Provider),
    useCommunicationChannels = _a.useHookContext,
    withCommunicationChannels = _a.withHookContext;
//# sourceMappingURL=index.js.map