import {
    statusCodeNumericToText
} from './statusCodeNumericToText';

function resolveErrorStateFromHttpError(httpError, params) {
    var _errorCodesMapping$st;
    const {
        errorAccessor,
        errorCodesMapping
    } = params;
    const {
        applicationError,
        validationError,
        statusCode
    } = errorAccessor;
    if (applicationError) {
        var _errorCodesMapping$ap, _errorCodesMapping$ap2;
        const {
            code
        } = applicationError;
        return (_errorCodesMapping$ap = errorCodesMapping.applicationError) == null || (_errorCodesMapping$ap2 = _errorCodesMapping$ap[code]) == null ? void 0 : _errorCodesMapping$ap2.call(_errorCodesMapping$ap, applicationError, httpError);
    }
    if (validationError) {
        return null;
    }
    const statusCodeText = statusCode != null ? statusCodeNumericToText[statusCode] : null;
    const statusCodeErrorMappingFunction = statusCodeText != null ? (_errorCodesMapping$st = errorCodesMapping.statusCodeError) == null ? void 0 : _errorCodesMapping$st[statusCodeText] : null;
    if (statusCodeErrorMappingFunction) {
        return statusCodeErrorMappingFunction(httpError);
    }
    return null;
}
export function resolveErrorState(params) {
    const {
        errorAccessor
    } = params;
    const {
        httpError
    } = errorAccessor;
    if (!httpError) {
        return null;
    }
    const errorState = resolveErrorStateFromHttpError(httpError, params);
    return {
        errorState,
        httpError
    };
}
//# sourceMappingURL=resolveErrorState.js.map