import _defineProperty from "@babel/runtime/helpers/defineProperty";
import {
    ErrorAccessor
} from './ErrorAccessor';
import {
    reportErrorBi
} from './reportErrorBi';
import {
    createBiLoggerWithDefaults
} from './createBiLoggerWithDefaults';
import {
    resolveErrorState
} from './resolveErrorState';
export class ErrorHandler {
    constructor(params) {
        var _this = this;
        _defineProperty(this, "biLogger", void 0);
        _defineProperty(this, "errorMonitor", void 0);
        _defineProperty(this, "experiments", void 0);
        _defineProperty(this, "showError", void 0);
        _defineProperty(this, "handleError", function(error, options) {
            if (options === void 0) {
                options = {};
            }
            const {
                errorMonitor,
                experiments
            } = _this;
            const {
                errorCodesMapping,
                showError = _this.showError
            } = options;
            if (experiments != null && !experiments.enabled('specs.os.EnableErrorHandlerInEditor')) {
                return;
            }
            try {
                const errorAccessor = new ErrorAccessor({
                    error
                });
                const {
                    httpError
                } = errorAccessor;
                const mappingResult = errorCodesMapping != null && httpError != null ? resolveErrorState({
                    errorAccessor,
                    errorCodesMapping
                }) : null;
                const errorState = mappingResult == null ? void 0 : mappingResult.errorState;
                if (errorState && showError) {
                    showError(errorState, mappingResult.httpError);
                }
                reportErrorBi(_this, {
                    errorAccessor,
                    errorState,
                    isOverrideError: errorCodesMapping != null,
                    isOverrideErrorStateFunction: options.showError != null,
                    isConsumerResolvedError: errorState != null
                });
            } catch (e) {
                console.error(e);
                errorMonitor.captureException(e);
            }
        });
        this.biLogger = createBiLoggerWithDefaults(params);
        this.errorMonitor = params.createErrorMonitor({
            dsn: 'https://831e1d96e7944c6aae0c9ed9d6babd35@sentry.wixpress.com/5896'
        });
        this.experiments = params.createExperiments == null ? void 0 : params.createExperiments({
            scopes: ['error-handler']
        });
        this.showError = params.showError;
    }
}
//# sourceMappingURL=ErrorHandler.js.map