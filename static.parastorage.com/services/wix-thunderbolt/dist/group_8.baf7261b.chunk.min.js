"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [5625], {
        95913: function(e, t, n) {
            n.r(t), n.d(t, {
                SiteMapSymbol: function() {
                    return l.iQ
                },
                TpaEventsListenerManagerSymbol: function() {
                    return l.oJ
                },
                TpaModalSymbol: function() {
                    return r.tY
                },
                TpaPopupSymbol: function() {
                    return r.ir
                },
                TpaSymbol: function() {
                    return l.Uj
                },
                name: function() {
                    return l.UU
                },
                page: function() {
                    return dn
                }
            });
            var i = n(16537),
                r = n(60950),
                a = n(18922),
                o = n(77748),
                s = n(20590),
                p = n(87711),
                d = n(32166),
                l = n(86227),
                c = n(48556),
                g = n(62472),
                u = n(59427),
                m = n(5164),
                I = n(2897);
            const h = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), (0, o.m3)(r.dQ), p.Ji, d.RV, d.TQ, (0, o.lq)(m.Q), (0, o.lq)(u.IY)], ((e, t, n, i, r, {
                    mode: {
                        debug: a
                    }
                }, o, s) => {
                    const {
                        appsClientSpecMapData: p
                    } = e, d = ({
                        tpa: e,
                        origin: n,
                        callId: i,
                        status: r,
                        res: a,
                        compId: o
                    }) => {
                        const p = {
                            callId: i,
                            intent: "TPA_RESPONSE",
                            status: r,
                            res: a
                        };
                        s && s.tpa.addMessage({
                            message: p,
                            compId: o,
                            contextId: t.pageId,
                            origin: n
                        }), e.postMessage(JSON.stringify(p), "*")
                    }, l = Object.assign({}, ...n.map((e => e.getTpaHandlers())));
                    return {
                        async handleMessage({
                            source: n,
                            origin: r,
                            message: s
                        }) {
                            const {
                                type: c,
                                callId: u,
                                compId: m,
                                data: h,
                                deviceType: f,
                                originFrame: T
                            } = s, P = (e => {
                                const t = i.get(e) ? .src || i.get(e) ? .url;
                                return t ? new URL(t) : null
                            })(m);
                            if ("https://static.parastorage.com" !== r && !((e, t) => e ? .origin === t)(P, r) && !(e => "https://editor.wix.com" === e || "https://create.editorx.com" === e || "https://blocks.wix.com" === e)(r)) return void(a && console.warn("discarded tpa message: untrusted origin", {
                                origin: r,
                                message: s
                            }));
                            const y = l[c];
                            if (!y) return void(a && console.warn(`TpaHandlerError: ${c} handler is not implemented`));
                            const w = g.l.getOriginCompId(m),
                                U = t.widgets[w],
                                C = o ? .isTpaWorker(m),
                                D = C ? o.getWorkerDetails(m) : null,
                                S = C ? D.appDefinitionId : U ? .appDefinitionId,
                                O = y(m, h, {
                                    callId: u,
                                    tpa: n,
                                    appDefinitionId: S,
                                    tpaCompData: U,
                                    appClientSpecMapData: {
                                        appDefinitionId: S,
                                        ...p[S]
                                    },
                                    originCompId: w,
                                    viewMode: e.viewMode
                                });
                            if (void 0 !== O) try {
                                const e = await O;
                                if (e === I.Zq) return;
                                d({
                                    tpa: n,
                                    origin: r,
                                    callId: u,
                                    compId: m,
                                    status: !0,
                                    res: e
                                })
                            } catch (e) {
                                const {
                                    message: t,
                                    name: i,
                                    stack: a
                                } = e;
                                d({
                                    tpa: n,
                                    origin: r,
                                    callId: u,
                                    compId: m,
                                    status: !1,
                                    res: {
                                        error: {
                                            message: t,
                                            name: i,
                                            stack: a
                                        }
                                    }
                                })
                            }
                        }
                    }
                })),
                f = (0, o.Og)([(0, o.KT)(s.Gp, l.UU), s.$0, l.oJ], ((e, t, n) => {
                    const i = t => {
                        Object.entries(e.widgets).forEach((e => {
                            n.dispatch("CONSENT_POLICY_UPDATE", (() => t), {
                                compId: e[0]
                            })
                        }))
                    };
                    return {
                        pageDidMount() {
                            return t.registerToChanges(i)
                        }
                    }
                })),
                T = ({
                    tpaModal: e,
                    tpaPopup: t,
                    compId: n = "",
                    onCloseMessage: i
                }) => {
                    t.isPopup(n) ? t.closePopup(n, i) : e.closeModal(i)
                },
                P = (0, o.Og)([r.tY, r.ir], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            onEscapeClicked: n => {
                                T({
                                    tpaModal: e,
                                    tpaPopup: t,
                                    compId: n
                                })
                            }
                        }
                    }
                })));
            var y = n(25083);
            const w = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.lq)(y.a)], (({
                    externalBaseUrl: e
                }, t) => ({
                    getTpaHandlers() {
                        return {
                            async getCustomizedUrlSegments(i, r) {
                                const {
                                    url: a,
                                    options: o
                                } = r, s = t ? .urlMappings, {
                                    getCustomizedUrlSegments: p
                                } = await Promise.all([n.e(671), n.e(6510)]).then(n.bind(n, 87148));
                                return p(s, a, {
                                    baseUrl: e,
                                    ...o
                                })
                            }
                        }
                    }
                }))),
                U = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.lq)(y.a)], (({
                    externalBaseUrl: e
                }, t) => ({
                    getTpaHandlers() {
                        return {
                            async buildCustomizedUrl(i, r) {
                                const {
                                    key: a,
                                    itemData: o,
                                    options: s
                                } = r, p = t ? .urlMappings, {
                                    buildCustomizedUrl: d
                                } = await Promise.all([n.e(671), n.e(6510)]).then(n.bind(n, 87148));
                                return d(p, a, o, {
                                    baseUrl: e,
                                    ...s
                                })
                            }
                        }
                    }
                })));
            var C = n(62155),
                D = n.n(C),
                S = n(10553),
                O = n(77497),
                L = n(19025);
            const E = {
                    top: "SCROLL_TO_TOP",
                    bottom: "SCROLL_TO_BOTTOM"
                },
                b = e => {
                    const [, t, n] = L.lD.exec(e), i = (r = new URLSearchParams(n), {
                        subject: encodeURIComponent(r.get("subject") || ""),
                        body: encodeURIComponent(r.get("body") || ""),
                        bcc: encodeURIComponent(r.get("bcc") || ""),
                        cc: encodeURIComponent(r.get("cc") || "")
                    });
                    var r;
                    return {
                        type: "EmailLink",
                        href: (0, O.N0)({
                            recipient: t,
                            ...i
                        }),
                        target: "_self"
                    }
                },
                M = (e, t, n = "filesusr.com/", i = "", r = !1) => {
                    const [, a, o] = L._d.exec(e) || L.Og.exec(e);
                    return {
                        type: "DocumentLink",
                        href: (0, O.MU)({
                            docId: a,
                            name: o || "",
                            indexable: !1
                        }, t, n, i, r),
                        target: "_blank",
                        docInfo: {
                            docId: a,
                            name: o
                        }
                    }
                };
            class x extends Error {
                constructor() {
                    super("Unsupported link type"), this.name = "UnsupportedLinkTypeError", Error.captureStackTrace && Error.captureStackTrace(this, x)
                }
            }
            const v = ({
                    metaSiteId: e = "unknown",
                    isMobileView: t = !1
                }) => {
                    const n = `https://${e}.filesusr.com/`;
                    return {
                        isDynamicPage: () => !1,
                        isAbsoluteUrl: L.vh,
                        getImpliedLink: e => (0, O.Zs)(e, t),
                        getImpliedLinks: (e, n) => (0, O.S3)(e, t, n),
                        getLink: ({
                            href: e = "",
                            anchorDataId: t = "",
                            docInfo: i,
                            type: r
                        } = {}) => {
                            if ((0, L.QJ)(e)) return e;
                            if ((e => e.startsWith(n))(e)) return (0, O.UG)(i.docId, i.name);
                            if ((0, L.Qx)(t)) return `#${D().invert(E)[t]}`;
                            return e
                        },
                        getLinkProps: (t, n, i) => {
                            if ((0, L.QJ)(t)) return b(t);
                            if ((0, L.ii)(t)) return (e => {
                                const [, t] = L.Lm.exec(e);
                                return {
                                    type: "PhoneLink",
                                    href: (0, O.hm)({
                                        phoneNumber: t
                                    }),
                                    target: "_self"
                                }
                            })(t);
                            if ((0, L.vh)(t)) return ((e, t = "_blank", n = "noopener") => ({
                                type: "ExternalLink",
                                href: e,
                                target: t,
                                rel: n
                            }))(t, n, i);
                            if ((0, L.V8)(t)) return M(t, e);
                            throw new x
                        },
                        getLinkUrlFromDataItem: () => {
                            throw new Error("getLinkUrlFromDataItem is not implemented")
                        }
                    }
                },
                k = /^\/([^ ?#]*)?[#]?([^ ?#]*)[?]?(.*)/,
                R = /^#([^ ?]*)[?]?(.*)/,
                $ = /^(http|https):\/\/(.*)/,
                _ = /^wix:document:\/\/v1\/(.+)\/(.+)/,
                A = /^document:\/\/(.*)/,
                N = {
                    top: "SCROLL_TO_TOP",
                    bottom: "SCROLL_TO_BOTTOM"
                },
                H = e => {
                    const [, t, n] = L.lD.exec(e), i = (r = new URLSearchParams(n), {
                        subject: encodeURIComponent(r.get("subject") || ""),
                        body: encodeURIComponent(r.get("body") || ""),
                        bcc: encodeURIComponent(r.get("bcc") || ""),
                        cc: encodeURIComponent(r.get("cc") || "")
                    });
                    var r;
                    return {
                        type: "EmailLink",
                        href: (0, O.N0)({
                            recipient: t,
                            ...i
                        }),
                        target: "_self"
                    }
                },
                K = e => $.test(e),
                G = (e, t) => {
                    if (e) {
                        const [n] = t.replace("#", "/#").split(/[/]+/), i = Object.values(e).filter((e => e.prefix === n));
                        return 1 === i.length
                    }
                    return !1
                },
                B = (e, t) => {
                    const n = D().findKey(e.routes, (e => {
                        if ("Dynamic" === e.type) {
                            return (e.pageIds || []).includes(t)
                        }
                        return e.pageId === t
                    }));
                    if (n) return V(n);
                    throw new Error(`No url route for pageId: ${t}`)
                };
            class F extends Error {
                constructor() {
                    super("Unsupported link type"), this.name = "UnsupportedLinkTypeError", Error.captureStackTrace && Error.captureStackTrace(this, F)
                }
            }
            const V = e => e.replace(/^\.\//, "/"),
                W = e => ["SCROLL_TO_TOP", "SCROLL_TO_BOTTOM"].includes(e),
                q = ({
                    routingInfo: e,
                    metaSiteId: t,
                    userFileDomainUrl: n,
                    popupPages: i,
                    getCompIdByWixCodeNickname: r,
                    getRoleForCompId: a,
                    routersConfig: o,
                    multilingualInfo: s,
                    isMobileView: p,
                    isPremiumDomain: d
                }) => {
                    const l = `https://${t}.${n}/`,
                        c = e => !!i && i[e],
                        g = (e, t = "") => `wix:document://v1/${e}/${t}`,
                        u = e => {
                            const [, t = "", n = "", i = ""] = k.exec(e), r = t.replace(/\/+$/, ""), a = new URLSearchParams(i);
                            return s ? .isOriginalLanguage || "QueryParam" !== s ? .currentLanguage ? .resolutionMethod || a.set("lang", s.currentLanguage.languageCode), {
                                relativePageUrlPrefix: r,
                                anchor: n,
                                queryString: a.toString()
                            }
                        },
                        m = (t, n = "_self", i) => {
                            const {
                                relativePageUrlPrefix: a = "",
                                anchor: s = "",
                                queryString: p
                            } = u(t), d = N[s] || s;
                            if (c(a)) return {
                                type: "PageLink",
                                href: "",
                                target: "_self",
                                linkPopupId: a
                            };
                            const l = e.externalBaseUrl;
                            let g, m, I;
                            if (G(o, a)) {
                                I = `./${a}` === e.relativeUrl, g = "DynamicPageLink", m = `${l}/${a}`
                            } else {
                                const [t, n] = ((e, t) => {
                                    const n = decodeURIComponent(t);
                                    if (e[`./${n}`]) return [n, ""]; {
                                        const [e, ...n] = t.split("/");
                                        return [e, n.length > 0 ? `/${n.join("/")}` : ""]
                                    }
                                })(e.routes, a), i = e.pagesUriSEOs[t] || t, r = `./${i}`, o = "./" === r ? {
                                    pageId: e.mainPageId
                                } : e.routes[r];
                                g = "PageLink", m = o ? .pageId === e.mainPageId && !n ? l : `${l}/${i}${n}`, I = o && o.pageId === e.pageId
                            }
                            const h = d && r && r(d),
                                f = I && h,
                                T = d && !f;
                            return {
                                href: `${m}${p?`?${new URLSearchParams(p).toString()}`:""}`,
                                target: n,
                                rel: i,
                                type: g,
                                ...f && {
                                    anchorCompId: h
                                },
                                ...T && {
                                    anchorDataId: d
                                }
                            }
                        },
                        I = e => {
                            const [t, n] = e.split("?");
                            if (n) {
                                const e = encodeURIComponent(`?${n}`);
                                return t ? `${t}${e}` : e
                            }
                            return t
                        },
                        h = {
                            AnchorLink: t => {
                                const {
                                    anchorDataId: n,
                                    pageId: i
                                } = t, r = W(n) ? e.pageId : i.replace(/^#/, ""), a = n.startsWith("#") ? n : `#${n}`;
                                return `${B(e,r)}${a}`
                            },
                            DocumentLink: e => {
                                const {
                                    docId: t,
                                    name: n
                                } = e;
                                return g(t, n)
                            },
                            ExternalLink: e => {
                                const {
                                    url: t
                                } = e;
                                return t
                            },
                            DynamicPageLink: e => {
                                const {
                                    routerId: t,
                                    innerRoute: n,
                                    anchorDataId: i = ""
                                } = e, r = `/${o[t].prefix}`, a = n ? I(n) : n;
                                return `${r}${a?`/${a}${i}`:i}`
                            },
                            TpaPageLink: t => {
                                const {
                                    pageId: n,
                                    path: i = ""
                                } = t, r = n.replace(/^#/, ""), a = e.pageIdToPrefix[r], o = e.pages[r].pageUriSEO, s = a ? `/${a}/${o}` : `/${o}`, p = I(i);
                                if (i.startsWith(s)) return p;
                                return `${s}${p?`/${p}`:""}`
                            },
                            PageLink: t => {
                                const {
                                    pageId: n
                                } = t, i = (("string" == typeof n ? n : n.id) || "").replace(/^#/, "");
                                return c(i) ? `/${i}` : i === e.mainPageId ? "/" : B(e, i)
                            },
                            PhoneLink: e => (0, O.hm)(e),
                            EmailLink: e => (0, O.N0)(e)
                        };
                    return {
                        isAbsoluteUrl: K,
                        isDynamicPage: e => {
                            const {
                                relativePageUrlPrefix: t
                            } = u(e);
                            return G(o, t)
                        },
                        getImpliedLink: e => (0, O.Zs)(e, p),
                        getImpliedLinks: (e, t) => (0, O.S3)(e, p, t),
                        getLink: ({
                            href: t = "",
                            linkPopupId: n,
                            anchorCompId: i = "",
                            anchorDataId: r = "",
                            docInfo: o,
                            type: s
                        } = {}) => {
                            if (n) return `/${n}`;
                            if ((0, L.QJ)(t)) return t;
                            if ((t => t.startsWith(l) || d && t.startsWith((0, O.pk)(e.externalBaseUrl).href))(t)) return g(o.docId, o.name);
                            if (W(r)) return `#${D().invert(N)[r]}`;
                            if ("ExternalLink" === s) return t;
                            const [p] = t.split("?"), c = a ? .(i, "wixCode") || r, u = c ? `#${c}` : "", m = p === e.externalBaseUrl ? (() => {
                                const t = D().findKey(e.routes, (t => t.pageId === e.mainPageId));
                                return V(t)
                            })() : (t => t.replace(e.externalBaseUrl, ""))(p);
                            return `${m}${u}`
                        },
                        getLinkProps: (i, r, a) => {
                            if (o = i, R.test(o)) {
                                const t = V(e.relativeUrl);
                                return m(`${t}${i}`, r)
                            }
                            var o;
                            if ((e => k.test(e))(i)) return m(i, r, a);
                            if ((0, L.QJ)(i)) return H(i);
                            if ((0, L.ii)(i)) return (e => {
                                const [, t] = L.Lm.exec(e);
                                return {
                                    type: "PhoneLink",
                                    href: (0, O.hm)({
                                        phoneNumber: t
                                    }),
                                    target: "_self"
                                }
                            })(i);
                            if (K(i)) return ((e, t = "_blank", n = "noopener") => ({
                                type: "ExternalLink",
                                href: e,
                                target: t,
                                rel: n
                            }))(i, r, a);
                            if ((e => _.test(e) || A.test(e))(i)) return (i => {
                                const [, r, a] = _.exec(i) || A.exec(i);
                                return {
                                    type: "DocumentLink",
                                    href: (0, O.MU)({
                                        docId: r,
                                        name: a || "",
                                        indexable: !1
                                    }, t, n, e.externalBaseUrl, d),
                                    target: "_blank",
                                    docInfo: {
                                        docId: r,
                                        name: a
                                    }
                                }
                            })(i);
                            throw new F
                        },
                        getLinkUrlFromDataItem: e => {
                            const t = h[e.type];
                            if (t) return t(e);
                            throw new Error("Provided link type is not supported")
                        }
                    }
                },
                j = {
                    top: "SCROLL_TO_TOP",
                    bottom: "SCROLL_TO_BOTTOM"
                },
                z = (e, t) => {
                    if (e) {
                        const [n] = t.replace("#", "/#").split(/[/]+/), i = Object.values(e).filter((e => e.prefix === n));
                        return 1 === i.length
                    }
                    return !1
                },
                Y = (e, t) => {
                    const n = D().findKey(e.routes, (e => {
                        if ("Dynamic" === e.type) {
                            return (e.pageIds || []).includes(t)
                        }
                        return e.pageId === t
                    }));
                    if (n) return J(n);
                    throw new Error(`No url route for pageId: ${t}`)
                },
                J = e => e.replace(/^\.\//, "/"),
                Q = ({
                    routingInfo: e,
                    metaSiteId: t,
                    userFileDomainUrl: n,
                    popupPages: i,
                    getCompIdByWixCodeNickname: r,
                    getRoleForCompId: a,
                    routersConfig: o,
                    multilingualInfo: s,
                    isMobileView: p,
                    isPremiumDomain: d,
                    experiments: l
                }) => {
                    const c = v({
                        metaSiteId: t,
                        isMobileView: p
                    });
                    if (!l["specs.thunderbolt.splitLinkUtils"]) return q({
                        routingInfo: e,
                        metaSiteId: t,
                        userFileDomainUrl: n,
                        popupPages: i,
                        getCompIdByWixCodeNickname: r,
                        getRoleForCompId: a,
                        routersConfig: o,
                        multilingualInfo: s,
                        isMobileView: p,
                        isPremiumDomain: d,
                        experiments: l
                    });
                    const g = `https://${t}.${n}/`,
                        u = e => !!i && i[e],
                        m = e => {
                            const [, t = "", n = "", i = ""] = L.ak.exec(e), r = t.replace(/\/+$/, ""), a = new URLSearchParams(i);
                            return s ? .isOriginalLanguage || "QueryParam" !== s ? .currentLanguage ? .resolutionMethod || a.set("lang", s.currentLanguage.languageCode), {
                                relativePageUrlPrefix: r,
                                anchor: n,
                                queryString: a.toString()
                            }
                        },
                        I = (t, n = "_self", i) => {
                            const {
                                relativePageUrlPrefix: a = "",
                                anchor: s = "",
                                queryString: p
                            } = m(t), d = j[s] || s;
                            if (u(a)) return {
                                type: "PageLink",
                                href: "",
                                target: "_self",
                                linkPopupId: a
                            };
                            const l = e.externalBaseUrl;
                            let c, g, I;
                            if (z(o, a)) {
                                I = `./${a}` === e.relativeUrl, c = "DynamicPageLink", g = `${l}/${a}`
                            } else {
                                const [t, n] = ((e, t) => {
                                    const n = decodeURIComponent(t);
                                    if (e[`./${n}`]) return [n, ""]; {
                                        const [e, ...n] = t.split("/");
                                        return [e, n.length > 0 ? `/${n.join("/")}` : ""]
                                    }
                                })(e.routes, a), i = e.pagesUriSEOs[t] || t, r = `./${i}`, o = "./" === r ? {
                                    pageId: e.mainPageId
                                } : e.routes[r];
                                c = "PageLink", g = o ? .pageId === e.mainPageId && !n ? l : `${l}/${i}${n}`, I = o && o.pageId === e.pageId
                            }
                            const h = d && r && r(d),
                                f = I && h,
                                T = d && !f;
                            return {
                                href: `${g}${p?`?${new URLSearchParams(p).toString()}`:""}`,
                                target: n,
                                rel: i,
                                type: c,
                                ...f && {
                                    anchorCompId: h
                                },
                                ...T && {
                                    anchorDataId: d
                                }
                            }
                        },
                        h = e => {
                            const [t, n] = e.split("?");
                            if (n) {
                                const e = encodeURIComponent(`?${n}`);
                                return t ? `${t}${e}` : e
                            }
                            return t
                        },
                        f = {
                            AnchorLink: t => {
                                const {
                                    anchorDataId: n,
                                    pageId: i
                                } = t, r = (0, L.Qx)(n) ? e.pageId : i.replace(/^#/, ""), a = n.startsWith("#") ? n : `#${n}`;
                                return `${Y(e,r)}${a}`
                            },
                            DocumentLink: e => {
                                const {
                                    docId: t,
                                    name: n
                                } = e;
                                return (0, O.UG)(t, n)
                            },
                            ExternalLink: e => {
                                const {
                                    url: t
                                } = e;
                                return t
                            },
                            DynamicPageLink: e => {
                                const {
                                    routerId: t,
                                    innerRoute: n,
                                    anchorDataId: i = ""
                                } = e, r = `/${o[t].prefix}`, a = n ? h(n) : n;
                                return `${r}${a?`/${a}${i}`:i}`
                            },
                            TpaPageLink: t => {
                                const {
                                    pageId: n,
                                    path: i = ""
                                } = t, r = n.replace(/^#/, ""), a = e.pageIdToPrefix[r], o = e.pages[r].pageUriSEO, s = a ? `/${a}/${o}` : `/${o}`, p = h(i);
                                if (i.startsWith(s)) return p;
                                return `${s}${p?`/${p}`:""}`
                            },
                            PageLink: t => {
                                const {
                                    pageId: n
                                } = t, i = (("string" == typeof n ? n : n.id) || "").replace(/^#/, "");
                                return u(i) ? `/${i}` : i === e.mainPageId ? "/" : Y(e, i)
                            },
                            PhoneLink: e => (0, O.hm)(e),
                            EmailLink: e => (0, O.N0)(e)
                        };
                    return {
                        isDynamicPage: e => {
                            const {
                                relativePageUrlPrefix: t
                            } = m(e);
                            return z(o, t)
                        },
                        isAbsoluteUrl: c.isAbsoluteUrl,
                        getImpliedLink: c.getImpliedLink,
                        getImpliedLinks: c.getImpliedLinks,
                        getLink: ({
                            href: n = "",
                            linkPopupId: i,
                            anchorCompId: r = "",
                            anchorDataId: o = "",
                            docInfo: s,
                            type: p
                        } = {}) => {
                            if (i) return `/${i}`;
                            if ((t => t.startsWith(g) || d && t.startsWith((0, O.pk)(e.externalBaseUrl).href))(n)) return (0, O.UG)(s.docId, s.name);
                            const l = {
                                href: n,
                                linkPopupId: i,
                                anchorDataId: o,
                                docInfo: s,
                                type: p
                            };
                            if (((e, {
                                    href: t = "",
                                    anchorDataId: n = "",
                                    type: i
                                }) => (0, L.QJ)(t) || "ExternalLink" === i || t.startsWith(`https://${e}.filesusr.com/`) || (0, L.Qx)(n))(t, l)) return c.getLink(l);
                            const [u] = n.split("?"), m = a ? .(r, "wixCode") || o, I = m ? `#${m}` : "", h = u === e.externalBaseUrl ? (() => {
                                const t = D().findKey(e.routes, (t => t.pageId === e.mainPageId));
                                return J(t)
                            })() : (t => t.replace(e.externalBaseUrl, ""))(u);
                            return `${h}${I}`
                        },
                        getLinkProps: (i, r, a) => {
                            if ((0, L.My)(i)) {
                                const t = J(e.relativeUrl);
                                return I(`${t}${i}`, r)
                            }
                            return (0, L.rE)(i) ? I(i, r, a) : (0, L.V8)(i) ? M(i, t, n, e.externalBaseUrl, d) : c.getLinkProps(i, r, a)
                        },
                        getLinkUrlFromDataItem: e => {
                            const t = f[e.type];
                            if (t) return t(e);
                            throw new Error("Provided link type is not supported")
                        }
                    }
                };
            var X = n(71085),
                Z = n(45117),
                ee = n(93425);
            const te = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), (0, o.KT)(s._K, l.UU), X.wy, S.n, (0, o.lq)(Z.By), (0, o.lq)(ee.tX)], ((e, t, n, i, r, a, o) => ({
                    getTpaHandlers() {
                        return {
                            getStateUrl(s, p, {
                                originCompId: d
                            }) {
                                const {
                                    metaSiteId: l,
                                    userFileDomainUrl: c,
                                    routersConfig: g,
                                    appsClientSpecMapByApplicationId: u,
                                    appsClientSpecMapData: m,
                                    externalBaseUrl: I,
                                    isMobileView: h,
                                    isPremiumDomain: f
                                } = e, T = Q({
                                    routingInfo: i.getLinkUtilsRoutingInfo(),
                                    metaSiteId: l,
                                    userFileDomainUrl: c,
                                    routersConfig: g,
                                    popupPages: a ? .getLightboxPages(),
                                    multilingualInfo: o ? .getMultilingualInfo(),
                                    isMobileView: h,
                                    isPremiumDomain: f,
                                    experiments: r
                                }), P = r["specs.thunderbolt.deprecateAppId"], y = D()(n.pagesData).groupBy("tpaApplicationId").mapValues((e => e.map((e => e.id)))).value(), w = D()(n.pagesData).groupBy("appDefinitionId").mapValues((e => e.map((e => e.id)))).value(), U = Object.entries(n.pagesData).map((([e, t]) => ({
                                    [t.tpaPageId]: e
                                }))).reduce(D().assign), {
                                    state: C,
                                    sectionId: S
                                } = p, {
                                    appData: O,
                                    appPages: L
                                } = P ? (e => {
                                    const n = t.widgets[e].appDefinitionId;
                                    return {
                                        appData: m[n],
                                        appPages: w[n]
                                    }
                                })(d) : (e => {
                                    const n = t.widgets[e].applicationId;
                                    return {
                                        appData: u[n],
                                        appPages: y[n]
                                    }
                                })(d);
                                if (!L || 0 === L.length) return {
                                    error: {
                                        message: `Page with app "${O.appDefinitionName}" was not found.`
                                    }
                                };
                                const E = {
                                    type: "TpaPageLink",
                                    pageId: U[S] || L[0],
                                    path: C
                                };
                                return {
                                    url: `${I}${T.getLinkUrlFromDataItem(E)}`
                                }
                            }
                        }
                    }
                }))),
                ne = (0, o.Og)([(0, o.KT)(s.Gp, l.UU)], (({
                    widgets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getStyleParamsByStyleId(t, n) {
                                const i = Object.values(e).find((e => e.styleId === n.styleId)),
                                    r = i ? .style;
                                return r ? { ...r
                                } : {
                                    error: {
                                        message: `Style id "${n.styleId}" was not found.`
                                    }
                                }
                            }
                        }
                    }
                })));
            var ie = n(32777),
                re = n(63386),
                ae = n(17840);
            const oe = (0, o.Og)([d.TQ, (0, o.KT)(s.YG, c.UU), re.i$, d.RV, ie.F], ((e, {
                    externalBaseUrl: t
                }, n, i, r) => {
                    const a = e => ({
                            activityDetails: {
                                additionalInfoUrl: null,
                                summary: ""
                            },
                            activityInfo: "activityInfo",
                            activityType: "activityType",
                            contactUpdate: {},
                            activityLocationUrl: i.location.href,
                            createdAt: (new Date).toISOString(),
                            ...e
                        }),
                        o = ((e, t) => n => {
                            const i = new URL(t);
                            return Object.entries(n.params).forEach((([e, t]) => {
                                t && i.searchParams.append(e, t)
                            })), e.envFetch(i.href, {
                                method: "POST",
                                body: JSON.stringify(n.payload),
                                headers: {
                                    "Content-Type": "application/json"
                                }
                            })
                        })(r, `${t}/_api/app-integration-bus-web/v1/activities`);
                    return {
                        getTpaHandlers() {
                            return {
                                postActivity: (0, ae.V)(["site"], ((t, {
                                    activity: i
                                }, {
                                    appDefinitionId: r
                                }) => {
                                    var s;
                                    return (async e => {
                                        const t = await o(e);
                                        if (!t.ok) return {
                                            status: !1,
                                            response: {
                                                status: t.status,
                                                statusText: t.statusText,
                                                responseText: await t.text()
                                            }
                                        };
                                        const {
                                            userSessionToken: i,
                                            activityId: r,
                                            contactId: a
                                        } = await t.json();
                                        return i && n.setUserSession(i), {
                                            status: !0,
                                            response: {
                                                activityId: r,
                                                contactId: a
                                            }
                                        }
                                    })({
                                        params: (s = {
                                            "application-id": r || "TPA",
                                            instance: n.getAppInstanceByAppDefId(r)
                                        }, {
                                            hs: n.getHubSecurityToken(),
                                            "activity-id": "xxxxxxxx".replace(/x/g, (() => (16 * Math.random() | 0).toString(16))),
                                            "metasite-id": e.site.metaSiteId,
                                            svSession: n.getUserSession(),
                                            version: "1.0.0",
                                            ...s
                                        }),
                                        payload: a({
                                            contactUpdate: i.contactUpdate || {},
                                            activityInfo: i.info || {},
                                            activityType: i.type || "TPA",
                                            activityDetails: i.details || {}
                                        })
                                    })
                                }))
                            }
                        }
                    }
                })),
                se = (0, o.Og)([re.i$], (e => ({
                    getTpaHandlers() {
                        return {
                            getCtToken() {
                                return e.getCtToken()
                            },
                            getUserSession() {
                                return e.getUserSession()
                            }
                        }
                    }
                })));
            var pe = n(75396);
            const de = (0, o.Og)([X.$1, pe.t7, (0, o.KT)(s.YG, c.UU)], ((e, t, {
                    routerByPrefix: n
                }) => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageNavigationInfo() {
                                const i = e.getRelativeUrl(),
                                    {
                                        type: r,
                                        pageId: a
                                    } = t.getCurrentRouteInfo();
                                if ("Static" === r) return {
                                    type: "PageLink",
                                    pageId: a
                                };
                                const [, o, ...s] = i.split("/");
                                return {
                                    type: "DynamicPageLink",
                                    routerId: n[o],
                                    innerRoute: s.join("/") || "/"
                                }
                            }
                        }
                    }
                }))),
                le = (0, o.Og)([d.RV], (e => ({
                    getTpaHandlers() {
                        return {
                            getAdsOnPage() {
                                const t = e.document.getElementById("WIX_ADS");
                                if (!t) return {};
                                const {
                                    height: n,
                                    width: i,
                                    x: r,
                                    y: a
                                } = t.getBoundingClientRect();
                                return {
                                    top: {
                                        height: n,
                                        width: i,
                                        top: a,
                                        left: r
                                    }
                                }
                            }
                        }
                    }
                })));
            var ce = n(49152),
                ge = n(25874),
                ue = n(77739);
            const me = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), d.TQ, pe.t7, p.Ji, ge.f, l.oJ, X.wy, S.n, (0, o.lq)(Z.By), (0, o.lq)(ue.nU), (0, o.lq)(ee.tX)], ((e, t, n, i, r, a, o, s, p, d, l, c) => ({
                getTpaHandlers() {
                    const n = (t = s.getLinkUtilsRoutingInfo()) => {
                            const {
                                metaSiteId: n,
                                userFileDomainUrl: i,
                                routersConfig: r,
                                isMobileView: a,
                                isPremiumDomain: o
                            } = e;
                            return Q({
                                routingInfo: t,
                                metaSiteId: n,
                                userFileDomainUrl: i,
                                routersConfig: r,
                                popupPages: d ? .getLightboxPages(),
                                multilingualInfo: c ? .getMultilingualInfo(),
                                isMobileView: a,
                                isPremiumDomain: o,
                                experiments: p
                            })
                        },
                        i = async ({
                            compId: e,
                            state: i,
                            skipHistory: r,
                            queryParams: o = {},
                            disableScrollToTop: p = !0
                        }) => {
                            const d = s.getLinkUtilsRoutingInfo(),
                                l = n(d),
                                {
                                    widgets: c
                                } = t,
                                g = c[e] ? .isSection;
                            if (!g) return;
                            const u = {
                                    type: "TpaPageLink",
                                    pageId: d.pageId,
                                    path: i
                                },
                                m = `${l.getLinkUrlFromDataItem(u)}${D().isEmpty(o)?"":`?appSectionParams=${encodeURIComponent(JSON.stringify(o))}`}`,
                                I = l.getLinkProps(m);
                            await a.navigateTo(I, {
                                skipHistory: r,
                                disableScrollToTop: p
                            })
                        };
                    return {
                        async replaceSectionState(e, {
                            state: t,
                            queryParams: n
                        }) {
                            return i({
                                compId: e,
                                skipHistory: !0,
                                state: t,
                                queryParams: n
                            })
                        },
                        async appStateChanged(e, {
                            state: t
                        }) {
                            let o;
                            try {
                                o = JSON.parse(t)
                            } catch (e) {
                                o = null
                            }
                            const p = (t, ...n) => {
                                    t[ce.s] ? t({
                                        args: n,
                                        compId: e
                                    }) : t(...n)
                                },
                                d = t => {
                                    const n = r.get(e).onItemClicked;
                                    n && p(n, {
                                        type: "itemClicked",
                                        itemIndex: t,
                                        item: r.get(e).images[t]
                                    })
                                };
                            if (!o) return i({
                                compId: e,
                                skipHistory: !1,
                                state: t
                            }); {
                                const t = {
                                    zoom: () => {
                                        const [t] = o.args, {
                                            id: n
                                        } = r.get(e).images[t];
                                        l.openImageZoom(e, n), d(t)
                                    },
                                    itemClicked: () => {
                                        const [e] = o.args;
                                        d(e)
                                    },
                                    itemChanged: () => {
                                        const [t] = o.args, n = r.get(e).onCurrentItemChanged;
                                        n && p(n, {
                                            type: "imageChanged",
                                            itemIndex: t,
                                            item: r.get(e).images[t]
                                        })
                                    },
                                    componentReady: () => {
                                        const t = r.get(e).readyReportsCount ? ? 0;
                                        r.update({
                                            [e]: {
                                                componentReady: !0,
                                                readyReportsCount: t + 1
                                            }
                                        })
                                    },
                                    navigateToDynamicPage: () => {
                                        const [e] = o.args, t = n(), i = (e => !e.id && !!(e.href || e.linkPopupId || e.anchorDataId || e.anchorCompId))(e) ? e : t.getLinkProps(t.getLinkUrlFromDataItem(e));
                                        a.navigateTo(i)
                                    },
                                    navigateToAnchor: () => {
                                        const [e, t] = o.args, i = {
                                            type: "PageLink",
                                            pageId: "masterPage" === e ? s.getLinkUtilsRoutingInfo().pageId : e,
                                            target: "_self"
                                        }, r = n(), p = r.getLinkUrlFromDataItem(i), d = r.getLinkProps(p), l = Object.assign(d, t);
                                        a.navigateTo(l)
                                    }
                                }[o.cmd];
                                t && t()
                            }
                        }
                    }
                }
            })));
            var Ie = n(9492),
                he = n(6623);
            const fe = (0, o.Og)([(0, o.KT)(s.YG, c.UU), Ie.O$, pe.t7, (0, o.lq)(X.xt), (0, o.lq)(he.F)], (({
                    debug: e
                }, t, n, i, r) => ({
                    getTpaHandlers() {
                        return {
                            applicationLoadingStep(t, a, {
                                appDefinitionId: o,
                                tpaCompData: {
                                    widgetId: s
                                } = {}
                            }) {
                                if (g.l.isRuntimeCompId(t)) return void(e && console.warn(`applicationLoadingStep is ignored in runtime component ${t}`));
                                const p = n.getCurrentRouteInfo(),
                                    d = Math.round(performance.now()),
                                    {
                                        stage: l,
                                        stageNum: c
                                    } = a;
                                r ? .logger.log({
                                    appId: o,
                                    widget_id: s,
                                    instance_id: t,
                                    src: 42,
                                    evid: 644,
                                    tts: d,
                                    pid: p ? p.pageId : null,
                                    stage: l,
                                    stageNum: c,
                                    pn: i.getPageNumber()
                                }, {
                                    endpoint: "ugc-viewer"
                                })
                            }
                        }
                    }
                }))),
                Te = (0, o.Og)([(0, o.KT)(s.YG, c.UU), Ie.O$, pe.t7, (0, o.lq)(X.xt), (0, o.lq)(he.F)], (({
                    debug: e
                }, t, n, i, r) => ({
                    getTpaHandlers() {
                        return {
                            applicationLoaded(t, a, {
                                appDefinitionId: o,
                                tpaCompData: {
                                    widgetId: s
                                } = {}
                            }) {
                                if (g.l.isRuntimeCompId(t)) return void(e && console.warn(`applicationLoaded is ignored in runtime component ${t}`));
                                const p = n.getCurrentRouteInfo(),
                                    d = Math.round(performance.now());
                                r ? .logger.log({
                                    appId: o,
                                    widget_id: s,
                                    instance_id: t,
                                    src: 42,
                                    evid: 643,
                                    tts: d,
                                    pid: p ? p.pageId : null,
                                    pn: i.getPageNumber()
                                }, {
                                    endpoint: "ugc-viewer"
                                })
                            }
                        }
                    }
                })));
            var Pe = n(19889);
            const ye = (0, o.Og)([Pe.Np, l.oJ], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            async refreshCurrentMember() {
                                const n = await e.getMemberDetails(!0);
                                n && t.dispatch("MEMBER_DETAILS_UPDATED", (() => n))
                            }
                        }
                    }
                }))),
                we = (0, o.Og)([r.ir, r.tY], (({
                    openPopup: e
                }, t) => {
                    const n = e => {
                        if (t.isModal(e)) {
                            const e = new Error("An app can not open a popup from a modal.");
                            return e.name = "Operation not supported", e
                        }
                        return null
                    };
                    return {
                        getTpaHandlers() {
                            return {
                                openPopup: (0, ae.V)(["site", "preview"], ((t, {
                                    url: i,
                                    ...r
                                }, {
                                    originCompId: a
                                }) => {
                                    const o = n(t);
                                    return o ? Promise.reject(o) : e(i, r, a)
                                })),
                                openPersistentPopup: (0, ae.V)(["site", "preview"], ((t, {
                                    url: i,
                                    ...r
                                }, {
                                    originCompId: a
                                }) => {
                                    const o = n(t);
                                    return o ? Promise.reject(o) : e(i, { ...r,
                                        persistent: !0
                                    }, a)
                                }))
                            }
                        }
                    }
                })),
                Ue = (0, o.Og)([re.i$], (e => ({
                    getTpaHandlers() {
                        return {
                            getAppVendorProductId(t, {
                                appDefinitionId: n
                            }) {
                                const i = e.getAppInstanceByAppDefId(n) ? .replace(/^[^.]+./, "");
                                if (!i) return null;
                                const r = JSON.parse(atob(i)) ? .vendorProductId;
                                return r || null
                            }
                        }
                    }
                })));
            var Ce = n(82658);
            const De = e => D().isNumber(e) ? e : NaN,
                Se = e => D().parseInt((e || "").toString().split("px")[0]),
                Oe = e => {
                    const t = {
                        size: 0,
                        unit: ""
                    };
                    return D().isNumber(e) ? t.size = e : D().isString(e) && (t.unit = (e => {
                        const t = /(%)$/.exec(e);
                        return t && t[1] ? t[1] : ""
                    })(e), t.size = (e => {
                        const t = /^([0-9]+)/.exec(e);
                        return t && t[1] ? parseInt(t[1], 10) : 0
                    })(e)), t
                },
                Le = ({
                    width: e,
                    height: t
                }, n) => "100%" === t && ("100%" === e || Number(Se(e)) >= n.innerWidth),
                Ee = (e, t, n) => {
                    const i = (0, Ce.fU)(t) ? null : t.document.getElementById(n),
                        r = i ? i.getBoundingClientRect() : null,
                        a = (e => {
                            let t = 0,
                                n = 0;
                            if (e && e.offsetParent) {
                                let i = e;
                                do {
                                    t += i.offsetLeft, n += i.offsetTop
                                } while (i = i.offsetParent)
                            }
                            return {
                                top: n,
                                left: t
                            }
                        })(i),
                        o = {
                            left: a.left,
                            top: a.top,
                            width: r ? Math.round(r.width) : 0,
                            height: r ? Math.round(r.height) : 0,
                            actualTop: r ? r.top : 0,
                            actualLeft: r ? r.left : 0
                        },
                        s = D().defaults(e.position, {
                            x: 0,
                            y: 0,
                            origin: "FIXED",
                            placement: "CENTER"
                        }),
                        p = D().pick(e, "height", "width"),
                        d = {
                            width: (0, Ce.fU)(t) ? 0 : t.innerWidth,
                            height: (0, Ce.fU)(t) ? 0 : t.innerHeight
                        },
                        l = {
                            RELATIVE: () => ((e, t, n, i) => {
                                const r = function(e, t, n) {
                                        return e + t / 2 - n / 2
                                    },
                                    a = function(e, t, n) {
                                        return e - (t + n)
                                    },
                                    o = function(e, t, n) {
                                        return e - (t + n)
                                    },
                                    s = function(e, t, n) {
                                        return e + t / 2 - n / 2
                                    },
                                    p = De(i.height),
                                    d = De(i.width),
                                    l = {
                                        CENTER: () => ({
                                            height: D().min([p, n.height]),
                                            width: D().min([d, n.width]),
                                            top: s(t.top, t.height, p),
                                            left: r(t.left, t.width, d)
                                        }),
                                        TOP_LEFT: () => ({
                                            height: D().min([p, t.top]),
                                            width: D().min([d, t.left]),
                                            top: t.top - p,
                                            left: t.left - d
                                        }),
                                        TOP_RIGHT: () => ({
                                            height: D().min([p, t.top]),
                                            width: D().min([d, o(n.width, t.width, t.left)]),
                                            top: t.top - p,
                                            left: t.width + t.left
                                        }),
                                        TOP_CENTER: () => ({
                                            height: D().min([p, t.top]),
                                            width: D().min([d, n.width]),
                                            top: t.top - p,
                                            left: r(t.left, t.width, d)
                                        }),
                                        CENTER_RIGHT: () => ({
                                            height: D().min([p, n.height]),
                                            width: D().min([d, o(n.width, t.width, t.left)]),
                                            top: s(t.top, t.height, p),
                                            left: t.width + t.left
                                        }),
                                        CENTER_LEFT: () => ({
                                            height: D().min([p, n.height]),
                                            width: D().min([d, t.left]),
                                            top: s(t.top, t.height, p),
                                            left: t.left - d
                                        }),
                                        BOTTOM_LEFT: () => ({
                                            height: D().min([p, a(n.height, t.top, t.height)]),
                                            width: D().min([d, t.left]),
                                            top: t.top + t.height,
                                            left: t.left - d
                                        }),
                                        BOTTOM_RIGHT: () => ({
                                            height: D().min([p, a(n.height, t.top, t.height)]),
                                            width: D().min([d, o(n.width, t.width, t.left)]),
                                            top: t.top + t.height,
                                            left: t.width + t.left
                                        }),
                                        BOTTOM_CENTER: () => ({
                                            height: D().min([p, a(n.height, t.top, t.height)]),
                                            width: D().min([d, n.width]),
                                            top: t.top + t.height,
                                            left: r(t.left, t.width, d)
                                        })
                                    }[e.placement](),
                                    c = D().max([0, l.top]),
                                    g = D().max([0, l.left]);
                                return {
                                    position: "absolute",
                                    display: "block",
                                    width: 0,
                                    height: 0,
                                    ...l,
                                    top: c,
                                    left: g
                                }
                            })(s, o, d, p),
                            ABSOLUTE: () => ((e, t, n, i) => {
                                const r = De(i.height),
                                    a = De(i.width),
                                    o = {
                                        CENTER: () => {
                                            const i = D().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]),
                                                o = D().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: D().min([r, 2 * i]),
                                                width: D().min([a, 2 * o]),
                                                top: t.top + e.y - r / 2,
                                                left: t.left + e.x - a / 2
                                            }
                                        },
                                        TOP_LEFT: () => ({
                                            height: D().min([r, t.actualTop + e.y]),
                                            width: D().min([a, t.actualLeft + e.x]),
                                            top: t.top + e.y - r,
                                            left: t.left + e.x - a
                                        }),
                                        TOP_RIGHT: () => ({
                                            height: D().min([r, t.actualTop + e.y]),
                                            width: D().min([a, n.width - (t.actualLeft + e.x)]),
                                            top: t.top + e.y - r,
                                            left: t.left + e.x
                                        }),
                                        TOP_CENTER: () => {
                                            const i = D().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: D().min([r, t.actualTop + e.y]),
                                                width: D().min([a, 2 * i]),
                                                top: t.top + e.y - r,
                                                left: t.left + e.x - a / 2
                                            }
                                        },
                                        CENTER_RIGHT: () => {
                                            const i = D().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]);
                                            return {
                                                height: D().min([r, 2 * i]),
                                                width: D().min([a, n.width - (t.actualLeft + e.x)]),
                                                top: t.top + e.y - r / 2,
                                                left: t.left + e.x
                                            }
                                        },
                                        CENTER_LEFT: () => {
                                            const i = D().min([t.actualTop + e.y, n.height - (t.actualTop + e.y)]);
                                            return {
                                                height: D().min([r, 2 * i]),
                                                width: D().min([a, t.actualLeft + e.x]),
                                                top: t.top + e.y - r / 2,
                                                left: t.left + e.x - a
                                            }
                                        },
                                        BOTTOM_LEFT: () => ({
                                            height: D().min([r, n.height - e.y]),
                                            width: D().min([a, t.actualLeft + e.x]),
                                            top: t.top + e.y,
                                            left: t.left + e.x - a
                                        }),
                                        BOTTOM_RIGHT: () => ({
                                            height: D().min([r, n.height - (t.actualTop + e.y)]),
                                            width: D().min([a, n.width - (t.actualLeft + e.x)]),
                                            top: t.top + e.y,
                                            left: t.left + e.x
                                        }),
                                        BOTTOM_CENTER: () => {
                                            const i = D().min([t.actualLeft + e.x, n.width - (t.actualLeft + e.x)]);
                                            return {
                                                height: D().min([r, n.height - (t.actualTop + e.y)]),
                                                width: D().min([a, 2 * i]),
                                                top: t.top + e.y,
                                                left: t.left + e.x - a / 2
                                            }
                                        }
                                    }[e.placement](),
                                    s = D().max([0, o.top]),
                                    p = D().max([0, o.left]);
                                return {
                                    position: "absolute",
                                    display: "block",
                                    width: 0,
                                    height: 0,
                                    ...o,
                                    top: s,
                                    left: p
                                }
                            })(s, o, d, p),
                            FIXED: () => ((e, t, n) => {
                                const i = {
                                        position: "fixed",
                                        display: "block",
                                        width: n.width,
                                        height: n.height
                                    },
                                    r = Oe(n.height);
                                "%" === r.unit ? r.size = D().min([r.size, 100]) : r.size > t.height && (r.unit = "%", r.size = 100);
                                const a = Oe(n.width);
                                a.size = "%" === a.unit ? D().min([a.size, 100]) : D().min([a.size, t.width]);
                                const o = {
                                    CENTER: () => ({
                                        marginLeft: a.size / -2 + (a.unit || "px"),
                                        marginTop: "%" === r.unit ? 0 : r.size / -2 + (r.unit || "px"),
                                        left: "50%",
                                        top: "%" === r.unit ? 0 : "50%"
                                    }),
                                    TOP_LEFT: () => ({
                                        left: "0px",
                                        top: "0px"
                                    }),
                                    TOP_RIGHT: () => ({
                                        right: "0px",
                                        top: "0px"
                                    }),
                                    TOP_CENTER: () => ({
                                        marginLeft: a.size / -2 + (a.unit || "px"),
                                        top: "0px",
                                        left: "50%"
                                    }),
                                    CENTER_RIGHT: () => ({
                                        marginTop: "%" === r.unit ? 0 : r.size / -2 + (r.unit || "px"),
                                        top: "%" === r.unit ? 0 : "50%",
                                        right: "0px"
                                    }),
                                    CENTER_LEFT: () => ({
                                        marginTop: "%" === r.unit ? 0 : r.size / -2 + (r.unit || "px"),
                                        top: "%" === r.unit ? 0 : "50%",
                                        left: "0px"
                                    }),
                                    BOTTOM_LEFT: () => ({
                                        bottom: "0px",
                                        left: "0px"
                                    }),
                                    BOTTOM_RIGHT: () => ({
                                        bottom: "0px",
                                        right: "0px"
                                    }),
                                    BOTTOM_CENTER: () => ({
                                        marginLeft: a.size / -2 + (a.unit || "px"),
                                        left: "50%",
                                        bottom: "0px"
                                    })
                                };
                                return i.width = a.size + (a.unit || "px"), i.height = r.size + (r.unit || "px"), { ...i,
                                    ...o[e.placement]()
                                }
                            })(s, d, p)
                        };
                    return ((e, t, n) => {
                        if (Se(e.width) < 10 || Se(e.height) < 10) {
                            const e = Oe(n.height);
                            e.size = "%" === e.unit ? D().min([e.size, 100]) : D().min([e.size, t.height]);
                            const i = Oe(n.width);
                            return i.size = "%" === i.unit ? D().min([i.size, 100]) : D().min([i.size, t.height]), {
                                position: "fixed",
                                display: "block",
                                width: `${i.size}${i.unit||"px"}`,
                                height: `${e.size}${e.unit||"px"}`,
                                marginLeft: `${i.size/-2}${i.unit||"px"}`,
                                marginTop: `${e.size/-2}${e.unit||"px"}`,
                                left: "50%",
                                top: "50%"
                            }
                        }
                        return e
                    })(l[s.origin](), d, p)
                };
            var be = n(73896);
            const Me = (0, o.Og)([p.Ji, d.RV, be.j, (0, o.KT)(s.YG, c.UU), r.tY], ((e, t, n, i, r) => {
                    const a = (a, o) => {
                        const {
                            options: s,
                            originCompId: p
                        } = e.get(a), d = { ...s,
                            ...o
                        }, l = r.isModal(a) ? (e => ["height", "width"].reduce(((t, n) => {
                            const i = e[n];
                            if (!D().isNil(i)) {
                                const {
                                    unit: e,
                                    size: r
                                } = Oe(i);
                                e || (t[n] = r)
                            }
                            return t
                        }), {}))(o) : Ee(d, t, p);
                        e.update({
                            [a]: {
                                styleOverrides: l
                            }
                        }), n.setSiteScrollingBlocked(i.isMobileView && Le(l, t), a)
                    };
                    return {
                        getTpaHandlers() {
                            return {
                                async resizeWindow(t, n, {
                                    tpaCompData: i
                                }) {
                                    if (g.l.isRuntimeCompId(t)) a(t, n);
                                    else if (i ? .isPinned) {
                                        const i = {
                                            width: D().isNumber(n.width) ? `${n.width}px` : n.width,
                                            height: D().isNumber(n.height) ? `${n.height}px` : n.height
                                        };
                                        D().isEqual(i, e.get(t).styleOverrides) || e.update({
                                            [t]: {
                                                styleOverrides: i
                                            }
                                        })
                                    }
                                },
                                heightChanged(t, n, {
                                    tpaCompData: i
                                }) {
                                    if (g.l.isRuntimeCompId(t)) a(t, {
                                        height: n.height
                                    });
                                    else {
                                        if (0 === n.height && !i ? .isPinned) return;
                                        e.update({
                                            [t]: {
                                                heightOverride: Math.round(n.height),
                                                heightOverflow: Boolean(n.overflow)
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                })),
                xe = (0, o.Og)([], (() => ({
                    getTpaHandlers() {
                        return {
                            onReady() {
                                return Promise.resolve()
                            }
                        }
                    }
                })));
            var ve = n(86046);
            class ke extends Error {
                constructor(e) {
                    super(e), this.name = "HandlerError"
                }
            }
            const Re = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s._K, l.UU), ge.f, X.wy, c.V5, S.n, (0, o.lq)(Z.By), (0, o.lq)(ee.tX), (0, o.lq)(ve.e$), (0, o.lq)(y.a)], ((e, t, i, r, {
                    getTpaSectionByAppDefinitionId: a
                }, o, s, p, d, l) => {
                    const c = Object.entries(t.pagesData);
                    return {
                        getTpaHandlers: () => ({
                            async navigateToSectionPage(g, u, {
                                appDefinitionId: m
                            }) {
                                const {
                                    metaSiteId: h,
                                    userFileDomainUrl: f,
                                    routersConfig: T,
                                    isMobileView: P,
                                    isPremiumDomain: y
                                } = e, w = Q({
                                    routingInfo: r.getLinkUtilsRoutingInfo(),
                                    metaSiteId: h,
                                    userFileDomainUrl: f,
                                    routersConfig: T,
                                    popupPages: s ? .getLightboxPages(),
                                    multilingualInfo: p ? .getMultilingualInfo(),
                                    isMobileView: P,
                                    isPremiumDomain: y,
                                    experiments: o
                                }), {
                                    sectionIdentifier: {
                                        sectionId: U,
                                        noTransition: C = !1,
                                        queryParams: S = {},
                                        appDefinitionId: O,
                                        state: L
                                    } = {},
                                    state: E
                                } = u, b = O || m;
                                if (!b) throw new ke("Component was not found.");
                                const M = E || L;
                                let x = "";
                                try {
                                    x = (({
                                        appDefinitionId: n,
                                        sectionId: i
                                    }) => {
                                        const r = c.reduce(((e, [t, n]) => (n.appDefinitionId && (e[n.appDefinitionId] || (e[n.appDefinitionId] = {}), e[n.appDefinitionId][n.tpaPageId] = t), e)), {}),
                                            a = D()(t.pagesData).filter((e => !!e.appDefinitionId)).groupBy("appDefinitionId").mapValues((e => e.map((e => e.id)))).value(),
                                            o = e.appsClientSpecMapData[n];
                                        if (!o) throw new ke(`Application with appDefinitionId "${n}" was not found on the site.`);
                                        const s = a[n];
                                        if (!s || 0 === s.length) throw new ke(`Page with app "${o.appDefinitionName}" was not found.`);
                                        const p = i ? r[n][i] : null;
                                        if (i && !p) throw new ke(`App page with sectionId "${i}" was not found.`);
                                        return p || s[0]
                                    })({
                                        appDefinitionId: b,
                                        sectionId: U
                                    })
                                } catch (e) {
                                    if (e instanceof ke) return {
                                        error: {
                                            message: e.message
                                        }
                                    };
                                    throw e
                                }
                                const v = {
                                        type: "TpaPageLink",
                                        pageId: x,
                                        path: M
                                    },
                                    k = await (async e => {
                                        const t = l ? .urlMappings;
                                        if (t) {
                                            const {
                                                buildCustomizedUrl: i
                                            } = await Promise.all([n.e(671), n.e(6510)]).then(n.bind(n, 87148)), {
                                                key: r,
                                                variables: a,
                                                options: o
                                            } = e ? .sectionIdentifier ? .customizeTarget ? .customUrlData || {};
                                            if (r && a) return i(t, r, a, o)
                                        }
                                    })(u) || w.getLinkUrlFromDataItem(v),
                                    R = `${k}${D().isEmpty(S)?"":`?appSectionParams=${encodeURIComponent(JSON.stringify(S))}`}`,
                                    $ = w.getLinkProps(R);
                                C && d && d.disableNextTransition();
                                if (!await i.navigateTo($)) {
                                    if (console.warn("You have invoked the navigateToSectionPage() API but you are already on the section page. Please use the pushState() API instead."), !1 === u.sectionIdentifier ? .shouldRefreshIframe) return I.Zq;
                                    const e = a(b);
                                    e && e.rebuildSrc()
                                }
                                return I.Zq
                            }
                        })
                    }
                })),
                $e = (0, o.Og)([d.RV, (0, o.KT)(s.Gp, l.UU)], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            boundingRectAndOffsets(n) {
                                const i = {
                                        offsets: {
                                            x: 0,
                                            y: 0
                                        },
                                        rect: {
                                            left: 0,
                                            right: 0,
                                            top: 0,
                                            bottom: 0,
                                            height: 0,
                                            width: 0
                                        },
                                        scale: t.siteScale
                                    },
                                    r = e.document.getElementById(n);
                                if (!r) return i;
                                const a = (() => {
                                        if (!t.isFixedHeader) return 0;
                                        const n = e.document.getElementById("SITE_HEADER");
                                        return n && n.getBoundingClientRect().height || 0
                                    })(),
                                    o = r.getBoundingClientRect();
                                return i.offsets = {
                                    x: o.left + e.scrollX,
                                    y: o.top + e.scrollY - a
                                }, i.rect = D()(o).pick(["left", "right", "top", "bottom", "height", "width"]).mapValues((e => Math.floor(e))).value(), i.rect.top -= a, i
                            }
                        }
                    }
                })));
            var _e = n(12457);
            const Ae = (0, o.Og)([(0, o.KT)(s.Gp, l.UU), _e.Tf, d.Ht], (({
                    widgets: e
                }, t, n) => ({
                    getTpaHandlers() {
                        return {
                            setPageMetadata: (0, ae.V)(["site"], (async (i, r, {
                                originCompId: a
                            }) => {
                                if (!e[a] || !e[a].isSection) {
                                    const e = "Setting a page meta data is possible only to TPA Sections and MultiSections";
                                    return n.captureError(new Error(e), {
                                        tags: {
                                            feature: "tpa"
                                        }
                                    }), {
                                        error: {
                                            message: e
                                        }
                                    }
                                }
                                return await t.setTPAOverrides(r), await t.renderSEO(), null
                            }))
                        }
                    }
                }))),
                Ne = (0, o.Og)([r.tY], (e => ({
                    getTpaHandlers() {
                        return {
                            openModal: (0, ae.V)(["site", "preview"], ((t, {
                                url: n,
                                theme: i,
                                height: r,
                                width: a
                            }) => e.openModal(n, {
                                width: a,
                                height: r,
                                theme: i
                            }, t)))
                        }
                    }
                }))),
                He = (0, o.Og)([(0, o.KT)(s.YG, c.UU), ge.f, X.wy, p.eZ, S.n, (0, o.lq)(Z.By), (0, o.lq)(ee.tX), (0, o.lq)(ve.e$)], ((e, t, n, i, r, a, o, s) => {
                    const p = t => {
                            const {
                                metaSiteId: i,
                                userFileDomainUrl: s,
                                routersConfig: p,
                                isMobileView: d,
                                isPremiumDomain: l
                            } = e, c = Q({
                                routingInfo: n.getLinkUtilsRoutingInfo(),
                                metaSiteId: i,
                                userFileDomainUrl: s,
                                routersConfig: p,
                                popupPages: a ? .getLightboxPages(),
                                multilingualInfo: o ? .getMultilingualInfo(),
                                isMobileView: d,
                                isPremiumDomain: l,
                                experiments: r
                            }), g = c.getLinkUrlFromDataItem(t);
                            return c.getLinkProps(g)
                        },
                        d = ({
                            pageId: e,
                            anchorId: i,
                            noTransition: r
                        }) => {
                            const a = (({
                                pageId: e,
                                anchorId: t
                            }) => {
                                const i = p({
                                    type: "PageLink",
                                    pageId: e,
                                    target: "_self"
                                });
                                return t && (n.getLinkUtilsRoutingInfo().pageId === e ? i.anchorCompId = t : i.anchorDataId = t), i
                            })({
                                pageId: e,
                                anchorId: i
                            });
                            return r && s && s.disableNextTransition(), t.navigateTo(a)
                        };
                    return {
                        getTpaHandlers() {
                            return {
                                navigateToPage(e, {
                                    pageId: t,
                                    anchorId: n,
                                    noTransition: i
                                }) {
                                    d({
                                        pageId: t,
                                        anchorId: n,
                                        noTransition: i
                                    })
                                },
                                navigateTo(e, {
                                    link: n
                                }) {
                                    if (n.type === I.rm.EXTERNAL_LINK) return;
                                    const i = p(n);
                                    t.navigateTo(i)
                                },
                                async navigateToAnchor(e, {
                                    anchorId: t
                                }) {
                                    if (!await d({
                                            pageId: n.getLinkUtilsRoutingInfo().pageId,
                                            anchorId: t
                                        })) throw new Error(`anchor with id "${t}" was not found on the current page.`);
                                    return I.Zq
                                },
                                async navigateToComponent(e, {
                                    compId: t,
                                    pageId: i,
                                    noPageTransition: r
                                }) {
                                    const a = i || n.getLinkUtilsRoutingInfo().pageId;
                                    if (!await d({
                                            pageId: a,
                                            anchorId: t,
                                            noTransition: r
                                        })) throw new Error(`Page id "${a}" does not contain the component id "${t}".`);
                                    return I.Zq
                                }
                            }
                        }
                    }
                })),
                Ke = (0, o.Og)([(0, o.KT)(s.YG, c.UU)], (({
                    appsClientSpecMapData: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getApplicationFields(t, {
                                appDefinitionId: n
                            }) {
                                return e[n].appFields
                            }
                        }
                    }
                })));
            var Ge = n(95017),
                Be = n(64537);
            const Fe = (0, o.Og)([Ge.j, l.oJ], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            removeEventListener(n, {
                                eventKey: i
                            }, {
                                appDefinitionId: r
                            }) {
                                i.startsWith(Be.iZ) ? e.unsubscribe(r, n, i) : t.unregister(i, n)
                            }
                        }
                    }
                }))),
                Ve = (0, o.Og)([Ge.j], (e => ({
                    getTpaHandlers() {
                        return {
                            publish(t, n, {
                                appDefinitionId: i
                            }) {
                                e.publish(i, t, n)
                            }
                        }
                    }
                }))),
                We = (0, o.Og)([re.i$, l.oJ], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            async revalidateSession(n, i, {
                                appDefinitionId: r
                            }) {
                                await e.loadNewSession();
                                const a = {
                                    instance: e.getAppInstanceByAppDefId(r)
                                };
                                return t.dispatch("INSTANCE_CHANGED", (() => a), {
                                    appDefinitionId: r
                                }), a
                            }
                        }
                    }
                })));
            var qe = n(66340),
                je = n(16638);
            const ze = (0, o.Og)([(0, o.KT)(s._K, l.UU), (0, o.KT)(s.Gp, l.UU), l._w, je.A, p.Ji, qe.aR], ((e, {
                    widgets: t
                }, n, i, r, {
                    getFontsConfig: a
                }) => ({
                    getTpaHandlers() {
                        return {
                            appIsAlive(o, s, {
                                originCompId: p
                            }) {
                                const {
                                    siteColors: d,
                                    isVisualFocusEnabled: l,
                                    siteTextPresets: c
                                } = e;
                                r.update({
                                    [o]: {
                                        sentAppIsAlive: !0
                                    }
                                }), n.reportTpaLoadEnd(o);
                                const g = t[p] || {
                                    style: {
                                        colors: {},
                                        numbers: {},
                                        booleans: {},
                                        fonts: {},
                                        googleFontsCssUrl: "",
                                        uploadFontFaces: ""
                                    }
                                };
                                return {
                                    fonts: a(),
                                    commonConfig: i.getCommonConfig(),
                                    isVisualFocusEnabled: l,
                                    siteColors: d,
                                    siteTextPresets: c,
                                    ...g
                                }
                            }
                        }
                    }
                }))),
                Ye = (0, o.Og)([l.oJ, Ge.j], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            registerEventListener(n, {
                                eventKey: i,
                                receivePastEvents: r = !1
                            }, {
                                callId: a,
                                tpa: o,
                                tpaCompData: {
                                    widgetId: s = ""
                                } = {},
                                appDefinitionId: p
                            }) {
                                if (i.startsWith(Be.iZ)) t.handleIframeSubscribe(p, n, {
                                    eventKey: i,
                                    isPersistent: r,
                                    callId: a
                                });
                                else {
                                    const t = (e, t) => {
                                        o.postMessage(JSON.stringify({
                                            intent: "addEventListener",
                                            eventType: e,
                                            params: t
                                        }), "*")
                                    };
                                    e.register(i, n, t, {
                                        widgetId: s,
                                        appDefinitionId: p
                                    })
                                }
                            }
                        }
                    }
                }))),
                Je = (0, o.Og)([r.tY, r.ir], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            closeWindow: (n, i) => T({
                                tpaModal: e,
                                tpaPopup: t,
                                compId: n,
                                onCloseMessage: i
                            })
                        }
                    }
                }))),
                Qe = (0, o.Og)([pe.t7], (e => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageId() {
                                return e.getCurrentRouteInfo().pageId
                            }
                        }
                    }
                })));
            var Xe = n(54157);
            const Ze = (0, o.Og)([d.RV, S.n, Xe.n], ((e, t, n) => ({
                    getTpaHandlers() {
                        return {
                            async scrollTo(t, {
                                x: i,
                                y: r,
                                scrollAnimation: a
                            }) {
                                a && !n ? e.scrollTo({
                                    left: i,
                                    top: r,
                                    behavior: "smooth"
                                }) : e.scrollTo(i, r)
                            }
                        }
                    }
                }))),
                et = (0, o.Og)([d.RV], (e => ({
                    getTpaHandlers() {
                        return {
                            scrollBy(t, {
                                x: n,
                                y: i
                            }) {
                                e.scrollBy(n, i)
                            }
                        }
                    }
                }))),
                tt = (0, o.Og)([(0, o.KT)(s.Gp, l.UU)], (({
                    widgets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            getExternalId(t, n, {
                                originCompId: i
                            }) {
                                return Promise.resolve(e[i].externalId)
                            }
                        }
                    }
                }))),
                nt = (0, o.Og)([(0, o.KT)(s.Gp, l.UU), S.n], ((e, t) => ({
                    getTpaHandlers() {
                        const n = t["specs.thunderbolt.deprecateAppId"];
                        return {
                            getValue(t, {
                                key: i,
                                scope: r
                            }, {
                                originCompId: a
                            }) {
                                const {
                                    widgets: o,
                                    appPublicData: s
                                } = e, {
                                    appDefinitionId: p,
                                    applicationId: d
                                } = o[a], l = "APP" === r ? s[n ? p : d] : o[a].componentPublicData;
                                return l && l[i] ? {
                                    [i]: l[i]
                                } : {
                                    error: {
                                        message: `key ${i} not found in ${r} scope`
                                    }
                                }
                            }
                        }
                    }
                }))),
                it = (0, o.Og)([(0, o.KT)(s.Gp, l.UU), S.n], ((e, t) => {
                    const n = t["specs.thunderbolt.deprecateAppId"];
                    return {
                        getTpaHandlers() {
                            function t(t) {
                                const {
                                    widgets: i,
                                    appPublicData: r
                                } = e, {
                                    appDefinitionId: a,
                                    applicationId: o
                                } = i[t];
                                return {
                                    APP: r[n ? a : o],
                                    COMPONENT: i[t].componentPublicData
                                }
                            }
                            return {
                                getPublicData(e, n, {
                                    originCompId: i
                                }) {
                                    return t(i)
                                },
                                getValues(e, n, {
                                    originCompId: i
                                }) {
                                    const {
                                        scope: r,
                                        keys: a
                                    } = n, o = t(i);
                                    return D().pickBy(o[r], ((e, t) => a.includes(t)))
                                }
                            }
                        }
                    }
                })),
                rt = (0, o.Og)([(0, o.KT)(s.Gp, l.UU)], (e => ({
                    getTpaHandlers() {
                        return {
                            getStyleId(t, n, {
                                originCompId: i
                            }) {
                                return e.widgets[i].styleId
                            }
                        }
                    }
                }))),
                at = (0, o.Og)([(0, o.KT)(s.YG, c.UU)], (e => ({
                    getTpaHandlers() {
                        return {
                            getViewMode() {
                                return {
                                    editMode: e.viewMode
                                }
                            }
                        }
                    }
                }))),
                ot = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU)], (({
                    widgetsClientSpecMapData: e
                }, {
                    pageId: t
                }) => ({
                    getTpaHandlers() {
                        return {
                            getComponentInfo(n, i, {
                                tpaCompData: {
                                    widgetId: r = ""
                                } = {}
                            }) {
                                const a = "masterPage" === t;
                                return {
                                    compId: n,
                                    showOnAllPages: a,
                                    pageId: a ? "" : t,
                                    tpaWidgetId: e[r] ? .tpaWidgetId,
                                    appPageId: e[r] ? .appPage ? .id || ""
                                }
                            }
                        }
                    }
                }))),
                st = (0, o.Og)([(0, o.KT)(s._K, l.UU)], (({
                    pagesData: e
                }) => ({
                    getTpaHandlers: () => ({
                        isAppSectionInstalled(t, {
                            sectionId: n,
                            appDefinitionId: i
                        }, {
                            appDefinitionId: r
                        }) {
                            const a = D().filter(e, {
                                appDefinitionId: i || r
                            });
                            return D().some(a, {
                                tpaPageId: n
                            })
                        }
                    })
                }))),
                pt = (0, o.Og)([l.iQ], (({
                    getSiteMap: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            async getSitePages(t, {
                                includePagesUrl: n
                            }) {
                                return (await e()).map((e => ({
                                    hide: e.hidden,
                                    id: D().isString(e.pageId) && e.pageId.replace("#", ""),
                                    isHomepage: e.isHomePage || !1,
                                    title: e.title,
                                    ...n && {
                                        url: e.url
                                    }
                                })))
                            },
                            getSiteMap: e
                        }
                    }
                }))),
                dt = (0, o.Og)([X.$1, pe.t7, (0, o.KT)(s._K, l.UU), (0, o.KT)(s.YG, c.UU), d.RV], ((e, t, {
                    pagesData: n
                }, {
                    externalBaseUrl: i
                }, r) => ({
                    getTpaHandlers() {
                        return {
                            siteInfo() {
                                const {
                                    pageId: a
                                } = t.getCurrentRouteInfo(), {
                                    href: o
                                } = e.getParsedUrl(), {
                                    siteDescription: s,
                                    siteKeywords: p,
                                    title: d
                                } = n[a];
                                return {
                                    siteDescription: s,
                                    siteKeywords: p,
                                    baseUrl: i,
                                    pageTitle: r.document.title,
                                    pageTitleOnly: d,
                                    referer: r.document.referrer,
                                    url: o
                                }
                            }
                        }
                    }
                }))),
                lt = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s._K, l.UU)], (({
                    externalBaseUrl: e,
                    pageIdToPrefix: t
                }, {
                    pagesData: n
                }) => ({
                    getTpaHandlers() {
                        return {
                            getSectionUrl(i, {
                                sectionIdentifier: r
                            }, {
                                appClientSpecMapData: a
                            }) {
                                const o = D().find(n, {
                                    tpaPageId: r
                                });
                                if (o ? .id) {
                                    const n = t[o.id],
                                        i = n ? `${n}/${o.pageUriSEO}` : o.pageUriSEO;
                                    return {
                                        url: `${e}/${i}`,
                                        prefix: n || "",
                                        relativeUrl: i
                                    }
                                }
                                return {
                                    error: {
                                        message: `Page with app "${a?.appDefinitionName}" was not found.`
                                    }
                                }
                            }
                        }
                    }
                })));
            var ct = n(11779),
                gt = n(2730);
            const ut = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), p.Ji, d.RV, ct.U], (({
                    widgetsClientSpecMapData: e,
                    isMobileView: t
                }, {
                    widgets: n
                }, i, r, a) => ({
                    getTpaHandlers() {
                        return {
                            async setFullScreenMobile(o, {
                                isFullScreen: s
                            }) {
                                if (!t) throw new Error("show full screen is only available in Mobile view");
                                (t => {
                                    const i = n[t] || {},
                                        {
                                            appDefinitionId: r
                                        } = e[i.widgetId] || {};
                                    return Object.values(I._p).includes(r)
                                })(o) && (s ? (a.setFullScreenMobile(o, s), i.update({
                                    [o]: {
                                        iOSVersion: (0, gt.O)(r),
                                        isMobileFullScreenMode: !0
                                    }
                                })) : (a.setFullScreenMobile(o, s), i.update({
                                    [o]: {
                                        isMobileFullScreenMode: !1
                                    }
                                })))
                            }
                        }
                    }
                }))),
                mt = () => {},
                It = (0, o.Og)([], (() => ({
                    getTpaHandlers() {
                        return {
                            getSiteRevision: mt,
                            getDeviceType: mt,
                            toWixDate: mt,
                            getCompId: mt,
                            getOrigCompId: mt,
                            getWidth: mt,
                            isInModal: mt,
                            getLocale: mt,
                            getCacheKiller: mt,
                            getTarget: mt,
                            getInstanceId: mt,
                            getSignDate: mt,
                            getUid: mt,
                            getPermissions: mt,
                            getIpAndPort: mt,
                            getDemoMode: mt,
                            getInstanceValue: mt,
                            getSiteOwnerId: mt,
                            getImageUrl: mt,
                            getResizedImageUrl: mt,
                            getAudioUrl: mt,
                            getDocumentUrl: mt,
                            getSwfUrl: mt,
                            getPreviewSecureMusicUrl: mt,
                            getStyleParams: mt,
                            getStyleColorByKey: mt,
                            getColorByreference: mt,
                            getSiteTextPresets: mt,
                            getFontsSpriteUrl: mt,
                            getStyleFontByKey: mt,
                            getStyleFontByReference: mt,
                            getSiteColors: mt,
                            getViewModeInternal: mt,
                            postMessage: mt,
                            getEditorFonts: mt,
                            setUILIBParamValue: mt,
                            removeAppMetadata: mt,
                            setAppMetadata: mt,
                            setColorParam: mt,
                            setStyleParam: mt,
                            resizeComponent: mt,
                            setValue: mt,
                            isSupported: mt,
                            appEngaged: mt,
                            getInstalledInstance: mt,
                            isApplicationInstalled: mt,
                            isCustomApplicationPermissionsGranted: mt,
                            isGroupApplicationPermissionsGranted: mt,
                            setFullWidth: mt
                        }
                    }
                })));
            var ht = n(8145);
            const ft = (0, o.Og)([(0, o.lq)(ht.U)], (e => ({
                    getTpaHandlers() {
                        return {
                            reportVisitorActivity: e ? e.reportActivity : () => {}
                        }
                    }
                }))),
                Tt = (0, o.Og)([p.eZ, p.Ji], ((e, t) => ({
                    getTpaHandlers() {
                        return {
                            getCurrentPageAnchors() {
                                return D()(e.getEntireStore()).pickBy((({
                                    componentType: e
                                }) => "Anchor" === e)).mapValues(((e, n) => ({
                                    id: n,
                                    title: t.get(n).name
                                }))).values().sortBy((({
                                    id: e
                                }) => {
                                    switch (e) {
                                        case "SCROLL_TO_TOP":
                                            return 0;
                                        case "SCROLL_TO_BOTTOM":
                                            return 1;
                                        default:
                                            return 2
                                    }
                                })).value()
                            }
                        }
                    }
                })));
            var Pt = n(21344);
            const yt = (e, t, n) => ({
                    error: {
                        errorCode: e,
                        message: t,
                        error: n
                    }
                }),
                wt = "BAD_REQUEST_ERROR",
                Ut = "WIX_ERROR",
                Ct = e => (...t) => window.ApplePaySession ? "function" == typeof e ? e(...t) : void 0 : {
                    error: {
                        errorCode: "APPLE_PAY_IS_NOT_AVAILABLE_ERROR"
                    }
                },
                Dt = (0, o.Og)([d.TQ], (({
                    siteAssets: e
                }) => ({
                    getTpaHandlers() {
                        return {
                            applePayInvokeMethod: Ct((async (e, t) => {
                                if (!t.methodName) return yt(wt);
                                switch (t.methodName) {
                                    case "canMakePayments":
                                        try {
                                            return {
                                                result: window.ApplePaySession.canMakePayments()
                                            }
                                        } catch (e) {
                                            return yt(Ut, "ApplePaySession.canMakePayments() failed", e)
                                        }
                                    case "supportsVersion":
                                        try {
                                            return {
                                                result: window.ApplePaySession.supportsVersion(t.payload.version)
                                            }
                                        } catch (e) {
                                            return yt(Ut, `ApplePaySession.supportsVersion(${t.payload.version}) failed`, e)
                                        }
                                    default:
                                        return yt(wt)
                                }
                            })),
                            applePayStartSession: Ct((async (t, {
                                paymentRequest: n,
                                applePayVersion: i,
                                callbackApiId: r
                            }, a) => {
                                try {
                                    const t = new window.ApplePaySession(i, n),
                                        o = await (0, Pt.pQ)(e.clientTopology.moduleRepoUrl),
                                        s = window.document.querySelector(`#${a.originCompId} > iframe`);
                                    if (!s) return yt(Ut, `Can not find a TPA iframe with id: ${a.originCompId}`);
                                    const p = await o.api.request(r, {
                                        target: s
                                    });
                                    t.onvalidatemerchant = async e => {
                                        const n = await p.onValidateMerchant({
                                            validationURL: e.validationURL
                                        });
                                        return t.completeMerchantValidation(n)
                                    }, t.onshippingcontactselected = async e => {
                                        const n = await p.onShippingContactSelected({
                                            shippingContact: e.shippingContact
                                        });
                                        return Array.isArray(n.errors) && (n.errors = n.errors.map((e => {
                                            return t = e, new window.ApplePayError(t.code, t.contactField, t.message);
                                            var t
                                        }))), t.completeShippingContactSelection(n)
                                    }, t.onshippingmethodselected = async e => {
                                        const n = await p.onShippingMethodSelected({
                                            shippingMethod: e.shippingMethod
                                        });
                                        return t.completeShippingMethodSelection(n)
                                    }, t.onpaymentauthorized = async e => {
                                        const n = await p.onPaymentAuthorized({
                                            payment: e.payment
                                        });
                                        return t.completePayment(n)
                                    }, t.oncancel = async () => await p.onCancel();
                                    const {
                                        canceled: d
                                    } = await p.onClick();
                                    if (d) return;
                                    t.begin()
                                } catch (e) {
                                    return yt(Ut, e ? .message, e)
                                }
                            }))
                        }
                    }
                }))),
                St = [It, ze, Ye, Je, Qe, Ze, et, tt, nt, it, Ae, We, at, rt, ot, st, dt, Ve, Fe, pt, (0, o.Og)([pe.t7], (e => ({
                    getTpaHandlers() {
                        return {
                            getRouterPublicData() {
                                return e.getCurrentRouteInfo() ? .dynamicRouteData ? .publicData ? ? {}
                            }
                        }
                    }
                }))), Ke, Ne, He, ye, lt, $e, Ue, Me, xe, Re, we, ut, ft, me, Te, fe, le, se, de, ne, oe, te, Tt, U, w, P, Dt],
                Ot = {
                    STATE_CHANGED: "STATE_CHANGED",
                    INSTANCE_CHANGED: "INSTANCE_CHANGED",
                    PAGE_NAVIGATION: "PAGE_NAVIGATION",
                    MEMBER_DETAILS_UPDATED: "MEMBER_DETAILS_UPDATED",
                    CONSENT_POLICY_UPDATE: "CONSENT_POLICY_UPDATE",
                    SCROLL: "SCROLL",
                    QUICK_ACTION_TRIGGERED: "QUICK_ACTION_TRIGGERED",
                    COMMON_CONFIG_UPDATE: "COMMON_CONFIG_UPDATE"
                },
                Lt = (0, o.Og)([(0, o.KT)(s.wk, l.UU), (0, o.KT)(s.Gp, l.UU), re.i$], ((e, t, n) => {
                    const i = (t, n, i = (() => !0)) => {
                        D().forEach(e.get().registry[t], ((e, r) => {
                            if (!e) return;
                            const {
                                listener: a,
                                ...o
                            } = e, s = (p = i, D().isFunction(p) ? p : e => {
                                const [t] = Object.keys(p);
                                return e[t] === p[t]
                            });
                            var p;
                            const d = {
                                compId: r,
                                ...o
                            };
                            s(d) && a(t, n(d))
                        }))
                    };
                    return (e => {
                        e.update((e => D().merge({}, e, {
                            registry: {}
                        })))
                    })(e), {
                        pageDidMount() {
                            return n.addLoadNewSessionCallback((({
                                results: {
                                    instances: e
                                },
                                reason: t
                            }) => {
                                "expiry" === t && i("INSTANCE_CHANGED", (({
                                    appDefinitionId: t
                                }) => ({
                                    instance: e[t]
                                })))
                            }))
                        },
                        register(n, i, r, a) {
                            (e => e in Ot)(n) && e.update((e => D().merge({}, e, {
                                registry: {
                                    [n]: {
                                        [i]: { ...a,
                                            pageId: t.pageId,
                                            listener: r
                                        }
                                    }
                                }
                            })))
                        },
                        unregister(t, n) {
                            e.update((e => D().set(e, ["registry", t, n], null)))
                        },
                        dispatch: i
                    }
                }));
            var Et = n(19110);
            const bt = (0, o.Og)([l.sy, re.i$, d.RV, Et.M, d.HW], ((e, t, n, i, r) => {
                const a = t.addLoadNewSessionCallback(e.refreshAllPopups),
                    o = () => {
                        a(), e.closeNonPersistentPopups()
                    };
                return { ...e,
                    init() {
                        i.registerToPageDidUnmount(o)
                    },
                    pageDidMount() {
                        return o
                    },
                    async openPopup(...t) {
                        if (!(0, Ce.fU)(n)) return await r, e.openPopup(...t)
                    }
                }
            }));
            var Mt = n(39218);
            const xt = "tpapopup",
                vt = (0, o.Og)([p.Ji, p.eZ, (0, o.KT)(s.wk, l.UU), (0, o.KT)(s.YG, c.UU), (0, o.KT)(s._K, l.UU), (0, o.KT)(s.Gp, l.UU), re.i$, d.RV, be.j, Mt.DR, c.FG, c.XM, Ge.j], ((e, t, n, i, r, a, o, s, p, d, l, c, u) => {
                    const m = {},
                        I = e => {
                            n.update((t => ({ ...t,
                                tpaPopup: {
                                    persistentPopups: e,
                                    popups: t ? .tpaPopup ? .popups || {}
                                }
                            })))
                        },
                        h = e => {
                            n.update((t => ({ ...t,
                                tpaPopup: {
                                    popups: e,
                                    persistentPopups: t ? .tpaPopup ? .persistentPopups || {}
                                }
                            })))
                        },
                        f = () => D().get(n.get(), ["tpaPopup", "popups"], {}),
                        T = () => D().get(n.get(), ["tpaPopup", "persistentPopups"], {}),
                        P = new RegExp(g.l.buildRuntimeCompId(`${xt}-[0-9]+`, ".+"));
                    return {
                        isPopup(e) {
                            return P.test(e)
                        },
                        refreshAllPopups: () => {
                            Object.values(T()).forEach((({
                                refreshPopUp: e
                            }) => e())), Object.values(m).forEach((({
                                refreshPopUp: e
                            }) => e()))
                        },
                        closeNonPersistentPopups: () => Object.values(m).forEach((({
                            closePopup: e
                        }) => {
                            e()
                        })),
                        openPopup(n, o, P) {
                            const {
                                isMobileView: y,
                                isMobileDevice: w,
                                previewMode: U,
                                viewMode: C
                            } = i, {
                                masterPageTpaComps: S,
                                isResponsive: O
                            } = r, {
                                widgets: L,
                                pageId: E
                            } = a;
                            return new Promise((async i => {
                                const r = g.l.buildRuntimeCompId(`${xt}-${Date.now()}`, g.l.getOriginCompId(P)),
                                    a = P && t.getContextIdOfCompId(P) || d;
                                c.registerTpasForContext({
                                    contextId: a,
                                    pageId: E
                                }, [r]);
                                const b = e => {
                                        if (o.persistent) {
                                            const e = T();
                                            delete e[r], I(e)
                                        } else delete m[r], h(D().omit(f(), r));
                                        t.removeComponentFromDynamicStructure(r), p.setSiteScrollingBlocked(!1, r), o.persistent || u.clearListenersByCompId(r), i(e)
                                    },
                                    M = e => /^0(?:px|%)?$/.test(`${e}`),
                                    x = w && U && !M(o.width) && !M(o.height) ? {
                                        position: "fixed",
                                        width: `${O?s.innerWidth:319}px`,
                                        height: `${s.innerHeight}px`,
                                        marginLeft: 0,
                                        marginTop: 0,
                                        boxShadow: "none",
                                        left: "50%",
                                        transform: "translateX(-50%)",
                                        top: 0
                                    } : {},
                                    v = { ...Ee(o, s, P),
                                        ...x
                                    },
                                    k = () => {
                                        const e = L[P] || S[P];
                                        return l.buildSrc(r, E, e, n, {
                                            extraQueryParams: {
                                                isInPopup: "true",
                                                origCompId: P,
                                                viewMode: C
                                            }
                                        })
                                    },
                                    R = {
                                        options: o,
                                        originCompId: P,
                                        src: k(),
                                        styleOverrides: v,
                                        isBareTheme: "BARE" === o.theme,
                                        closePopup: b
                                    };
                                e.update({
                                    [r]: R
                                }), p.setSiteScrollingBlocked(y && Le(v, s), r), await t.addComponentToDynamicStructure(r, {
                                    components: [],
                                    componentType: "TPAPopup"
                                });
                                const $ = {
                                    isPersistent: o.persistent,
                                    closePopup: b,
                                    refreshPopUp: () => {
                                        (L[P] || S[P]) && e.update({
                                            [r]: {
                                                src: k()
                                            }
                                        })
                                    }
                                };
                                $.isPersistent ? I({ ...T(),
                                    [r]: $
                                }) : (m[r] = $, h({ ...f(),
                                    [r]: $
                                }))
                            }))
                        },
                        closePopup(e, t) {
                            const n = T()[e] || f()[e];
                            n && n.closePopup(t)
                        },
                        getOpenedPopups() {
                            return { ...T(),
                                ...m
                            }
                        }
                    }
                }));
            var kt = n(98757),
                Rt = n(98323);
            const $t = "tpaModal",
                _t = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s._K, l.UU), (0, o.KT)(s.Gp, l.UU), (0, o.KT)(s.wk, l.UU), p.Ji, d.RV, be.j, p.eZ, re.i$, Mt.DR, c.FG, c.XM, pe.t7, Rt.j, Et.M, d.HW, (0, o.lq)(Z.By)], ((e, {
                    masterPageTpaComps: t
                }, n, i, r, a, o, s, p, d, l, c, u, m, I, h, f) => {
                    let T = () => {};
                    const P = e => {
                            i.update((t => ({ ...t,
                                tpaModal: { ...t ? .tpaModal || {},
                                    closeModalImpl : e
                                }
                            })))
                        },
                        y = e => {
                            i.update((t => ({ ...t,
                                tpaModal: { ...t ? .tpaModal || {},
                                    currentModalId : e
                                }
                            })))
                        },
                        w = () => D().get(i.get(), ["tpaModal", "closeModalImpl"], (() => {})),
                        U = (e, t, n) => {
                            const i = {
                                width: a.innerWidth,
                                height: a.innerHeight
                            };
                            if (e = Math.min(e, i.width), t = Math.min(t, i.height), !n) {
                                const n = i.width - 50,
                                    r = i.height - 50;
                                e >= n && t >= r && (e = n, t = r)
                            }
                            return {
                                width: e,
                                height: t
                            }
                        };
                    return {
                        init(e) {
                            I.registerToPageDidUnmount(w())
                        },
                        pageWillUnmount() {
                            w()()
                        },
                        isModal(e) {
                            return e.startsWith($t)
                        },
                        openModal(i, {
                            width: p,
                            height: I,
                            title: C,
                            theme: D
                        }, S) {
                            if ((0, Ce.fU)(a)) return new Promise((() => {}));
                            let O;
                            const {
                                tpaModalConfig: L,
                                isMobileDevice: E,
                                previewMode: b,
                                viewMode: M
                            } = e, {
                                pageId: x,
                                widgets: v
                            } = n, {
                                wixTPAs: k
                            } = L, R = g.l.buildRuntimeCompId($t, g.l.getOriginCompId(S || x)), $ = S && s.getContextIdOfCompId(S) || d;
                            c.registerTpasForContext({
                                contextId: $,
                                pageId: x
                            }, [R]), w()(), m.enableCyclicTabbing(R);
                            const _ = S ? r.get(S) : null,
                                A = k[_ ? _.appDefinitionId : null],
                                N = () => {
                                    const e = U(p, I, A);
                                    r.update({
                                        [R]: {
                                            width: e.width,
                                            height: e.height
                                        }
                                    })
                                };
                            return a.addEventListener("resize", N), E && o.setSiteScrollingBlocked(!0, R), new Promise((async n => {
                                await h;
                                const c = f ? .getCurrentLightboxId(),
                                    g = u.getCurrentRouteInfo() ? .contextId;
                                if (d !== g && "masterPage" !== d && d !== c) return void(e.debug && console.warn(`Tried to open modal but the current context ID: ${g} doesn't equal the modal context ID: ${d}`));
                                y(R), P((e => {
                                    P((() => {})), a.removeEventListener("resize", N), m.disableCyclicTabbing(R), T(), E && (o.setSiteScrollingBlocked(!1, R), (0, kt.sE)(a, !1)), s.removeComponentFromDynamicStructure(R), r.update({
                                        [R]: {
                                            src: null,
                                            closeModal: () => {}
                                        }
                                    }), O ? .focus(), O = null, y(null), n(e)
                                })), T = (e => {
                                    if ((0, Ce.fU)(a)) return () => {};
                                    const t = t => {
                                        "Escape" === t.key && e()
                                    };
                                    return a.addEventListener("keydown", t), () => a.removeEventListener("keydown", t)
                                })(w()), E && "LIGHT_BOX" === D && (0, kt.sE)(a, !0);
                                const L = U(p, I, A),
                                    k = S && (v[S] || t[S]) || {},
                                    $ = l.buildSrc(R, x, k, i, {
                                        extraQueryParams: {
                                            isInModal: "true",
                                            origCompId: S,
                                            viewMode: M
                                        }
                                    });
                                r.update({
                                    [R]: {
                                        src: $,
                                        width: L.width,
                                        height: L.height,
                                        closeModal: w(),
                                        isMobileDevice: E,
                                        isPreviewMode: b,
                                        title: C,
                                        theme: D
                                    }
                                }), O = document.activeElement, await s.addComponentToDynamicStructure(R, {
                                    components: [],
                                    componentType: "TPAModal"
                                })
                            }))
                        },
                        closeModal(e) {
                            w()(e)
                        },
                        getCurrentModalId: () => D().get(i.get(), ["tpaModal", "currentModalId"], null)
                    }
                }));
            var At = n(45024),
                Nt = n(17709),
                Ht = n.n(Nt);
            const Kt = (0, o.Og)([At.O, l.oJ, Mt.Is], (({
                    registerToThrottledScroll: e
                }, t, n) => ({
                    name: "siteScrollDispatch",
                    pageWillMount() {
                        e((e => {
                            Ht().measure((() => {
                                t.dispatch("SCROLL", (({
                                    compId: t
                                }) => ((e, t) => {
                                    const n = window.document.getElementById(t);
                                    if (!n) return {};
                                    const i = n.getBoundingClientRect();
                                    return {
                                        x: e.x + i.left,
                                        y: e.y + i.top,
                                        width: i.width,
                                        height: i.height,
                                        scrollTop: e.y,
                                        scrollLeft: e.x,
                                        documentHeight: document.documentElement.clientHeight,
                                        documentWidth: document.documentElement.clientWidth
                                    }
                                })(e, t)), {
                                    pageId: n
                                })
                            }))
                        }))
                    }
                }))),
                Gt = (0, o.Og)([je.A, l.oJ], ((e, t) => ({
                    pageDidMount: () => e.registerToCommonConfigChange((e => t.dispatch("COMMON_CONFIG_UPDATE", (() => e))))
                }))),
                Bt = (0, o.Og)([l.oJ, pe.t7], ((e, t) => ({
                    pageDidLoad({
                        pageId: n
                    }) {
                        const i = t.getPreviousRouterInfo() ? .pageId;
                        if (!i || i === n) return;
                        const r = {
                                fromPage: i,
                                toPage: n
                            },
                            a = t.getCurrentRouteInfo().dynamicRouteData ? .publicData;
                        a && (r.routerPublicData = a), e.dispatch("PAGE_NAVIGATION", (() => r))
                    }
                }))),
                Ft = (0, o.Og)([p.Ji, (0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), re.i$, Mt.DR, c.XM, l.VY], ((e, {
                    widgetsClientSpecMapData: t
                }, n, i, r, a, o) => {
                    const {
                        widgets: s,
                        tpaInnerRouteConfig: p,
                        pageId: d
                    } = n;
                    ((e, t, n, i) => {
                        const r = Object.entries(e).map((([e, n]) => (n.templateId && e !== n.templateId && t.registerTpaTemplateId(n.templateId, e), e)));
                        t.registerTpasForContext({
                            contextId: n,
                            pageId: i
                        }, r)
                    })(s, a, r, d);
                    const l = t => {
                            const i = o.buildSrc({
                                compId: t,
                                tpaCompData: s[t],
                                pageId: n.pageId,
                                tpaInnerRouteConfig: p
                            });
                            e.update({
                                [t]: {
                                    src: i
                                }
                            })
                        },
                        c = () => {
                            const e = D().pickBy(s, (({
                                widgetId: e,
                                isOOI: n
                            }) => !n && t[e]));
                            Object.keys(e).forEach(l)
                        };
                    return {
                        pageDidMount() {
                            return i.addLoadNewSessionCallback((({
                                reason: e
                            }) => {
                                "memberLogin" === e && c()
                            }))
                        },
                        rebuildTpasSrc: c,
                        rebuildTpaSrc: l
                    }
                }));
            var Vt = n(17856);
            const Wt = (0, o.Og)([l.oJ, X.$1, (0, o.KT)(s.Gp, l.UU), Mt.Is], ((e, t, {
                    tpaInnerRouteConfig: n
                }, i) => ({
                    async onUrlChange() {
                        const r = t.getRelativeUrl(),
                            a = (0, Vt.h)(r.replace(/^\./, ""), n.tpaPageUri),
                            o = a ? a.join("/") : "";
                        e.dispatch("STATE_CHANGED", (() => ({
                            newState: o
                        })), {
                            pageId: i
                        })
                    }
                }))),
                qt = (0, o.Og)([p.Ji, p.eZ, l.oJ, pe.t7, d.RV, Mt.Is, r.ir, l.Uj], ((e, t, n, i, r, a, {
                    getOpenedPopups: o
                }, {
                    rebuildTpasSrc: s
                }) => {
                    const p = {
                        previousCurrency: null
                    };
                    return {
                        onUrlChange(e) {
                            if (!i.getCurrentRouteInfo()) return;
                            const t = e.searchParams.get("currency");
                            t !== p.previousCurrency && (s(), Object.values(o()).forEach((e => e.refreshPopUp())), p.previousCurrency = t)
                        }
                    }
                })),
                jt = (e, t) => zt(t) && t.templateId || e,
                zt = ({
                    isResponsive: e,
                    widgetId: t
                }) => e && "14517f3f-ffc5-eced-f592-980aaa0bbb5c" === t,
                Yt = (0, o.Og)([(0, o.KT)(s.YG, c.UU), c.FG], ((e, t) => ({
                    buildSrc({
                        compId: n,
                        tpaCompData: i,
                        pageId: r,
                        tpaInnerRouteConfig: a
                    }) {
                        const {
                            widgetsClientSpecMapData: o,
                            deviceType: s
                        } = e, p = jt(n, i), {
                            widgetId: d
                        } = i, {
                            widgetUrl: l,
                            mobileUrl: c
                        } = o[d], g = "mobile" === s && c || l, u = zt(i) ? "masterPage" : r, m = {};
                        return i.isSection && (m.tpaInnerRouteConfig = a), t.buildSrc(p, u, i, g, m)
                    },
                    getDefaultProps(t, n, i) {
                        const {
                            widgetsClientSpecMapData: r,
                            isMobileView: a
                        } = e, {
                            appDefinitionName: o,
                            appDefinitionId: s,
                            appPage: p,
                            allowScrolling: d
                        } = r[t];
                        return {
                            title: p.name ? ? o,
                            appDefinitionName: o,
                            appDefinitionId: s,
                            isMobileView: a,
                            allowScrolling: d,
                            reportIframeStartedLoading: n,
                            reportWidgetUnresponsive: i
                        }
                    }
                })));
            var Jt = n(20636),
                Qt = n(789),
                Xt = n(51759);
            const Zt = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), l._w, l.VY, c.V5, c.$O, d.Ht, d.TQ, (0, o.lq)(l.LE), (0, o.lq)(c.D0)], (({
                    widgetsClientSpecMapData: e
                }, t, n, i, {
                    registerTpaSection: r,
                    unregisterTpaSection: a
                }, o, s, {
                    requestUrl: p
                }, d, l) => {
                    const c = ({
                        appDefinitionId: e = "UNKNOWN",
                        widgetId: t = "UNKNOWN",
                        compId: n,
                        reason: i
                    }) => {
                        const r = "IframeTpaDataIntegrityError",
                            a = new Error(r);
                        a.name = r, s.captureError(a, {
                            tags: {
                                appDefinitionId: e,
                                widgetId: t,
                                feature: "tpa",
                                methodName: "componentWillMount",
                                reason: i
                            },
                            extra: {
                                compId: n
                            }
                        })
                    };
                    return {
                        componentTypes: Xt.p,
                        componentWillMount(g) {
                            const {
                                widgets: u,
                                tpaInnerRouteConfig: m,
                                pageId: I
                            } = t, h = u[g.id] || u[(0, Qt.vC)(g.id)];
                            if (!h) return void c({
                                compId: g.id,
                                reason: "MISSING_DATA_ITEM"
                            });
                            const {
                                widgetId: f,
                                isSection: T,
                                appDefinitionId: P,
                                templateId: y
                            } = h;
                            if (!e[f]) return void c({
                                appDefinitionId: P,
                                widgetId: f,
                                compId: g.id,
                                reason: "MISSING_FROM_CSM"
                            });
                            l && l.registerToDataCapsule(y || g.id, P);
                            const w = () => i.buildSrc({
                                compId: g.id,
                                tpaCompData: h,
                                pageId: I,
                                tpaInnerRouteConfig: m
                            });
                            if (T) {
                                const e = {
                                    appDefinitionId: P,
                                    rebuildSrc: () => {
                                        const e = w();
                                        n.reportTpaLoadStart(g.id, e), g.updateProps({
                                            src: e
                                        })
                                    }
                                };
                                r(g.id, e)
                            }
                            const U = D().once((() => {
                                    d && d.reportIframeStartedLoading(g.id)
                                })),
                                C = w(),
                                S = D().once((() => {
                                    const {
                                        appDefinitionName: t,
                                        isWixTPA: n
                                    } = e[f];
                                    if (n) {
                                        const e = new Error("TPA did not send appIsAlive");
                                        e.name = "IframeTpaUnresponsive", s.captureError(e, {
                                            tags: {
                                                appDefinitionId: P,
                                                widgetId: f,
                                                invalidSrc: !C,
                                                feature: "tpa",
                                                methodName: "componentWillMount"
                                            },
                                            extra: {
                                                appDefinitionName: t,
                                                src: C
                                            }
                                        })
                                    }
                                })),
                                O = i.getDefaultProps(f, U, S),
                                L = jt(g.id, h),
                                E = o ? o.getCachedProps(L) : {};
                            n.reportTpaLoadStart(g.id, C);
                            const b = p.includes("disableAllPlatformApps");
                            return g.updateProps({ ...O,
                                src: C,
                                disableAllPlatformApps: b,
                                ...E
                            }), () => {
                                o && ("masterPage" === I ? o.cacheProps(g.id) : zt(h) && o.cacheProps(L, g.getProps())), a(g.id), l && l.unregister(y || g.id)
                            }
                        }
                    }
                })),
                en = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), pe.t7, Ie.O$, he.F, X.xt], (({
                    widgetsClientSpecMapData: e
                }, {
                    widgets: t
                }, n, i, r, a) => ({
                    reportIframeStartedLoading(i) {
                        const {
                            widgetId: o,
                            templateId: s
                        } = t[i] || t[(0, Qt.vC)(i)], p = n.getCurrentRouteInfo(), d = Math.round(performance.now());
                        r.logger.log({
                            appId: e[o].appDefinitionId,
                            widget_id: o,
                            instance_id: s ? ? i,
                            src: 42,
                            evid: 642,
                            tts: d,
                            pid: p ? p.pageId : null,
                            pn: a.getPageNumber()
                        }, {
                            endpoint: "ugc-viewer"
                        })
                    }
                }))),
                tn = "$TPA$",
                nn = {
                    [I.rm.PAGE_LINK]: ["type", "pageId"],
                    [I.rm.EXTERNAL_LINK]: ["type", "target", "url"],
                    [I.rm.ANCHOR_LINK]: ["type", "anchorName", "anchorDataId", "pageId"],
                    [I.rm.EMAIL_LINK]: ["type", "recipient", "subject"],
                    [I.rm.PHONE_LINK]: ["type", "phoneNumber"],
                    [I.rm.WHATSAPP_LINK]: ["type", "phoneNumber"],
                    [I.rm.DOCUMENT_LINK]: ["type", "docId", "name"],
                    [I.rm.DYNAMIC_PAGE_LINK]: ["type", "routerId", "innerRoute", "anchorDataId"],
                    [I.rm.ADDRESS_LINK]: ["type", "address"]
                };

            function rn(e, t, n, i) {
                const r = e.label || "",
                    a = !e.isVisible || !1,
                    o = e.link ? function(e) {
                        const t = D().pick(e.link, nn[e.link.type]);
                        if (D().isObject(t.pageId) && (t.pageId = `#${D().get(t,"pageId.id")}`), t.anchorDataId) {
                            const e = D().get(t, "anchorDataId.id", t.anchorDataId);
                            t.anchorDataId = "SCROLL_TO_TOP" === e || "SCROLL_TO_BOTTOM" === e ? e : `#${e}`
                        }
                        return t
                    }(e) : {},
                    s = D().merge(o, {
                        title: r,
                        hidden: a
                    });
                if (!s.type) return {
                    type: I.rm.MENU_HEADER,
                    hidden: a,
                    title: r,
                    subPages: s.subPages
                };
                switch (s.type) {
                    default:
                        case I.rm.PAGE_LINK:
                        case I.rm.ANCHOR_LINK:
                        D().merge(s, an(e, t, n));
                    break;
                    case I.rm.DOCUMENT_LINK:
                            const r = i.getLinkUrlFromDataItem(s),
                            a = i.getLinkProps(r);s.url = a.href
                }
                return s
            }

            function an(e, t, n) {
                const i = e.link ? .pageId ? .pageUriSEO,
                    r = {
                        isHomePage: e.link ? .pageId ? .id === t
                    };
                return i && D().assign(r, {
                    url: n + "/" + i
                }), r
            }

            function on(e, t, n, i, r, a) {
                const {
                    externalBaseUrl: o,
                    appsClientSpecMapData: s,
                    appsClientSpecMapByApplicationId: p,
                    metaSiteId: d,
                    userFileDomainUrl: l,
                    routersConfig: c,
                    isMobileView: g,
                    isPremiumDomain: u
                } = t, m = n.getLinkUtilsRoutingInfo(), h = Q({
                    routingInfo: m,
                    metaSiteId: d,
                    userFileDomainUrl: l,
                    routersConfig: c,
                    popupPages: i ? .getLightboxPages(),
                    multilingualInfo: a ? .getMultilingualInfo(),
                    isMobileView: g,
                    isPremiumDomain: u,
                    experiments: r
                });
                return function({
                    menuItems: e,
                    mainPageId: t,
                    baseUrl: n,
                    linkUtils: i
                }) {
                    return D().map(e, (e => {
                        const r = rn(e, t, n, i);
                        if (r.type === I.rm.PAGE_LINK || r.type === I.rm.MENU_HEADER) {
                            const a = D().map(e.items, (e => rn(e, t, n, i)));
                            D().size(a) > 0 && D().assign(r, {
                                subPages: a
                            })
                        }
                        return r
                    }))
                }({
                    menuItems: D().filter(e, (({
                        link: e
                    }) => ! function(e, t, n, i) {
                        if (!i) return !1;
                        if (i.type === I.rm.PAGE_LINK) {
                            const r = n["specs.thunderbolt.deprecateAppId"],
                                a = () => {
                                    const e = i.pageId ? .tpaApplicationId;
                                    return t[e]
                                },
                                o = () => {
                                    const t = i.pageId ? .appDefinitionId;
                                    return e[t]
                                };
                            let s = i.pageId ? .tpaPageId;
                            const p = r ? o() : a();
                            if (p && s) {
                                D().includes(s, tn) && (s = s.substr(0, s.indexOf(tn)));
                                const e = D().find(p.widgets, (e => e.appPage ? .id === s));
                                return e ? .appPage.hideFromMenu
                            }
                        }
                        return !1
                    }(s, p, r, e))),
                    mainPageId: m.mainPageId,
                    baseUrl: o,
                    linkUtils: h
                })
            }
            const sn = (0, o.Og)([(0, o.KT)(s.YG, c.UU), X.wy, Mt.rl, S.n, (0, o.lq)(Z.By), (0, o.lq)(ee.tX)], ((e, t, n, i, r, a) => ({
                    getSiteMap: async () => on(await n.fetchResource("masterPage", "siteMap"), e, t, r, i, a)
                }))),
                pn = (0, o.Og)([(0, o.KT)(s.YG, c.UU), (0, o.KT)(s.Gp, l.UU), p.Ji, d.Ht], (({
                    widgetsClientSpecMapData: e
                }, t, n, i) => {
                    const r = {};
                    return {
                        reportTpaLoadStart: (a, o) => {
                            const {
                                widgets: s
                            } = t, p = s[a] || s[(0, Qt.vC)(a)], {
                                widgetId: d,
                                appDefinitionId: l
                            } = p;
                            if (!e[d]) return;
                            if (!(e[d].isWixTPA && o && n.get(a) ? .src !== o)) return;
                            const c = "tpa_iframe_load",
                                g = Date.now();
                            i.interactionStarted(c, {
                                customParams: {
                                    appDefinitionId: l,
                                    widgetId: d
                                }
                            }), r[a] = {
                                src: o,
                                reportLoadFinished: D().once((() => i.interactionEnded(c, {
                                    customParams: {
                                        appDefinitionId: l,
                                        widgetId: d,
                                        duration: Date.now() - g
                                    }
                                })))
                            }
                        },
                        reportTpaLoadEnd: e => {
                            const t = r[e];
                            t ? .src && n.get(e) ? .src === t.src && t.reportLoadFinished()
                        }
                    }
                })),
                dn = e => {
                    e(l.VY).to(Yt), e(l.LE).to(en), e(i.$.PageDidMountHandler, l.Uj).to(Ft), e(Jt.ls).to(Zt), e(c.eM).to(h), e(i.$.PageDidMountHandler, l.oJ).to(Lt), e(i.$.PageDidLoadHandler).to(Bt), e(l.sy).to(vt), e(i.$.PageDidMountHandler, r.ir).to(bt), e(l.iQ).to(sn), St.forEach((t => {
                        e(r.dQ).to(t)
                    })), e(i.$.PageDidMountHandler).to(f), e(i.$.PageWillUnmountHandler, r.tY).to(_t), e(i.$.PageWillMountHandler).to(Kt), e(i.$.PageDidMountHandler).to(Gt), e(X.Qc).to(Wt), e(X.Qc).to(qt), e(l._w).to(pn), e(a.j).to(bt).whenTargetNamed("tpa"), e(a.j).to(_t).whenTargetNamed("tpa")
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.baf7261b.chunk.min.js.map