"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [2694], {
        60563: function(e, t, a) {
            a.r(t), a.d(t, {
                DynamicPagesResponseHandlerSymbol: function() {
                    return u.nk
                },
                site: function() {
                    return q
                }
            });
            var r = a(77748),
                n = a(71085),
                s = a(20590),
                o = a(32166),
                i = a(32777),
                l = a(75396),
                c = a(10553),
                u = a(10984);
            const p = "_403_dp",
                d = "_404_dp",
                g = "_500_dp",
                h = "_uknown_error_dp",
                m = e => e.replace("./", "").split("/"),
                U = e => /(^https?)|(^data)|(^blob)|(^\/\/)/.test(e),
                f = (e, t) => /^\/(.*)/.test(e) ? `.${e}` : `./${t}/${e}`,
                P = e => `/${m(e).slice(1).join("/")}`,
                w = e => m(e)[0];
            var y = a(78691),
                _ = a(79460),
                I = a(51360);
            const b = (0, r.Og)([(0, r.KT)(s.YG, u.UU), o.RV, i.F, n.$1, u.nk, u.u_, l.t7, y._w, _.q, c.n], (({
                prefixToRouterFetchData: e,
                routerPagesSeoToIdMap: t
            }, a, r, n, {
                handleResponse: s
            }, o, i, l, {
                getFetchParams: c,
                tryToGetCachableFetchParams: p
            }, g) => ({
                getSitemapFetchParams(t) {
                    const a = e[t];
                    if (!a) return null;
                    const r = n.getRelativeEncodedUrl(),
                        s = n.getParsedUrl().search,
                        o = P(r);
                    return c(I.U.SITEMAP, a, {
                        routerSuffix: o,
                        queryParams: s
                    })
                },
                async handle(a) {
                    if (!a.pageId && a.relativeUrl && a.parsedUrl && a.relativeEncodedUrl) {
                        const n = w(a.relativeUrl),
                            h = e[n];
                        if (!h) return t[n] ? { ...a,
                            pageId: d
                        } : a;
                        const m = await (() => {
                            const e = i.getCurrentRouteInfo();
                            return !g["specs.thunderbolt.dynamicPagesWarmupData2"] || e ? null : l.getWarmupData(u.UU, {
                                timeout: 0
                            })
                        })();
                        if (m) return { ...a,
                            ...m
                        };
                        const U = P(a.relativeEncodedUrl),
                            f = a.parsedUrl.search,
                            {
                                url: y,
                                options: _
                            } = g["specs.thunderbolt.dynamicPagesReplacePostWithGet"] ? await p(I.U.PAGES, h, {
                                routerSuffix: U,
                                queryParams: f
                            }) : c(I.U.PAGES, h, {
                                routerSuffix: U,
                                queryParams: f
                            }),
                            b = s(r.envFetch(y, _), a);
                        return o.getHandler().handle(b, a)
                    }
                    return a
                }
            })));
            var v = a(16537),
                S = a(94715),
                R = a(12457),
                D = a(82658);
            const T = (0, r.Og)([(0, r.KT)(s.YG, u.UU), o.RV, S.wN, R.Tf, c.n, o.UK], (({
                externalBaseUrl: e
            }, t, a, r, n, s) => ({
                async handleResponse(a, n) {
                    const o = w(n.relativeUrl);
                    return a.then((async a => {
                        if (!a.ok) throw a;
                        const i = await a.json(),
                            {
                                result: l,
                                exception: c
                            } = i,
                            {
                                redirectUrl: u,
                                status: m
                            } = l;
                        if (m && (0, D.fU)(t) && r.setStatusCode(m), u) {
                            if ((0, D.fU)(t)) {
                                const t = ((e, t, a, r) => {
                                    if (U(e)) return e;
                                    const n = f(e, a),
                                        s = new URL(n, `${t}/`);
                                    return s.search = r, s.toString()
                                })(u, e, o, n.parsedUrl.search);
                                return r.setRedirectUrl(t), null
                            }
                            if (await s, t.document.head.querySelector('meta[http-equiv="refresh"]')) return null;
                            if (U(u)) return t.location.assign(u), null;
                            return {
                                redirectUrl: f(u, o)
                            }
                        }
                        const P = (({
                            status: e,
                            page: t,
                            redirectUrl: a
                        }, r) => r ? g : 403 === e ? p : 404 === e ? d : t || a ? null : h)(l, c);
                        return P ? { ...n,
                            pageId: P
                        } : ((e, t) => {
                            const {
                                page: a,
                                data: r,
                                head: n,
                                tpaInnerRoute: s,
                                publicData: o
                            } = t.result;
                            return { ...e,
                                pageId: a,
                                dynamicRouteData: {
                                    pageData: r,
                                    pageHeadData: n,
                                    publicData: o,
                                    tpaInnerRoute: s
                                }
                            }
                        })(n, i)
                    })).catch((() => (0, D.fU)(t) ? null : { ...n,
                        pageId: g
                    }))
                }
            })));
            var M = a(19889),
                k = a(66397);
            const x = (0, r.Og)([(0, r.KT)(s.wk, u.UU), n.Ix, l.t7, (0, r.lq)(M.Np)], ((e, t, a, r) => {
                    const n = async (e, n) => {
                        const {
                            success: s,
                            reason: o
                        } = await (async () => {
                            try {
                                return await r.promptLogin(), {
                                    success: !0,
                                    reason: ""
                                }
                            } catch (e) {
                                return {
                                    success: !1,
                                    reason: e
                                }
                            }
                        })();
                        return o === k.qd.CANCELED && a.isLandingOnProtectedPage() ? t.navigate("./") : !!s && t.navigate(n.parsedUrl.href)
                    };
                    return e.update((() => ({
                        handlePermissions: n,
                        isMemberLoggedIn: async () => !!await (r ? .getMemberDetails()),
                        isSiteMembersInstalled: !!r
                    }))), {
                        appWillMount: async () => {}
                    }
                })),
                E = (0, r.Og)([(0, r.KT)(s.wk, u.UU)], (e => ({
                    getHandler: () => ({
                        handle: async (t, a) => {
                            const r = await t,
                                {
                                    handlePermissions: n,
                                    isMemberLoggedIn: s,
                                    isSiteMembersInstalled: o
                                } = e.get(),
                                i = await s();
                            return o && r ? .pageId === p && !i ? (n(r, a).catch((e => {
                                console.error("Error handling permissions", e)
                            })), null) : r
                        }
                    })
                }))),
                q = e => {
                    e(n.po.Dynamic, s.SV).to(b), e(u.nk).to(T), e(u.P3, v.$.AppWillMountHandler).to(x), e(u.u_).to(E)
                }
        },
        26513: function(e, t, a) {
            a.r(t), a.d(t, {
                page: function() {
                    return c
                }
            });
            var r = a(16537),
                n = a(20590),
                s = a(87711);
            var o = a(77748),
                i = a(14625);
            const l = (0, o.Og)([(0, o.KT)(n.Gp, i.U), s.eZ, s.Ji], ((e, t, a) => ({
                    name: "sosp",
                    pageWillMount(r) {
                        ((e, t, a, r) => {
                            const {
                                sospCompId: n,
                                sospParentId: s,
                                position: o,
                                pagesToShowSosp: i
                            } = t, l = a.get(s);
                            l && (i[e] ? (l.components.includes(n) || a.addComponentToParent(s, n, o), r.update({
                                [s]: {
                                    className: "page-with-sosp"
                                }
                            })) : (l.components.includes(n) && a.removeComponentFromParent(s, n), r.update({
                                [s]: {
                                    className: "page-without-sosp"
                                }
                            })))
                        })(r, e, t, a)
                    }
                }))),
                c = e => {
                    e(r.$.PageWillMountHandler).to(l)
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_38.98dcb8cb.chunk.min.js.map