"use strict";
(self.webpackJsonp__wix_chat_widget = self.webpackJsonp__wix_chat_widget || []).push([
    [5451], {
        85451: function(t, e, n) {
            n.r(e), n.d(e, {
                ActivityStatus: function() {
                    return c
                },
                DeviceType: function() {
                    return M
                },
                Scope: function() {
                    return r
                },
                Status: function() {
                    return s
                },
                default: function() {
                    return K
                }
            });
            var i = n(92712);

            function o(t, e) {
                if (!t) throw new a(e)
            }
            var s, r, c, a = function(t) {
                    function e(n) {
                        var i = t.call(this, n) || this;
                        return Object.setPrototypeOf(i, e.prototype), i
                    }
                    return (0, i.__extends)(e, t), e
                }(Error),
                u = function() {
                    function t(t) {
                        var e = this;
                        this.opts = t, this.state = {
                            active: !1,
                            running: !1
                        }, this.onIdle = function() {
                            e.state.active = !1, e.opts.onIdle()
                        }, this.onAliveness = function() {
                            e.state.active || e.opts.onActive(), e.state.active = !0, e.removeEventListeners(), e.clearTimeouts(), e.scheduleSample()
                        }, o("number" == typeof t.isIdleTime && t.isIdleTime >= 6e4, "isIdleTime must be a number, bigger than 1 min"), o("function" == typeof t.onIdle, "onIdle must be a function"), o("function" == typeof t.onActive, "onActive must be a function")
                    }
                    return t.prototype.listen = function() {
                        this.state.running || (this.state.running = !0, this.state.active = !0, this.scheduleSample())
                    }, t.prototype.stop = function() {
                        this.state.running = !1, this.clearTimeouts(), this.removeEventListeners()
                    }, t.prototype.scheduleSample = function() {
                        var t = this;
                        this.sampleTimeout = setTimeout((function() {
                            t.sample()
                        }), 3e4)
                    }, t.prototype.sample = function() {
                        this.addEventListeners(), this.idleTimeout = setTimeout(this.onIdle, this.opts.isIdleTime)
                    }, t.prototype.addEventListeners = function() {
                        document.addEventListener("mousemove", this.onAliveness), document.addEventListener("keydown", this.onAliveness)
                    }, t.prototype.removeEventListeners = function() {
                        document.removeEventListener("mousemove", this.onAliveness), document.removeEventListener("keydown", this.onAliveness)
                    }, t.prototype.clearTimeouts = function() {
                        clearTimeout(this.idleTimeout), clearTimeout(this.sampleTimeout)
                    }, t
                }();

            function h(t) {
                return new u(t)
            }

            function p() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(t) {
                    var e = 16 * Math.random() | 0;
                    return ("x" === t ? e : 3 & e | 8).toString(16)
                }))
            }

            function l(t) {
                return JSON.parse(JSON.stringify(t))
            }! function(t) {
                t.ONLINE = "ONLINE", t.OFFLINE = "OFFLINE"
            }(s || (s = {})),
            function(t) {
                t.EDITOR_X = "editor-x", t.VIEWER = "viewer"
            }(r || (r = {})),
            function(t) {
                t[t.ACTIVE = 0] = "ACTIVE", t[t.IDLE = 1] = "IDLE"
            }(c || (c = {}));
            var d, f, v = 24e4;
            ! function(t) {
                t[t.INIT = 0] = "INIT", t[t.SUBSCRIBED = 1] = "SUBSCRIBED"
            }(d || (d = {})),
            function(t) {
                t[t.NONE = 0] = "NONE", t[t.STATE = 1] = "STATE", t[t.ACTIVITY = 2] = "ACTIVITY"
            }(f || (f = {}));
            var I = function() {
                function t(t) {
                    var e, n, o = this,
                        s = t.getPresenceConnection,
                        r = t.scope,
                        c = t.getSignedInstance,
                        a = t.initialState,
                        u = void 0 === a ? {} : a,
                        l = t.keepAliveInterval,
                        I = void 0 === l ? v : l,
                        _ = t.isIdleMs,
                        m = t.onIdle,
                        S = t.onActive;
                    this.onStateChangeFn = function() {}, this.sessionId = p(), this.trackState = d.INIT, this.lastInactivity = null, this.list = [], this.onDisconnectFn = function() {}, this.shuoldWatchGroup = !0, this.onIdle = function() {
                        o.lastInactivity = Date.now() - o.isIdleMs, o.refreshState(), o.onIdleFn()
                    }, this.onActive = function() {
                        o.lastInactivity = null, o.refreshState(), o.onActiveFn()
                    }, this.watchGroup = function() {
                        return (0, i.__awaiter)(o, void 0, void 0, (function() {
                            var t = this;
                            return (0, i.__generator)(this, (function(e) {
                                switch (e.label) {
                                    case 0:
                                        return this.shuoldWatchGroup ? [4, this.presenceClient()] : [3, 2];
                                    case 1:
                                        e.sent().watch({
                                            scope: this.scope
                                        }).catch((function() {})), e.label = 2;
                                    case 2:
                                        return this.watchGroupTimer && clearTimeout(this.watchGroupTimer), this.watchGroupTimer = setTimeout((function() {
                                            return t.watchGroup()
                                        }), 6e5), [2]
                                }
                            }))
                        }))
                    }, this.onSubscribe = function() {
                        return (0, i.__awaiter)(o, void 0, void 0, (function() {
                            var t = this;
                            return (0, i.__generator)(this, (function(e) {
                                switch (e.label) {
                                    case 0:
                                        return this.list = [], this.trackState = d.INIT, this.initBatchTimer && clearTimeout(this.initBatchTimer), this.watchGroup(), [4, this.keepAlive()];
                                    case 1:
                                        return e.sent(), this.idle.listen(), this.initBatchTimer = setTimeout((function() {
                                            t.trackState = d.SUBSCRIBED, t.onStateChange()
                                        }), 2e3), [2]
                                }
                            }))
                        }))
                    }, this.handleStateChanges = function(t) {
                        t.data = t.data || {};
                        var e = o.updateList(t);
                        o.trackState === d.SUBSCRIBED && e === f.STATE && o.onStateChange(t)
                    }, this.getPresenceConnection = s, this.getSignedInstance = c, this.keepAliveInterval = I, this.scope = r, this.storeState(u), this.isIdleMs = null !== (n = null !== (e = window.__PRESENCE_IDLE_TIME) && void 0 !== e ? e : _) && void 0 !== n ? n : 6e5, this.onIdleFn = null != m ? m : function() {}, this.onActiveFn = null != S ? S : function() {}, this.idle = h({
                        isIdleTime: this.isIdleMs,
                        onIdle: this.onIdle,
                        onActive: this.onActive
                    })
                }
                return t.prototype.initPresenceApi = function() {
                    return (0, i.__awaiter)(this, void 0, void 0, (function() {
                        var t;
                        return (0, i.__generator)(this, (function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.presenceApi ? [3, 2] : [4, n.e(6307).then(n.t.bind(n, 16307, 23))];
                                case 1:
                                    t = e.sent().PresenceService, this.presenceApi = t("/_api/presence-service", {
                                        ignoredProtoHttpUrlPart: "/api"
                                    }).PresenceService(), e.label = 2;
                                case 2:
                                    return [2]
                            }
                        }))
                    }))
                }, t.prototype.track = function(t, e) {
                    var n;
                    this.onStateChangeFn = t, this.shuoldWatchGroup = null !== (n = null == e ? void 0 : e.watchGroup) && void 0 !== n ? n : this.shuoldWatchGroup, this.connection = this.getPresenceConnection();
                    var i = {
                        presenceSessionId: this.sessionId,
                        watchGroup: null == e ? void 0 : e.watchGroup
                    };
                    return this.connection.on("@duplexer:disconnected", this.onDisconnectFn), this.connection.subscribe(this.scope, {
                        info: i
                    }).on("@duplexer:subscription_succeeded", this.onSubscribe).on("update-state", this.handleStateChanges)
                }, t.prototype.disconnect = function() {
                    this.connection && (this.connection.disconnect(), this.connection = void 0)
                }, t.prototype.onDisconnect = function(t) {
                    this.onDisconnectFn = t
                }, t.prototype.setState = function(t) {
                    return (0, i.__awaiter)(this, void 0, void 0, (function() {
                        return (0, i.__generator)(this, (function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.storeState(t), this.connection ? [4, this.presenceClient()] : [3, 3];
                                case 1:
                                    return [4, e.sent().setData({
                                        sessionId: this.sessionId,
                                        scope: this.scope,
                                        data: this.state
                                    })];
                                case 2:
                                    e.sent(), e.label = 3;
                                case 3:
                                    return [2]
                            }
                        }))
                    }))
                }, t.prototype.getSessionId = function() {
                    return this.sessionId
                }, t.prototype.emptyGroup = function() {
                    return (0, i.__awaiter)(this, void 0, void 0, (function() {
                        return (0, i.__generator)(this, (function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, this.presenceClient()];
                                case 1:
                                    return [4, t.sent().resetScope({
                                        scope: this.scope
                                    })];
                                case 2:
                                    return t.sent(), [2]
                            }
                        }))
                    }))
                }, t.prototype.storeState = function(t) {
                    this.state = (0, i.__assign)((0, i.__assign)({}, t), {
                        __lastInactivity: this.lastInactivity
                    })
                }, t.prototype.refreshState = function() {
                    return this.setState(this.state)
                }, t.prototype.keepAlive = function() {
                    return (0, i.__awaiter)(this, void 0, void 0, (function() {
                        var t = this;
                        return (0, i.__generator)(this, (function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.connection ? [4, this.refreshState().catch((function() {}))] : (clearTimeout(this.keepAliveTimer), [2]);
                                case 1:
                                    return e.sent(), this.keepAliveTimer && clearTimeout(this.keepAliveTimer), this.keepAliveTimer = setTimeout((function() {
                                        return t.keepAlive()
                                    }), this.keepAliveInterval), [2]
                            }
                        }))
                    }))
                }, t.prototype.onStateChange = function(t) {
                    this.onStateChangeFn(l(this.list), t ? l(t) : void 0)
                }, t.prototype.updateList = function(t) {
                    var e, n, i = this.list.find((function(e) {
                        return e.userId === t.userId && e.sessionId === t.sessionId
                    }));
                    return t.activity = function(t) {
                        return "number" == typeof t.data.__lastInactivity ? {
                            status: c.IDLE,
                            lastSeen: t.data.__lastInactivity
                        } : {
                            status: c.ACTIVE,
                            lastSeen: null
                        }
                    }(t), i && (e = i, n = t, JSON.stringify(e) === JSON.stringify(n)) ? f.NONE : (i && (this.list = this.list.filter((function(t) {
                        return t !== i
                    }))), t.status === s.ONLINE && this.list.push(t), f.STATE)
                }, t.prototype.presenceClient = function() {
                    return (0, i.__awaiter)(this, void 0, void 0, (function() {
                        return (0, i.__generator)(this, (function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, this.initPresenceApi()];
                                case 1:
                                    return t.sent(), [2, this.presenceApi({
                                        Authorization: this.getSignedInstance()
                                    })]
                            }
                        }))
                    }))
                }, t
            }();
            const _ = t => t.split("#");
            const m = "_",
                S = /{(.*)}/,
                g = new RegExp(`\\.(${["wix.com","editorx.com"].join("|")})$`),
                T = new RegExp(`\\.(${["42.wixprod.net","uw2-edt-1.wixprod.net"].join("|")})$`),
                y = new RegExp(".*\\.dev.wix-code.com$");

            function E(t) {
                const e = function(t, e) {
                    const n = e[t] || e[m];
                    if (!n && function(t) {
                            return !!t.match(/\._base_domain_$/)
                        }(t)) return e[w];
                    return n
                }(function(t) {
                    return t.replace("create.editorx.com", "editor.editorx.com")
                }(t.host).replace(g, "._base_domain_").replace(T, "._api_base_domain_").replace(y, "*.dev.wix-code.com"), t.domainToMappings);
                var n, i;
                return function(t, e) {
                    const n = e ? .find((e => t.startsWith(e.destPath)));
                    if (!n) return t;
                    return n.srcPath + t.slice(n.destPath.length)
                }((n = t.protoPath, i = t.data || {}, n.split("/").map((t => function(t, e) {
                    const n = t.match(S) || [],
                        i = n[1];
                    if (i) {
                        const o = t.replace(n[0], "");
                        return function(t, e, n, i) {
                            let o = t;
                            for (const t of e.split(".")) {
                                if (!o) return n;
                                o = o[t]
                            }
                            return `${o}${i}`
                        }(e, i, t, o)
                    }
                    return t
                }(t, i))).join("/")), e)
            }
            const w = "www._base_domain_";
            var A;

            function O(t, e = {}, n) {
                return function(i = {}, o) {
                    return "string" == typeof i ? i : s(t, i);

                    function s(t, e) {
                        const n = {};
                        return [null, void 0].includes(e) ? e : (Object.entries(e).forEach((([e, i]) => {
                            const o = t[e],
                                {
                                    schemaName: s,
                                    schemaType: a
                                } = function(t = "") {
                                    const [e, n] = _(t);
                                    return n ? {
                                        schemaName: n,
                                        schemaType: e
                                    } : {
                                        schemaName: e
                                    }
                                }(o),
                                u = "Map" === a;
                            let h;
                            h = c(s) ? .checkRepetable ? .(i) ? ? Array.isArray(i) ? i.map((t => r(t, s))) : u ? function(t, e) {
                                return Object.entries(t).reduce(((t, [n, i]) => (t[n] = r(i, e), t)), {})
                            }(i, s) : r(i, s), n[e] = h
                        })), n)
                    }

                    function r(t, n) {
                        if (!n) return t;
                        const i = e[n];
                        if (c(n)) return c(n).transform(t);
                        if (i) return s(i, t);
                        throw new Error(`${n} is neither schema nor serializable type`)
                    }

                    function c(t) {
                        return n[t] ? .[o]
                    }
                }
            }! function(t) {
                t[t.TO_JSON = 0] = "TO_JSON", t[t.FROM_JSON = 1] = "FROM_JSON"
            }(A || (A = {}));
            const N = {
                    types: ["google.protobuf.Timestamp"],
                    [A.TO_JSON]: {
                        transform: t => t ? .toISOString()
                    },
                    [A.FROM_JSON]: {
                        transform: t => t ? new Date(t) : void 0
                    }
                },
                b = {
                    types: ["google.protobuf.FieldMask"],
                    [A.TO_JSON]: {
                        transform: t => t.join(","),
                        checkRepetable: t => t.some((t => Array.isArray(t)))
                    },
                    [A.FROM_JSON]: {
                        transform: t => "object" == typeof t ? t.paths : t.split(",")
                    }
                },
                x = {
                    types: ["google.protobuf.BytesValue", "BYTES"],
                    [A.TO_JSON]: {
                        transform: t => {
                            const e = t.reduce(((t, e) => t + String.fromCharCode(e)), "");
                            return btoa(e)
                        }
                    },
                    [A.FROM_JSON]: {
                        transform: t => Uint8Array.from(atob(t), (t => t.charCodeAt(0)))
                    }
                },
                C = {
                    types: ["google.protobuf.Duration"],
                    [A.TO_JSON]: {
                        transform: ({
                            seconds: t = "0",
                            nanos: e = 0
                        }) => {
                            let n = "";
                            return 0 !== e && (n = `.${e.toString().padStart(9,"0")}`), `${t}${n}s`
                        }
                    },
                    [A.FROM_JSON]: {
                        transform: t => {
                            const [e, n] = t.substring(0, t.length - 1).split(".");
                            return {
                                seconds: e,
                                nanos: D(n)
                            }
                        }
                    }
                };

            function D(t) {
                let e = 0;
                if (void 0 !== t) {
                    const n = 3 - t.length / 3;
                    e = parseInt(t, 10) * Math.pow(1e3, n)
                }
                return e
            }
            const k = {
                types: ["FLOAT", "DOUBLE", "google.protobuf.FloatValue", "google.protobuf.DoubleValue"],
                [A.TO_JSON]: {
                    transform: t => isFinite(t) ? t : t.toString()
                },
                [A.FROM_JSON]: {
                    transform: t => "NaN" === t ? NaN : "Infinity" === t ? 1 / 0 : "-Infinity" === t ? -1 / 0 : t
                }
            };
            const P = [...[N, b, x, C, k]].reduce(((t, e) => ({ ...t,
                ...e.types.reduce(((t, n) => ({ ...t,
                    [n]: e
                })), {})
            })), {});

            function F(t, e = {}) {
                const n = O(t, e, P);
                return {
                    fromJSON(t) {
                        const e = function(t) {
                            try {
                                return JSON.parse(t)
                            } catch (t) {}
                        }(t) || t;
                        return n(e, A.FROM_JSON)
                    },
                    toJSON: t => n(t, A.TO_JSON)
                }
            }
            var R, M, J, L = {
                    sessionStartDate: "google.protobuf.Timestamp",
                    lastActiveDate: "google.protobuf.Timestamp"
                },
                G = {
                    payload: "_payload"
                },
                V = {
                    presence: "_presence"
                },
                W = {},
                B = {
                    mask: "google.protobuf.FieldMask",
                    presence: "_presence"
                },
                U = {};

            function $(t) {
                return E(Object.assign(t, {
                    domainToMappings: {
                        "www._base_domain_": [{
                            srcPath: "/_api/chat-presence-server",
                            destPath: "/api"
                        }],
                        "api._api_base_domain_": [{
                            srcPath: "/presence-server",
                            destPath: ""
                        }],
                        "engage.wixapps.net": [{
                            srcPath: "/_api/chat-presence-server",
                            destPath: "/api"
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/chat-presence-server",
                            destPath: "/api"
                        }],
                        _: [{
                            srcPath: "/_api/chat-presence-server",
                            destPath: "/api"
                        }]
                    }
                }))
            }

            function j(t) {
                return function(e) {
                    var n = e.host,
                        i = F(V, {
                            _payload: L,
                            _presence: G
                        }).toJSON,
                        o = F(W, {}).fromJSON,
                        s = i(t);
                    return {
                        method: "POST",
                        url: $({
                            protoPath: "/api/v2/presences/{presence.scope}",
                            data: s,
                            host: n
                        }),
                        data: s,
                        transformResponse: o
                    }
                }
            }! function(t) {
                t.UNKNOWN = "UNKNOWN", t.ACTIVE = "ACTIVE", t.OFFLINE = "OFFLINE"
            }(R || (R = {})),
            function(t) {
                t.UNKNOWN = "UNKNOWN", t.DESKTOP = "DESKTOP", t.MOBILE = "MOBILE"
            }(M || (M = {})),
            function(t) {
                t.UNDEFINED = "UNDEFINED", t.VIEWER = "VIEWER", t.EDITOR_X = "EDITOR_X"
            }(J || (J = {}));
            var X = function() {
                    function t(t) {
                        var e, n, o = this,
                            s = t.getPresenceConnection,
                            r = t.scope,
                            c = t.httpClient,
                            a = t.getInitialState,
                            u = void 0 === a ? function() {
                                return {}
                            } : a,
                            l = t.keepAliveInterval,
                            d = void 0 === l ? v : l,
                            f = t.isIdleMs,
                            I = t.onIdle,
                            _ = t.onActive;
                        this.sessionId = p(), this.onDisconnectFn = function() {}, this.shouldWatchGroup = !0, this.onIdle = function() {
                            o.updatePresence({}), o.onIdleFn()
                        }, this.onActive = function() {
                            return (0, i.__awaiter)(o, void 0, void 0, (function() {
                                return (0, i.__generator)(this, (function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, , 2, 3]), [4, this.onActiveFn()];
                                        case 1:
                                            return t.sent(), [3, 3];
                                        case 2:
                                            return this.refreshState(), [7];
                                        case 3:
                                            return [2]
                                    }
                                }))
                            }))
                        }, this.onSubscribe = function() {
                            return (0, i.__awaiter)(o, void 0, void 0, (function() {
                                return (0, i.__generator)(this, (function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return [4, this.createState(this.getInitialState())];
                                        case 1:
                                            return t.sent(), [4, this.keepAlive()];
                                        case 2:
                                            return t.sent(), this.idle.listen(), [2]
                                    }
                                }))
                            }))
                        }, this.getPresenceConnection = s, this.keepAliveInterval = d, this.scope = this.convertScope(r), this.isIdleMs = null !== (n = null !== (e = window.__PRESENCE_IDLE_TIME) && void 0 !== e ? e : f) && void 0 !== n ? n : 6e5, this.onIdleFn = null != I ? I : function() {}, this.onActiveFn = null != _ ? _ : function() {}, this.getInitialState = u, this.idle = h({
                            isIdleTime: this.isIdleMs,
                            onIdle: this.onIdle,
                            onActive: this.onActive
                        }), this.httpClient = c
                    }
                    return t.prototype.track = function(t) {
                        var e;
                        this.shouldWatchGroup = null !== (e = null == t ? void 0 : t.watchGroup) && void 0 !== e ? e : this.shouldWatchGroup, this.connection = this.getPresenceConnection();
                        var n = {
                            presenceSessionId: this.sessionId,
                            watchGroup: null == t ? void 0 : t.watchGroup
                        };
                        return this.connection.on("@duplexer:disconnected", this.onDisconnectFn), this.connection.subscribe(this.getConnectionScope(this.scope), {
                            info: n
                        }).on("@duplexer:subscription_succeeded", this.onSubscribe)
                    }, t.prototype.disconnect = function() {
                        this.connection && (this.connection.disconnect(), this.connection = void 0)
                    }, t.prototype.onDisconnect = function(t) {
                        this.onDisconnectFn = t
                    }, t.prototype.createState = function(t) {
                        return (0, i.__awaiter)(this, void 0, void 0, (function() {
                            var e;
                            return (0, i.__generator)(this, (function(n) {
                                switch (n.label) {
                                    case 0:
                                        return e = {
                                            payload: t,
                                            scope: this.scope,
                                            sessionId: this.sessionId,
                                            status: R.ACTIVE
                                        }, [4, this.httpClient.request(j({
                                            presence: e
                                        }))];
                                    case 1:
                                        return n.sent(), [2]
                                }
                            }))
                        }))
                    }, t.prototype.updateState = function(t) {
                        return (0, i.__awaiter)(this, void 0, void 0, (function() {
                            return (0, i.__generator)(this, (function(e) {
                                switch (e.label) {
                                    case 0:
                                        return this.connection ? [4, this.httpClient.request((n = t, function(t) {
                                            var e = t.host,
                                                i = F(B, {
                                                    _payload: L,
                                                    _presence: G
                                                }).toJSON,
                                                o = F(U, {}).fromJSON,
                                                s = i(n);
                                            return {
                                                method: "PATCH",
                                                url: $({
                                                    protoPath: "/api/v2/presences/{presence.scope}",
                                                    data: s,
                                                    host: e
                                                }),
                                                data: s,
                                                transformResponse: o
                                            }
                                        }))] : [3, 2];
                                    case 1:
                                        e.sent(), e.label = 2;
                                    case 2:
                                        return [2]
                                }
                                var n
                            }))
                        }))
                    }, t.prototype.preparePayload = function(t) {
                        void 0 === t && (t = {});
                        var e = (0, i.__assign)({
                            lastActiveDate: new Date
                        }, t);
                        return {
                            payload: e,
                            mask: Object.keys(e).map((function(t) {
                                return "payload." + t
                            }))
                        }
                    }, t.prototype.updatePresence = function(t, e) {
                        return void 0 === e && (e = []), (0, i.__awaiter)(this, void 0, void 0, (function() {
                            var n, o, s, r;
                            return (0, i.__generator)(this, (function(i) {
                                switch (i.label) {
                                    case 0:
                                        return n = this.preparePayload(t), o = n.payload, s = n.mask, r = Array.from(new Set(s.concat(e))), [4, this.updateState({
                                            mask: r,
                                            presence: {
                                                payload: o,
                                                scope: this.scope,
                                                sessionId: this.sessionId,
                                                status: R.ACTIVE
                                            }
                                        })];
                                    case 1:
                                        return i.sent(), [2]
                                }
                            }))
                        }))
                    }, t.prototype.getSessionId = function() {
                        return this.sessionId
                    }, t.prototype.refreshState = function() {
                        return this.updatePresence({})
                    }, t.prototype.keepAlive = function() {
                        return (0, i.__awaiter)(this, void 0, void 0, (function() {
                            var t = this;
                            return (0, i.__generator)(this, (function(e) {
                                switch (e.label) {
                                    case 0:
                                        return this.connection ? [4, this.refreshState().catch((function() {}))] : (clearTimeout(this.keepAliveTimer), [2]);
                                    case 1:
                                        return e.sent(), this.keepAliveTimer && clearTimeout(this.keepAliveTimer), this.keepAliveTimer = setTimeout((function() {
                                            return t.keepAlive()
                                        }), this.keepAliveInterval), [2]
                                }
                            }))
                        }))
                    }, t.prototype.getConnectionScope = function(t) {
                        switch (t) {
                            case J.VIEWER:
                                return r.VIEWER;
                            case J.EDITOR_X:
                                return r.EDITOR_X;
                            default:
                                return ""
                        }
                    }, t.prototype.convertScope = function(t) {
                        switch (t) {
                            case r.EDITOR_X:
                                return J.EDITOR_X;
                            case r.VIEWER:
                                return J.VIEWER;
                            default:
                                return J.UNDEFINED
                        }
                    }, t
                }(),
                K = function() {
                    function t(t) {
                        var e = t.duplexer,
                            n = t.getSignedInstance,
                            i = t.httpClient;
                        this.duplexer = e, this.getSignedInstance = null != n ? n : function() {
                            return ""
                        }, this.httpClient = i
                    }
                    return t.prototype.group = function(t, e) {
                        var n = this;
                        ! function(t) {
                            if (!Object.values(r).includes(t)) throw new Error("scope " + t + " is invalid!")
                        }(t);
                        return new I({
                            getPresenceConnection: function() {
                                return n.getConnection()
                            },
                            scope: t,
                            getSignedInstance: this.getSignedInstance,
                            initialState: null == e ? void 0 : e.initialState,
                            keepAliveInterval: null == e ? void 0 : e.keepAliveInterval,
                            onIdle: null == e ? void 0 : e.onIdle,
                            onActive: null == e ? void 0 : e.onActive,
                            isIdleMs: null == e ? void 0 : e.isIdleMs
                        })
                    }, t.prototype.groupV2 = function(t, e) {
                        var n = this;
                        if (!this.httpClient) throw new Error("Cannot init presence GroupV2 without HttpClient instance");
                        return new X({
                            getPresenceConnection: function() {
                                return n.getConnection()
                            },
                            scope: t,
                            httpClient: this.httpClient,
                            getInitialState: null == e ? void 0 : e.getInitialState,
                            keepAliveInterval: null == e ? void 0 : e.keepAliveInterval,
                            onIdle: null == e ? void 0 : e.onIdle,
                            onActive: null == e ? void 0 : e.onActive,
                            isIdleMs: null == e ? void 0 : e.isIdleMs
                        })
                    }, t.prototype.getConnection = function() {
                        return this.duplexer.connect({
                            appDefId: "401c08e7-b43e-4323-99f9-1f9f8138ff88"
                        })
                    }, t
                }()
        }
    }
]);
//# sourceMappingURL=5451.chunk.min.js.map