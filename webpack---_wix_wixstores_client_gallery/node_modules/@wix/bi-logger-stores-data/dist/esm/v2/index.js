/**
 * A function to create a log object for the 'pageLoadInBm' event (evid: 1)
 *
 * Event description: When any page loaded in the BM i-frame dedicated to the  sale channel
 *
 * @param {pageLoadInBmParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {boolean} hasOptions - has_options
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - Facebook / Instagram / ebay/ amazon/wish/Google shopping/Tiktok
 * @property {number} numIssues - num_issues
 * @property {string} integrationName - integration_name
 * @property {string} state - state
 * @property {boolean} canPublish - can_publish
 * @property {string} asin - asin
 * @property {string} remainSteps - remain_steps
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {string} country - country
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} accountStatus - Active / In review / Rejected
 * @property {number} loadingTime - int!!!! (no decimal numbers) - milisec for page load from start
 * @property {boolean} domainConnected - domain_connected
 * @property {string} pageName - welcome / manage / manage EmptyState/variantPage/Account setup/store reqirements/dashboard/settings
 * @property {string} type - type
 * @return {LogObject<pageLoadInBmParams>} LogObject<pageLoadInBmParams>
 */
export function pageLoadInBm(params) {
    return {
        evid: 1,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickOnWelcomeScreenCta' event (evid: 10)
 *
 * Event description: When user click on the welcome screen CTA
 *
 * @param {onBoardingClickOnWelcomeScreenCtaParams} params - The parameters for this event
 * @property {string} channel - instagram / facebook / ebay / amazon/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<onBoardingClickOnWelcomeScreenCtaParams>} LogObject<onBoardingClickOnWelcomeScreenCtaParams>
 */
export function onBoardingClickOnWelcomeScreenCta(params) {
    return {
        evid: 10,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userSActionInVerificationCodePopup' event (evid: 100)
 *
 * Event description: When the user clicks on one of the options in the verification code popup window: close/call me instead/submit/resend code
 *
 * @param {userSActionInVerificationCodePopupParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} action - close/call me instead/submit/resend code
 * @return {LogObject<userSActionInVerificationCodePopupParams>} LogObject<userSActionInVerificationCodePopupParams>
 */
export function userSActionInVerificationCodePopup(params) {
    return {
        evid: 100,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'startWixProductReviewServer' event (evid: 1000)
 *
 * Event description: When Wix get to review product
 *
 * @param {startWixProductReviewServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} productId - productId of the reviewed product
 * @property {string} trigger - initial / changeProductStatus / CatalogEvent / ManualSync
 * @return {LogObject<startWixProductReviewServerParams>} LogObject<startWixProductReviewServerParams>
 */
export function startWixProductReviewServer(params) {
    return {
        evid: 1000,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'finishWixProductsReviewServer' event (evid: 1001)
 *
 * Event description: When Wix finish the review with results
 *
 * @param {finishWixProductsReviewServerParams} params - The parameters for this event
 * @property {number} reviewTime - The time between review start and review finish (in MS, no decimal numbers)
 * @property {GUID} storeId - store_id
 * @property {string} reason - MissingDescription / SiteNotPublish / priceZero / … If approved don’t send at all
 * @property {string} productId - productId of the reviewed product
 * @property {string} reviewStatus - approved / rejected / fixed
 * @property {string} trigger - initial / changeProductStatus / CatalogEvent / ManualSync
 * @return {LogObject<finishWixProductsReviewServerParams>} LogObject<finishWixProductsReviewServerParams>
 */
export function finishWixProductsReviewServer(params) {
    return {
        evid: 1001,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'startFbProductReviewServer' event (evid: 1002)
 *
 * Event description: When FB get to review product for any reason
 *
 * @param {startFbProductReviewServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} productId - productId of the reviewed product
 * @property {string} trigger - initial / changeProductStatus / CatalogEvent/ ManualSync
 * @return {LogObject<startFbProductReviewServerParams>} LogObject<startFbProductReviewServerParams>
 */
export function startFbProductReviewServer(params) {
    return {
        evid: 1002,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'finishFbProductReviewServer' event (evid: 1003)
 *
 * Event description: When FB finish the review with results
 *
 * @param {finishFbProductReviewServerParams} params - The parameters for this event
 * @property {number} reviewTime - The time between review start and review finish (in MS, no decimal numbers)
 * @property {GUID} storeId - store_id
 * @property {string} reason - Sex / Fraud / … If approved don’t send at all
 * @property {string} productId - productId of the reviewed product
 * @property {string} reviewStatus - approved / rejected
 * @property {string} trigger - initial / changeProductStatus / CatalogEvent / ManualSync
 * @return {LogObject<finishFbProductReviewServerParams>} LogObject<finishFbProductReviewServerParams>
 */
export function finishFbProductReviewServer(params) {
    return {
        evid: 1003,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userCheckToAgreeToPolicy' event (evid: 101)
 *
 * Event description: When the user checks/unchecks the ‘agree to comply with google’s terms and conditions’.
 *
 * @param {userCheckToAgreeToPolicyParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {boolean} status - TRUE=check/FALSE=uncheck Whether the user check or uncheck the terms and policy
 * @return {LogObject<userCheckToAgreeToPolicyParams>} LogObject<userCheckToAgreeToPolicyParams>
 */
export function userCheckToAgreeToPolicy(params) {
    return {
        evid: 101,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fbAccountConnectedServer' event (evid: 1010)
 *
 * Event description: When the user connected his FB account
 *
 * @param {fbAccountConnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<fbAccountConnectedServerParams>} LogObject<fbAccountConnectedServerParams>
 */
export function fbAccountConnectedServer(params) {
    return {
        evid: 1010,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fbBusinessPageConnectedServer' event (evid: 1011)
 *
 * Event description: When the user connected his FB business page
 *
 * @param {fbBusinessPageConnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<fbBusinessPageConnectedServerParams>} LogObject<fbBusinessPageConnectedServerParams>
 */
export function fbBusinessPageConnectedServer(params) {
    return {
        evid: 1011,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'salesChannelEnabledServer' event (evid: 1012)
 *
 * Event description: When the user connected his FB business page OR ebay / amazon  / Wish account  and has at least one product published. For wish- (1) when a User Publishes their 1st item (2) when a user deactivates all their products and then publishes their 1st item (for one msid it might be sent a few times)
 *
 * @param {salesChannelEnabledServerParams} params - The parameters for this event
 * @property {string} channel - eBay / amazon / wish/Google shopping
 * @property {string} uuid - uuid
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @return {LogObject<salesChannelEnabledServerParams>} LogObject<salesChannelEnabledServerParams>
 */
export function salesChannelEnabledServer(params) {
    return {
        evid: 1012,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fbAccountDisconnectedServer' event (evid: 1013)
 *
 * Event description: When the user disconnected from his FB account
 *
 * @param {fbAccountDisconnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<fbAccountDisconnectedServerParams>} LogObject<fbAccountDisconnectedServerParams>
 */
export function fbAccountDisconnectedServer(params) {
    return {
        evid: 1013,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fbBusinessPageDisconnectedServer' event (evid: 1014)
 *
 * Event description: When the user disconnected his FB business page
 *
 * @param {fbBusinessPageDisconnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<fbBusinessPageDisconnectedServerParams>} LogObject<fbBusinessPageDisconnectedServerParams>
 */
export function fbBusinessPageDisconnectedServer(params) {
    return {
        evid: 1014,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fbShopDisabledServer' event (evid: 1015)
 *
 * Event description: When the user choose to unpublish ALL his products (Manually or from catalog changes). For wish it will be send when User unpublished last product. I.e. no any published products left
 *
 * @param {fbShopDisabledServerParams} params - The parameters for this event
 * @property {string} channel - channel
 * @property {string} uuid - uuid
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {string} reason - unpublish all / disapproved all / disconnect account
 * @return {LogObject<fbShopDisabledServerParams>} LogObject<fbShopDisabledServerParams>
 */
export function fbShopDisabledServer(params) {
    return {
        evid: 1015,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productStatusChanged' event (evid: 1016)
 *
 * Event description: When the product’s status is changed : Error - Something went wrong. Could be user error or it could be a system error
 * Rejected - The marketplace rejected the product
 * Deactivated - The product has been deactivated. It no longer syncs changes and may have marketplace-specific data for when it is activated in the future
 * ReadyToSync - The product is marked as ready to be synchronized. This is the initial trigger for processing
 * Syncing - The product is being processed by Wix
 * WaitingOnMarketplace - The product is being processed by the marketplace
 * Synchronized - Done
 *
 * @param {productStatusChangedParams} params - The parameters for this event
 * @property {string} channel - ebay / wish / amazon/Google shopping
 * @property {string} uuid - user ID
 * @property {string} rejectionError - In case of rejection : a list of the error
 * @property {string} user_agent - user_agent
 * @property {string} tagsList - List of tags (relevant for wish)
 * @property {string} productGuid - product_guid
 * @property {string} currentStatus - The new product’s status: Unsuccessful/Rejected/In review/Listed
 * @return {LogObject<productStatusChangedParams>} LogObject<productStatusChangedParams>
 */
export function productStatusChanged(params) {
    return {
        evid: 1016,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnContinueSetup' event (evid: 102)
 *
 * Event description: When the user clicks on ‘continue setup’ in the Account Setup page(google shopping)
 *
 * @param {clickOnContinueSetupParams} params - The parameters for this event
 * @property {string} shippingState - The selected shipping state. null =not from the USA
 * @property {string} shippingZipcode - The selected shipping zipcode
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {string} shippingCountry - The selected shipping country
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {boolean} newAccount - true/false.  Does it an existing merchant center account or is it a new one that we have created.note that if the user had an account and he decided to created a new one it will be false
 * @property {string} googleMercantCenterAccount - The selected google merchant center account
 * @return {LogObject<clickOnContinueSetupParams>} LogObject<clickOnContinueSetupParams>
 */
export function clickOnContinueSetup(params) {
    return {
        evid: 102,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'eBayAccountConnectedServer' event (evid: 1020)
 *
 * Event description: If eBay/Amazon/Wish/google shopping  account connected successfully after user sign in/register to eBay/Amazon/Wish/google merchant account
 *
 * @param {eBayAccountConnectedServerParams} params - The parameters for this event
 * @property {string} channel - ebay / amazon / wish/Google shopping
 * @property {string} market - market
 * @property {string} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} accountStatus - account_status
 * @property {string} merchantId - merchant_id
 * @property {string} accountType - account_type
 * @return {LogObject<eBayAccountConnectedServerParams>} LogObject<eBayAccountConnectedServerParams>
 */
export function eBayAccountConnectedServer(params) {
    return {
        evid: 1020,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'eBayShopEnabledServer' event (evid: 1021)
 *
 * Event description: after the user finishes the onBoarding process and the store products are ready to be published to eBay
 *
 * @param {eBayShopEnabledServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<eBayShopEnabledServerParams>} LogObject<eBayShopEnabledServerParams>
 */
export function eBayShopEnabledServer(params) {
    return {
        evid: 1021,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'eBayAccountDisconnectedServer' event (evid: 1022)
 *
 * Event description: eBay/Amazon/Wish/Google shopping account disconnected
 *
 * @param {eBayAccountDisconnectedServerParams} params - The parameters for this event
 * @property {string} channel - ebay / amazon /wish/Google shopping
 * @property {string} market - market
 * @property {string} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} origin - where was the disconnect from. values: null (if from the user)/ channel(if it was from ebay/amazon side)
 * @property {string} accountType - account_type
 * @property {GUID} msid - msid
 * @return {LogObject<eBayAccountDisconnectedServerParams>} LogObject<eBayAccountDisconnectedServerParams>
 */
export function eBayAccountDisconnectedServer(params) {
    return {
        evid: 1022,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'eBayAccountSyncedServer' event (evid: 1023)
 *
 * Event description: When account synced successfully
 *
 * @param {eBayAccountSyncedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} channel - ebay
 * @return {LogObject<eBayAccountSyncedServerParams>} LogObject<eBayAccountSyncedServerParams>
 */
export function eBayAccountSyncedServer(params) {
    return {
        evid: 1023,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnStepInStoreRequirements' event (evid: 103)
 *
 * Event description: When the user clicks on one of the steps in the ‘store reqirements’ page (in google shopping)
 *
 * @param {clickOnStepInStoreRequirementsParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {string} step - Which step does the user clicked: add payment option\remove password\ set up shipping\ add contact info\add policies \confirm contact info\confirm policies
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} origin - dashboard / error fix
 * @return {LogObject<clickOnStepInStoreRequirementsParams>} LogObject<clickOnStepInStoreRequirementsParams>
 */
export function clickOnStepInStoreRequirements(params) {
    return {
        evid: 103,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'completeStepInStoreRequirements' event (evid: 104)
 *
 * Event description: When the user completed one of the steps in the ‘store requirements’ page (in google shopping)
 *
 * @param {completeStepInStoreRequirementsParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {string} step - Which step does the user completed: add payment option\remove password\ set up shipping\ add contact info\add policies  \confirm contact info\confirm policies
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<completeStepInStoreRequirementsParams>} LogObject<completeStepInStoreRequirementsParams>
 */
export function completeStepInStoreRequirements(params) {
    return {
        evid: 104,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userCompletedStoreRequirements' event (evid: 105)
 *
 * Event description: When the user completed the store requirements and success icon is shown  (relevant for google shopping)
 *
 * @param {userCompletedStoreRequirementsParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - true - if premium package allows using the feature
 * @return {LogObject<userCompletedStoreRequirementsParams>} LogObject<userCompletedStoreRequirementsParams>
 */
export function userCompletedStoreRequirements(params) {
    return {
        evid: 105,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorShownForRemoveRequirements' event (evid: 106)
 *
 * Event description: When the error message is shown after the user removes one of the google requirements after they are all complete (relevant for google shopping)
 *
 * @param {errorShownForRemoveRequirementsParams} params - The parameters for this event
 * @property {string} missingRequirements - List of all missing requirements separated by “,”. The options are: missing payment option\ password was not removed\ missing shipping\ missing contact info\missing policies.
 * @property {string} channel - ebay/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - true - if premium package allows using the feature
 * @return {LogObject<errorShownForRemoveRequirementsParams>} LogObject<errorShownForRemoveRequirementsParams>
 */
export function errorShownForRemoveRequirements(params) {
    return {
        evid: 106,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userSBulkAction' event (evid: 107)
 *
 * Event description: When the user use the bulk action in order to publish\unpublish products
 *
 * @param {userSBulkActionParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {number} numOfProducts - Number of products the action was made on
 * @property {string} action - publish\unpublish
 * @return {LogObject<userSBulkActionParams>} LogObject<userSBulkActionParams>
 */
export function userSBulkAction(params) {
    return {
        evid: 107,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnGetDataFeed' event (evid: 108)
 *
 * Event description: When the user clicks on ‘Get Data Feed’ in tiktok feed integration
 *
 * @param {clickOnGetDataFeedParams} params - The parameters for this event
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<clickOnGetDataFeedParams>} LogObject<clickOnGetDataFeedParams>
 */
export function clickOnGetDataFeed(params) {
    return {
        evid: 108,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClicksOnConnectDomain' event (evid: 109)
 *
 * Event description: When the user click on connect domain
 *
 * @param {userClicksOnConnectDomainParams} params - The parameters for this event
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<userClicksOnConnectDomainParams>} LogObject<userClicksOnConnectDomainParams>
 */
export function userClicksOnConnectDomain(params) {
    return {
        evid: 109,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickToCreateFbBusinessPage' event (evid: 11)
 *
 * Event description: When user click on pagePicker Empty state link to create business page
 *
 * @param {onBoardingClickToCreateFbBusinessPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<onBoardingClickToCreateFbBusinessPageParams>} LogObject<onBoardingClickToCreateFbBusinessPageParams>
 */
export function onBoardingClickToCreateFbBusinessPage(params) {
    return {
        evid: 11,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'integrationModalView' event (evid: 110)
 *
 * Event description: when popup for tiktok catalog feed is shown
 *
 * @param {integrationModalViewParams} params - The parameters for this event
 * @property {string} modalType - Tiktok catalog link
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<integrationModalViewParams>} LogObject<integrationModalViewParams>
 */
export function integrationModalView(params) {
    return {
        evid: 110,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'integrationModalCopyLinkClick' event (evid: 111)
 *
 * Event description: when the user clicks ‘copy’
 *
 * @param {integrationModalCopyLinkClickParams} params - The parameters for this event
 * @property {string} modalType - Tiktok catalog copy url modal
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<integrationModalCopyLinkClickParams>} LogObject<integrationModalCopyLinkClickParams>
 */
export function integrationModalCopyLinkClick(params) {
    return {
        evid: 111,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'integrationClickIncludeVariants' event (evid: 112)
 *
 * Event description: when the user click to include product variants for tiktok feed integration
 *
 * @param {integrationClickIncludeVariantsParams} params - The parameters for this event
 * @property {boolean} status - TRUE=check/FALSE=uncheck Whether the user check or uncheck the ‘include product variants’
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<integrationClickIncludeVariantsParams>} LogObject<integrationClickIncludeVariantsParams>
 */
export function integrationClickIncludeVariants(params) {
    return {
        evid: 112,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'instagramAccountConnectedServer' event (evid: 1120)
 *
 * Event description: When the user connected him Instagram account
 *
 * @param {instagramAccountConnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<instagramAccountConnectedServerParams>} LogObject<instagramAccountConnectedServerParams>
 */
export function instagramAccountConnectedServer(params) {
    return {
        evid: 1120,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'instagramAccountDisconnectedServer' event (evid: 1121)
 *
 * Event description: When the user disconnected from his IG account
 *
 * @param {instagramAccountDisconnectedServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<instagramAccountDisconnectedServerParams>} LogObject<instagramAccountDisconnectedServerParams>
 */
export function instagramAccountDisconnectedServer(params) {
    return {
        evid: 1121,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPublishedServer' event (evid: 1125)
 *
 * Event description: When a product was published successfully. For Wish until May 3rd 2022: it sends when the product was added to the catalog (click, it doesn't mean that it was confirmed successfully by Wish). Now it sends with the final approve by wish
 *
 * @param {productPublishedServerParams} params - The parameters for this event
 * @property {string} channel - ebay / wish / amazon /Google shopping
 * @property {number} totalNumVariants - total_num_variants
 * @property {string} uuid - uuid
 * @property {string} product_guid - the relevant product id
 * @property {GUID} storeId - store_id
 * @property {boolean} isInitial - is_initial
 * @property {string} tagsList - tags_list
 * @property {string} category - ebay product category
 * @property {number} numVariantsPublished - num_variants_published
 * @return {LogObject<productPublishedServerParams>} LogObject<productPublishedServerParams>
 */
export function productPublishedServer(params) {
    return {
        evid: 1125,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productUnpublishedServer' event (evid: 1126)
 *
 * Event description: When a product was unpublished successfully
 *
 * @param {productUnpublishedServerParams} params - The parameters for this event
 * @property {string} channel - ebay/amazon/Google shopping
 * @property {string} product_guid - the relevant product id
 * @property {GUID} storeId - store_id
 * @property {string} reason - reason for unpublishing product
 * @return {LogObject<productUnpublishedServerParams>} LogObject<productUnpublishedServerParams>
 */
export function productUnpublishedServer(params) {
    return {
        evid: 1126,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productLinkedServer' event (evid: 1127)
 *
 * Event description: When a product was linked successfully
 *
 * @param {productLinkedServerParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - amazon
 * @property {string} asin - asin
 * @property {GUID} product_guid - the relevant wix product id
 * @property {string} category - ebay product category
 * @return {LogObject<productLinkedServerParams>} LogObject<productLinkedServerParams>
 */
export function productLinkedServer(params) {
    return {
        evid: 1127,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productDeactivatedServer' event (evid: 1128)
 *
 * Event description: When a product was deactivated by the user
 *
 * @param {productDeactivatedServerParams} params - The parameters for this event
 * @property {string} channel - ebay / wish / amazon/Google shopping
 * @property {string} uuid - uuid
 * @property {string} product_guid - the relevant product id
 * @property {string} actionSource - action_source
 * @return {LogObject<productDeactivatedServerParams>} LogObject<productDeactivatedServerParams>
 */
export function productDeactivatedServer(params) {
    return {
        evid: 1128,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productUpdatedServer' event (evid: 1129)
 *
 * Event description: When a product was updated successfully
 *
 * @param {productUpdatedServerParams} params - The parameters for this event
 * @property {string} channel - ebay / wish / amazon
 * @property {string} product_guid - the relevant product id
 * @property {string} user_agent - user_agent
 * @return {LogObject<productUpdatedServerParams>} LogObject<productUpdatedServerParams>
 */
export function productUpdatedServer(params) {
    return {
        evid: 1129,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'integrationModalClickOnClose' event (evid: 113)
 *
 * Event description: when the user click to close the popup for tiktok feed integration.
 *
 * @param {integrationModalClickOnCloseParams} params - The parameters for this event
 * @property {string} modalType - Tiktok catalog copy url modal
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<integrationModalClickOnCloseParams>} LogObject<integrationModalClickOnCloseParams>
 */
export function integrationModalClickOnClose(params) {
    return {
        evid: 113,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'integrationModalClosed' event (evid: 114)
 *
 * Event description: when the tiktok feed integration popup is closed.
 *
 * @param {integrationModalClosedParams} params - The parameters for this event
 * @property {string} modalType - modal_type
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<integrationModalClosedParams>} LogObject<integrationModalClosedParams>
 */
export function integrationModalClosed(params) {
    return {
        evid: 114,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userSActionInProductAttributesModal' event (evid: 115)
 *
 * Event description: User's action in edit attributes from the dashboard (click to save/cancel)
 *
 * @param {userSActionInProductAttributesModalParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {string} productsList - List of products the action was made on
 * @property {boolean} contianAdultContent - Whether the user checked the box of contain adult content
 * @property {number} numOfProducts - Number of products the action was made on
 * @property {string} origin - Options are: dashboard/product page/settings
 * @property {string} productAttributes - Jason with the match attributes (product attribute and his match ‘select or type in attribute’ )
 * @property {string} action - Click on save/ cancel
 * @return {LogObject<userSActionInProductAttributesModalParams>} LogObject<userSActionInProductAttributesModalParams>
 */
export function userSActionInProductAttributesModal(params) {
    return {
        evid: 115,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveProductAttributes' event (evid: 116)
 *
 * Event description: When product attributes is saved
 *
 * @param {saveProductAttributesParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {string} productsList - List of products the action was made on
 * @property {boolean} contianAdultContent - Whether the user checked the box of contain adult content
 * @property {number} numOfProducts - Number of products the action was made on
 * @property {string} origin - dashboard/product page/settings
 * @property {string} productAttributes - Jason with the match attributes (product attribute and his match ‘select or type in attribute’ )
 * @return {LogObject<saveProductAttributesParams>} LogObject<saveProductAttributesParams>
 */
export function saveProductAttributes(params) {
    return {
        evid: 116,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleCreated' event (evid: 117)
 *
 * Event description: When shipping rule is saved
 *
 * @param {shippingRuleCreatedParams} params - The parameters for this event
 * @property {string} dest - json of countries in shipping rule
 * @property {string} channel - Google
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {string} methodType - flat / free / price_range / carrier
 * @property {string} shippingSettings - User’s selection for shipping settings. The options:  Custom shipping / wix shipping / gmc shipping
 * @return {LogObject<shippingRuleCreatedParams>} LogObject<shippingRuleCreatedParams>
 */
export function shippingRuleCreated(params) {
    return {
        evid: 117,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleDeleted' event (evid: 118)
 *
 * Event description: When shipping rule is deleted
 *
 * @param {shippingRuleDeletedParams} params - The parameters for this event
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {string} channel - Google
 * @return {LogObject<shippingRuleDeletedParams>} LogObject<shippingRuleDeletedParams>
 */
export function shippingRuleDeleted(params) {
    return {
        evid: 118,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleUpdated' event (evid: 119)
 *
 * Event description: When shipping rule is updated
 *
 * @param {shippingRuleUpdatedParams} params - The parameters for this event
 * @property {string} dest - json of countries in shipping rule
 * @property {string} channel - Google
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {string} methodType - flat / free / price_range / carrier
 * @return {LogObject<shippingRuleUpdatedParams>} LogObject<shippingRuleUpdatedParams>
 */
export function shippingRuleUpdated(params) {
    return {
        evid: 119,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickConnectEBayAccount' event (evid: 12)
 *
 * Event description: when user click to connect eBay/amazon/wish/google shopping account. For amazon: Since 22.03 also have for click "continue" in "Connect to Amazon" popup (if user has existing account or no). For google: When user click Sign Up with Wix (default option, creates New account) / Use existing account in Connect to Google for Merchants popup
 *
 * @param {onBoardingClickConnectEBayAccountParams} params - The parameters for this event
 * @property {string} channel - wish/google/ebay/amazon
 * @property {string} market - market
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} eBayMarket - eBay market chosen. for example: eBay.com (United States)
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} selection - selection
 * @property {string} origin - origin
 * @property {string} type - connect account/ create new market
 * @return {LogObject<onBoardingClickConnectEBayAccountParams>} LogObject<onBoardingClickConnectEBayAccountParams>
 */
export function onBoardingClickConnectEBayAccount(params) {
    return {
        evid: 12,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleEnabledDisabled' event (evid: 120)
 *
 * Event description: When shipping rule is enabled/disabled
 *
 * @param {shippingRuleEnabledDisabledParams} params - The parameters for this event
 * @property {string} channel - Google
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {boolean} status - true for enable false for disabled
 * @return {LogObject<shippingRuleEnabledDisabledParams>} LogObject<shippingRuleEnabledDisabledParams>
 */
export function shippingRuleEnabledDisabled(params) {
    return {
        evid: 120,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleErrorInSave' event (evid: 121)
 *
 * Event description: When an error message is shown when the user is trying to save shipping rule
 *
 * @param {shippingRuleErrorInSaveParams} params - The parameters for this event
 * @property {string} channel - Google
 * @property {string} errorsList - List of the error codes (seperated by “,”) Options: missing region name / select at least one country / set a maximum delivery time / non valid zip code / set a minimum delivery time / region name max lenght/  missing rate
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @return {LogObject<shippingRuleErrorInSaveParams>} LogObject<shippingRuleErrorInSaveParams>
 */
export function shippingRuleErrorInSave(params) {
    return {
        evid: 121,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveVariantAttributes' event (evid: 122)
 *
 * Event description: When variant attributes is saved from the product page
 *
 * @param {saveVariantAttributesParams} params - The parameters for this event
 * @property {string} channel - Google
 * @property {string} productGuid - Wix Product id
 * @property {number} numOfVariants - Number of variants the action was made on
 * @property {string} variantAttributes - Jason with the match attributes (wix product options and the match google attributes )
 * @return {LogObject<saveVariantAttributesParams>} LogObject<saveVariantAttributesParams>
 */
export function saveVariantAttributes(params) {
    return {
        evid: 122,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickOnPromotionOffer' event (evid: 123)
 *
 * Event description: When user click on promotion offer in the welcome/ dashboard page
 *
 * @param {onBoardingClickOnPromotionOfferParams} params - The parameters for this event
 * @property {string} channel - instagram / facebook / ebay / amazon/Google shopping
 * @property {string} country - user's country. for the welcome page it will be null
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} origin - welcome page/dashboard
 * @return {LogObject<onBoardingClickOnPromotionOfferParams>} LogObject<onBoardingClickOnPromotionOfferParams>
 */
export function onBoardingClickOnPromotionOffer(params) {
    return {
        evid: 123,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingGetReadyForSetUpModalShown' event (evid: 124)
 *
 * Event description: When the ‘get ready for set ip’ pops up
 *
 * @param {onBoardingGetReadyForSetUpModalShownParams} params - The parameters for this event
 * @property {string} channel - google
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} missingActions - List of all missing actions separated by “,”. Values are:connect domain/publish site. For example: “connect domain,publish site”
 * @return {LogObject<onBoardingGetReadyForSetUpModalShownParams>} LogObject<onBoardingGetReadyForSetUpModalShownParams>
 */
export function onBoardingGetReadyForSetUpModalShown(params) {
    return {
        evid: 124,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickOnActionInGetReadyForSetUpModal' event (evid: 125)
 *
 * Event description: When the user clicks in one of the options in the “get ready for setup” modal: click connect your site link/click go to the editor link/cancel (for both X and cancel)/continue/help (?- KB article)
 *
 * @param {onBoardingClickOnActionInGetReadyForSetUpModalParams} params - The parameters for this event
 * @property {string} channel - google
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} action - User’s action to click. The values are: - click connect your site link click go to the editor link cancel (for both X and cancel) continue help
 * @return {LogObject<onBoardingClickOnActionInGetReadyForSetUpModalParams>} LogObject<onBoardingClickOnActionInGetReadyForSetUpModalParams>
 */
export function onBoardingClickOnActionInGetReadyForSetUpModal(params) {
    return {
        evid: 125,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingWelcomeScreenCtaPopup' event (evid: 126)
 *
 * Event description: When the  welcome screen CTA poped up
 *
 * @param {onBoardingWelcomeScreenCtaPopupParams} params - The parameters for this event
 * @property {string} channel - google
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<onBoardingWelcomeScreenCtaPopupParams>} LogObject<onBoardingWelcomeScreenCtaPopupParams>
 */
export function onBoardingWelcomeScreenCtaPopup(params) {
    return {
        evid: 126,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingConnectGmcConnectAccountPopup' event (evid: 127)
 *
 * Event description: After the user connect to gmail account , there are 4 options to the screens: Couldnt find GMC associated with gmail /Choose GMC account /No admin access/ Account connecting spinning loader
 *
 * @param {onBoardingConnectGmcConnectAccountPopupParams} params - The parameters for this event
 * @property {string} channel - google
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} message - Values:  no GMC associated with gmail  /Choose GMC account/No admin access /Account connecting loader
 * @return {LogObject<onBoardingConnectGmcConnectAccountPopupParams>} LogObject<onBoardingConnectGmcConnectAccountPopupParams>
 */
export function onBoardingConnectGmcConnectAccountPopup(params) {
    return {
        evid: 127,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickOnGmcConnectAccountPopup' event (evid: 128)
 *
 * Event description: When the user clicks on GMC connect account popup (for  connect/cancel)
 *
 * @param {onBoardingClickOnGmcConnectAccountPopupParams} params - The parameters for this event
 * @property {string} channel - google
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} message - Values:  no GMC associated with gmail  /Choose GMC account/No admin access /Account connecting loader
 * @property {string} action - User’s action on the popup:connect/cancel
 * @return {LogObject<onBoardingClickOnGmcConnectAccountPopupParams>} LogObject<onBoardingClickOnGmcConnectAccountPopupParams>
 */
export function onBoardingClickOnGmcConnectAccountPopup(params) {
    return {
        evid: 128,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveAccountSettings' event (evid: 129)
 *
 * Event description: When the user clicks on save in the ‘account’ tab under the settings page
 *
 * @param {saveAccountSettingsParams} params - The parameters for this event
 * @property {boolean} isAutoProductImprove - true/false. Whether the user turn off/on the automatica product improvements
 * @property {string} channel - Google
 * @property {string} businessAddressCountry - The saved country under business address
 * @property {string} businessAddressCity - The saved City under business address
 * @property {string} businessAddressState - The saved state under business address
 * @return {LogObject<saveAccountSettingsParams>} LogObject<saveAccountSettingsParams>
 */
export function saveAccountSettings(params) {
    return {
        evid: 129,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickContinueToShipping' event (evid: 13)
 *
 * Event description: When user clicks to Continue to the next stage in account set up
 *
 * @param {onBoardingClickContinueToShippingParams} params - The parameters for this event
 * @property {string} channel - wish
 * @property {GUID} uuid - uuid
 * @property {string} page - account/location/shipping/tags
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} next_step - location / shipping / payment / returnPolicies / tax
 * @property {boolean} isChanged - is_changed
 * @property {string} type - continue / stepper
 * @property {string} inputValues - In a JSON  Array add info about imputed values, for example:[{ ‘Destination’:’USA’, ‘Shipping price’:’1.2’ ‘Delivery Day’:’3’, },{...}], [{‘Tags’:’Dogs’,’Out of stock’}]
 * @property {number} inputValuesCount - How many destinations/tags user input
 * @return {LogObject<onBoardingClickContinueToShippingParams>} LogObject<onBoardingClickContinueToShippingParams>
 */
export function onBoardingClickContinueToShipping(params) {
    return {
        evid: 13,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickUseAnotherAccountPopup' event (evid: 130)
 *
 * Event description: When the user clicks on “use another account” in the popup of “account already connect”
 *
 * @param {onBoardingClickUseAnotherAccountPopupParams} params - The parameters for this event
 * @property {string} channel - ebay/amazon
 * @return {LogObject<onBoardingClickUseAnotherAccountPopupParams>} LogObject<onBoardingClickUseAnotherAccountPopupParams>
 */
export function onBoardingClickUseAnotherAccountPopup(params) {
    return {
        evid: 130,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'googleShoppingListProductsPopover' event (evid: 131)
 *
 * Event description: Upon completion of site requirements, a popover appears to suggest the seller list their first product on Google Merchant Center
 *
 * @param {googleShoppingListProductsPopoverParams} params - The parameters for this event
 * @property {GUID} msid - msid
 * @property {GUID} uuid - uuid
 * @property {string} channel - Google shopping
 * @return {LogObject<googleShoppingListProductsPopoverParams>} LogObject<googleShoppingListProductsPopoverParams>
 */
export function googleShoppingListProductsPopover(params) {
    return {
        evid: 131,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectSalesChannelOnHomeScreenPageSrc101Evid132' event (evid: 132)
 *
 * Event description: User clicks on a specific sales channel on a Home Screen Page, section built by Wix
 *
 * @param {selectSalesChannelOnHomeScreenPageSrc101Evid132Params} params - The parameters for this event
 * @property {string} channel - selected channel
 * @return {LogObject<selectSalesChannelOnHomeScreenPageSrc101Evid132Params>} LogObject<selectSalesChannelOnHomeScreenPageSrc101Evid132Params>
 */
export function selectSalesChannelOnHomeScreenPageSrc101Evid132(params) {
    return {
        evid: 132,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'actionsInGoogleAccountAccessSrc101Evid133' event (evid: 133)
 *
 * Event description: User's actions in Google Account Access Modal (adding, editing and removing accounts)
 *
 * @param {actionsInGoogleAccountAccessSrc101Evid133Params} params - The parameters for this event
 * @property {string} view - screen user interacts with
 * @property {string} action - user's exact action
 * @property {string} account_roles - list of account roles separated by comma
 * @return {LogObject<actionsInGoogleAccountAccessSrc101Evid133Params>} LogObject<actionsInGoogleAccountAccessSrc101Evid133Params>
 */
export function actionsInGoogleAccountAccessSrc101Evid133(params) {
    return {
        evid: 133,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'googleAccountAccessChangesAppliedSrc101Evid134' event (evid: 134)
 *
 * Event description: Changes in Google Account Access Modal applied (adding, editing and removing accounts)
 *
 * @param {googleAccountAccessChangesAppliedSrc101Evid134Params} params - The parameters for this event
 * @property {string} change - added / updated / removed
 * @return {LogObject<googleAccountAccessChangesAppliedSrc101Evid134Params>} LogObject<googleAccountAccessChangesAppliedSrc101Evid134Params>
 */
export function googleAccountAccessChangesAppliedSrc101Evid134(params) {
    return {
        evid: 134,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickContinueToReturnPolicies' event (evid: 14)
 *
 * Event description: whenever user sees an error message
 *
 * @param {onBoardingClickContinueToReturnPoliciesParams} params - The parameters for this event
 * @property {string} stage - origin , where error happened: location / payment /productPage/ shop setting / eBayShop/Account setup
 * @property {string} channel - ebay/Google shopping
 * @property {string} errorMessage - detailed error message
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {string} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {string} stackTrace - for server events specific line of code, etc
 * @property {boolean} isPremiumEligible - true - if premium package allows using the feature
 * @property {string} errorType - error_type
 * @property {string} errorCode - 404 / 502 / etc
 * @return {LogObject<onBoardingClickContinueToReturnPoliciesParams>} LogObject<onBoardingClickContinueToReturnPoliciesParams>
 */
export function onBoardingClickContinueToReturnPolicies(params) {
    return {
        evid: 14,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorInPublishingProductServer' event (evid: 1400)
 *
 * Event description: When we got an error in publishing product
 *
 * @param {errorInPublishingProductServerParams} params - The parameters for this event
 * @property {string} channel - ebay / amazon / wish/Google shopping
 * @property {string} errorMessage - what was the problem
 * @property {string} uuid - uuid
 * @property {string} product_guid - the relevant product id
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {number} errorCode - error_code
 * @property {string} type - type
 * @return {LogObject<errorInPublishingProductServerParams>} LogObject<errorInPublishingProductServerParams>
 */
export function errorInPublishingProductServer(params) {
    return {
        evid: 1400,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'requirementsCompleted' event (evid: 1401)
 *
 * Event description: when Auth token is failed
 *
 * @param {requirementsCompletedParams} params - The parameters for this event
 * @property {string} channel - ebay / wish / amazon/Google shopping
 * @return {LogObject<requirementsCompletedParams>} LogObject<requirementsCompletedParams>
 */
export function requirementsCompleted(params) {
    return {
        evid: 1401,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickOnPromotionOfferSrc101Evid1402' event (evid: 1402)
 *
 * Event description: When user click on promotion offer in the welcome page
 *
 * @param {onBoardingClickOnPromotionOfferSrc101Evid1402Params} params - The parameters for this event
 * @property {string} channel - instagram / facebook / ebay / amazon/Google shopping
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<onBoardingClickOnPromotionOfferSrc101Evid1402Params>} LogObject<onBoardingClickOnPromotionOfferSrc101Evid1402Params>
 */
export function onBoardingClickOnPromotionOfferSrc101Evid1402(params) {
    return {
        evid: 1402,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickBackInAccountSetup' event (evid: 15)
 *
 * Event description: When user clicks 'Back' in account set up
 *
 * @param {onBoardingClickBackInAccountSetupParams} params - The parameters for this event
 * @property {string} origin - shipping / return policies
 * @property {GUID} storeId - store_id
 * @return {LogObject<onBoardingClickBackInAccountSetupParams>} LogObject<onBoardingClickBackInAccountSetupParams>
 */
export function onBoardingClickBackInAccountSetup(params) {
    return {
        evid: 15,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'googleEmailAccountConnected' event (evid: 1501)
 *
 * Event description: When google email account connected successfully (not must have step). Will be sent when a Gmail has been authenticated as part of connecting an existing account
 *
 * @param {googleEmailAccountConnectedParams} params - The parameters for this event
 * @property {string} channel - google
 * @return {LogObject<googleEmailAccountConnectedParams>} LogObject<googleEmailAccountConnectedParams>
 */
export function googleEmailAccountConnected(params) {
    return {
        evid: 1501,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickCompleteSetUp' event (evid: 16)
 *
 * Event description: When user clicks 'Complete set up' in account set up
 *
 * @param {onBoardingClickCompleteSetUpParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} channel - ebay
 * @return {LogObject<onBoardingClickCompleteSetUpParams>} LogObject<onBoardingClickCompleteSetUpParams>
 */
export function onBoardingClickCompleteSetUp(params) {
    return {
        evid: 16,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'catalogFeedIsLoaded' event (evid: 1600)
 *
 * Event description: when user calls it to get a copy of the catalog feed, or when marketplace  call it regularly to process updates. Valid for FB ,tiktok  GS. fully implemented on the 04.10 only. this bi event can be used as 'ready to publish'. It is sent every day from FB\tiktok\google (each msid will keep getting it several times)
 *
 * @param {catalogFeedIsLoadedParams} params - The parameters for this event
 * @property {string} channel - facebook / Google shopping / tiktok
 * @property {string} user_agent - user_agent
 * @property {string} feedType - xml / tsv
 * @property {GUID} msid - The MetaSiteId for the given catalog
 * @return {LogObject<catalogFeedIsLoadedParams>} LogObject<catalogFeedIsLoadedParams>
 */
export function catalogFeedIsLoaded(params) {
    return {
        evid: 1600,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingChangeTaxPreferences' event (evid: 17)
 *
 * Event description: When user chooses tax preference in account set up / shop settings
 *
 * @param {onBoardingChangeTaxPreferencesParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - onboarding / settings
 * @property {string} value - ebay tax table / don't apply tax
 * @return {LogObject<onBoardingChangeTaxPreferencesParams>} LogObject<onBoardingChangeTaxPreferencesParams>
 */
export function onBoardingChangeTaxPreferences(params) {
    return {
        evid: 17,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'issueInAccount' event (evid: 1702)
 *
 * Event description: Sent every time the account issues list is loaded (on dashboard load). When issue is happening on an account level.
 *
 * @param {issueInAccountParams} params - The parameters for this event
 * @property {string} issue - Error detail
 * @property {string} channel - google
 * @return {LogObject<issueInAccountParams>} LogObject<issueInAccountParams>
 */
export function issueInAccount(params) {
    return {
        evid: 1702,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addUpdateTheGmailAccount' event (evid: 1703)
 *
 * Event description: when the user Add/Update the gmail account he wants to access the sub-account with (From Settings when an email has been added/replaced)
 *
 * @param {addUpdateTheGmailAccountParams} params - The parameters for this event
 * @property {string} action - "user-added" or "user-replaced"
 * @property {string} channel - Google
 * @return {LogObject<addUpdateTheGmailAccountParams>} LogObject<addUpdateTheGmailAccountParams>
 */
export function addUpdateTheGmailAccount(params) {
    return {
        evid: 1703,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingEnableDisableHandlingTime' event (evid: 18)
 *
 * Event description: When user clicks Add / Save shipping service in one of the modals
 *
 * @param {shippingEnableDisableHandlingTimeParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} status - true / false
 * @property {string} type - automatically restock inventory / end item if product deleted / automatically end listing when out of stock
 * @return {LogObject<shippingEnableDisableHandlingTimeParams>} LogObject<shippingEnableDisableHandlingTimeParams>
 */
export function shippingEnableDisableHandlingTime(params) {
    return {
        evid: 18,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingEnableDisableReturnOption' event (evid: 19)
 *
 * Event description: When user enables / disables return option in account set up
 *
 * @param {onBoardingEnableDisableReturnOptionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} status - true / false
 * @property {string} type - domestic / international
 * @return {LogObject<onBoardingEnableDisableReturnOptionParams>} LogObject<onBoardingEnableDisableReturnOptionParams>
 */
export function onBoardingEnableDisableReturnOption(params) {
    return {
        evid: 19,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingModalStartLoad' event (evid: 2)
 *
 * Event description: When one of the on-boarding modal start load
 *
 * @param {onBoardingModalStartLoadParams} params - The parameters for this event
 * @property {string} name - wixPermission / FBLogin / FBPermission / PagesPicker  / FBMerchantAgreement /WorkingOnYourFBStore / YourFBShopIsReady / ConnecteBayAccount / eBaySignIn / DisconnecteBayAccount
 * @property {string} channel - channel
 * @property {GUID} storeId - store_id
 * @return {LogObject<onBoardingModalStartLoadParams>} LogObject<onBoardingModalStartLoadParams>
 */
export function onBoardingModalStartLoad(params) {
    return {
        evid: 2,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickManageEBaySalesTaxes' event (evid: 20)
 *
 * Event description: When user clicks on 'manage eBay sales taxes' in account set up / shop settings
 *
 * @param {clickManageEBaySalesTaxesParams} params - The parameters for this event
 * @property {string} origin - onboarding / settings
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickManageEBaySalesTaxesParams>} LogObject<clickManageEBaySalesTaxesParams>
 */
export function clickManageEBaySalesTaxes(params) {
    return {
        evid: 20,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promotionalAssetDisplayToUser' event (evid: 204)
 *
 * Event description: generic event for promotional assets shown to user (dealer or in-house developed assets)
 *
 * @param {promotionalAssetDisplayToUserParams} params - The parameters for this event
 * @property {string} cta_type - link , button
 * @property {string} name - name of the asset
 * @property {GUID} storeId - store_id
 * @property {string} ctaType - link , button
 * @property {string} origin - the page name
 * @property {string} content - content of the asset
 * @property {string} type - asset type (banner,light-box...)
 * @return {LogObject<promotionalAssetDisplayToUserParams>} LogObject<promotionalAssetDisplayToUserParams>
 */
export function promotionalAssetDisplayToUser(params) {
    return {
        evid: 204,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickVisitFb' event (evid: 21)
 *
 * Event description: When user click to visit his FB shop or specific FB product (open in new tab)
 *
 * @param {clickVisitFbParams} params - The parameters for this event
 * @property {string} target - Shop / product
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickVisitFbParams>} LogObject<clickVisitFbParams>
 */
export function clickVisitFb(params) {
    return {
        evid: 21,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickDisconnectAccount' event (evid: 22)
 *
 * Event description: click disconnect account in the confirmation modal
 *
 * @param {clickDisconnectAccountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickDisconnectAccountParams>} LogObject<clickDisconnectAccountParams>
 */
export function clickDisconnectAccount(params) {
    return {
        evid: 22,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickChangeBusinessPage' event (evid: 23)
 *
 * Event description: click change business page in confirmation modal
 *
 * @param {clickChangeBusinessPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickChangeBusinessPageParams>} LogObject<clickChangeBusinessPageParams>
 */
export function clickChangeBusinessPage(params) {
    return {
        evid: 23,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'publishUnpublishProduct' event (evid: 24)
 *
 * Event description: click to publish/unpublish product as a bulk action or specific product (from the products list)
 *
 * @param {publishUnpublishProductParams} params - The parameters for this event
 * @property {string} productsList - list of items
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @property {string} value - publish / unpublish
 * @return {LogObject<publishUnpublishProductParams>} LogObject<publishUnpublishProductParams>
 */
export function publishUnpublishProduct(params) {
    return {
        evid: 24,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'confirmToUnpublishProducts' event (evid: 25)
 *
 * Event description: click to confirm to unpublish product in the confirmation modal
 *
 * @param {confirmToUnpublishProductsParams} params - The parameters for this event
 * @property {string} channel - google shopping / null for FB
 * @property {string} productsList - list of products
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @return {LogObject<confirmToUnpublishProductsParams>} LogObject<confirmToUnpublishProductsParams>
 */
export function confirmToUnpublishProducts(params) {
    return {
        evid: 25,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promotionalAssetClickOnCta' event (evid: 250)
 *
 * Event description: generic event for promotional assets shown to user, when users click on cta (except close) (dealer or in-house developed assets)
 *
 * @param {promotionalAssetClickOnCtaParams} params - The parameters for this event
 * @property {string} cta_type - link , button
 * @property {string} name - name of the asset
 * @property {GUID} storeId - store_id
 * @property {string} ctaType - link , button
 * @property {string} origin - the page name
 * @property {string} content - content of the asset
 * @property {string} type - asset type (banner,light-box...)
 * @return {LogObject<promotionalAssetClickOnCtaParams>} LogObject<promotionalAssetClickOnCtaParams>
 */
export function promotionalAssetClickOnCta(params) {
    return {
        evid: 250,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideCollection' event (evid: 26)
 *
 * Event description: When user choose to show or hide collection in his FB shop
 *
 * @param {showHideCollectionParams} params - The parameters for this event
 * @property {string} value - hide / show
 * @property {GUID} storeId - store_id
 * @return {LogObject<showHideCollectionParams>} LogObject<showHideCollectionParams>
 */
export function showHideCollection(params) {
    return {
        evid: 26,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnPromoteCard' event (evid: 27)
 *
 * Event description: When user clicks on one of the promote cards
 *
 * @param {clickOnPromoteCardParams} params - The parameters for this event
 * @property {string} name - the card title
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickOnPromoteCardParams>} LogObject<clickOnPromoteCardParams>
 */
export function clickOnPromoteCard(params) {
    return {
        evid: 27,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLearnMore' event (evid: 28)
 *
 * Event description: When user clicks on the Learn More link
 *
 * @param {clickLearnMoreParams} params - The parameters for this event
 * @property {string} channel - wish/Google shopping
 * @property {string} articleUrl - article_url
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - origin
 * @return {LogObject<clickLearnMoreParams>} LogObject<clickLearnMoreParams>
 */
export function clickLearnMore(params) {
    return {
        evid: 28,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickShareOnFacebook' event (evid: 29)
 *
 * Event description: When the user clicks to share a specific product on Facebook
 *
 * @param {clickShareOnFacebookParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} product_guid - shared product
 * @return {LogObject<clickShareOnFacebookParams>} LogObject<clickShareOnFacebookParams>
 */
export function clickShareOnFacebook(params) {
    return {
        evid: 29,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingModalLoadFinished' event (evid: 3)
 *
 * Event description: When one of the on-boarding modal shown to the user
 *
 * @param {onBoardingModalLoadFinishedParams} params - The parameters for this event
 * @property {string} name - wixPermission / FBLogin / FBPermission / PagesPicker  / FBMerchantAgreement /WorkingOnYourFBStore/ YourFBShopIsReady
 * @property {string} channel - Amazon/Ebay/Wish
 * @property {string} state - no business pages / pages picker
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {number} loadingTime - int!!!! (no decimal numbers) - milisec for modal load from start
 * @return {LogObject<onBoardingModalLoadFinishedParams>} LogObject<onBoardingModalLoadFinishedParams>
 */
export function onBoardingModalLoadFinished(params) {
    return {
        evid: 3,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickReviewNow' event (evid: 30)
 *
 * Event description: When user click to review/sync all products again
 *
 * @param {clickReviewNowParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickReviewNowParams>} LogObject<clickReviewNowParams>
 */
export function clickReviewNow(params) {
    return {
        evid: 30,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editProduct' event (evid: 31)
 *
 * Event description: When user click to edit a specific product which was disapproved by facebook/wix review
 *
 * @param {editProductParams} params - The parameters for this event
 * @property {GUID} product_guid - the product that was clicked on
 * @property {GUID} storeId - store_id
 * @return {LogObject<editProductParams>} LogObject<editProductParams>
 */
export function editProduct(params) {
    return {
        evid: 31,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickGoToStoreProducts' event (evid: 32)
 *
 * Event description: When a user clicks to go to products list page when there are no products saved in stores (available on the empty state of the FB shop page)
 *
 * @param {clickGoToStoreProductsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - main cta / toast
 * @return {LogObject<clickGoToStoreProductsParams>} LogObject<clickGoToStoreProductsParams>
 */
export function clickGoToStoreProducts(params) {
    return {
        evid: 32,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'noProductsAvailableToastShown' event (evid: 33)
 *
 * Event description: when the dashboard loaded with all hidden products (empty state of the FB shop page)
 *
 * @param {noProductsAvailableToastShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<noProductsAvailableToastShownParams>} LogObject<noProductsAvailableToastShownParams>
 */
export function noProductsAvailableToastShown(params) {
    return {
        evid: 33,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'amazonClickFindProductVariant' event (evid: 34)
 *
 * Event description: When a clicks on Find / change (matching) product on Product page in amazon (opens search to find ASIN)
 *
 * @param {amazonClickFindProductVariantParams} params - The parameters for this event
 * @property {string} variantId - only for origin = variant
 * @property {string} channel - amazon
 * @property {GUID} product_guid - product id
 * @property {string} origin - productPage/ variantPage
 * @property {string} type - find / change
 * @return {LogObject<amazonClickFindProductVariantParams>} LogObject<amazonClickFindProductVariantParams>
 */
export function amazonClickFindProductVariant(params) {
    return {
        evid: 34,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'amazonSearchResultsShown' event (evid: 35)
 *
 * Event description: When after user typed smth the results of matching Asins shown
 *
 * @param {amazonSearchResultsShownParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} searchQuery - user input in search
 * @property {string} channel - amazon
 * @property {GUID} product_guid - product id
 * @property {string} filtersApplied - true / false
 * @property {number} resultsCount - number of matching asins
 * @return {LogObject<amazonSearchResultsShownParams>} LogObject<amazonSearchResultsShownParams>
 */
export function amazonSearchResultsShown(params) {
    return {
        evid: 35,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'amazonClickCreateNewListing' event (evid: 36)
 *
 * Event description: in search modal user clicks click create new listing (leads to open Amazon in second tab)
 *
 * @param {amazonClickCreateNewListingParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} channel - amazon
 * @property {GUID} product_guid - product id
 * @property {number} resultsCount - number of matching asins
 * @return {LogObject<amazonClickCreateNewListingParams>} LogObject<amazonClickCreateNewListingParams>
 */
export function amazonClickCreateNewListing(params) {
    return {
        evid: 36,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'amazonMatchProductVariantToAsin' event (evid: 37)
 *
 * Event description: user clicks save in search modal to connect product / variant to Amazon asin
 *
 * @param {amazonMatchProductVariantToAsinParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} channel - amazon
 * @property {string} asin - uniq identifier on amazon
 * @property {GUID} product_guid - product id
 * @property {string} asinParrentId - amazon product guid
 * @return {LogObject<amazonMatchProductVariantToAsinParams>} LogObject<amazonMatchProductVariantToAsinParams>
 */
export function amazonMatchProductVariantToAsin(params) {
    return {
        evid: 37,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnOfferVariant' event (evid: 38)
 *
 * Event description: When user clicks on Offer variant in product page with options - opens variantPage (to match it to asin on Amazon)
 *
 * @param {clickOnOfferVariantParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} asinParentId - Amazon Product Id
 * @property {string} channel - amazon
 * @property {string} asin - Amazon asin
 * @property {GUID} product_guid - the chosen product id
 * @property {string} origin - firstVariant / list ???/Manage button
 * @return {LogObject<clickOnOfferVariantParams>} LogObject<clickOnOfferVariantParams>
 */
export function clickOnOfferVariant(params) {
    return {
        evid: 38,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveVariantAmzon' event (evid: 39)
 *
 * Event description: When clicks Save in variantPage (Amazon)
 *
 * @param {clickSaveVariantAmzonParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} channel - amazon
 * @property {boolean} inventoryCustomized - true / false
 * @property {string} asin - asin
 * @property {number} amazonSalePriceLong - multiply by 100 000 , round to INT
 * @property {boolean} priceCustomized - true / false
 * @property {boolean} giftWrap - true / false
 * @property {number} storePriceLong - multiply by 100 000 , round to INT
 * @property {GUID} product_guid - product_guid
 * @property {number} numberOfMatchedVariants - number of matched variants (including current save)
 * @property {boolean} giftMessage - true / false
 * @property {number} storeInventory - store_inventory. Since 10/03/22 this field is different for stores that are tracking their inventory by quantity and by status. Status: 1=in stock, 0=out of stock, Quantity (tracked): new quantity
 * @property {boolean} onSale - true / false
 * @property {string} asinParrentId - amazon product guid
 * @property {boolean} hasAsin - true / false
 * @property {string} fulfilledBy - selfulfill / fba
 * @property {string} condition - new / old..
 * @property {string} origin - variantPage / unsavedModal
 * @property {number} maxOrder - max_order
 * @property {number} amazonInventory - amazon_inventory
 * @property {string} inventoryPolicy - quantity (tracking) / status (not tracking)
 * @property {number} amazonPriceLong - multiply by 100 000 , round to INT
 * @property {number} storeSalePriceLong - multiply by 100 000 , round to INT
 * @property {number} numberOfTotalVariants - total number of variants in product
 * @property {number} handlingTime - handling_time
 * @return {LogObject<clickSaveVariantAmzonParams>} LogObject<clickSaveVariantAmzonParams>
 */
export function clickSaveVariantAmzon(params) {
    return {
        evid: 39,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterInEBayShop' event (evid: 4)
 *
 * Event description: When user clicks on filter published/unpublished/unlinked/unsuccessful in eBayShop/wish page
 *
 * @param {clickOnFilterInEBayShopParams} params - The parameters for this event
 * @property {string} channel - channel
 * @property {boolean} canPublish - true if user did not exceed his limits to publishing product on eBay
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} value - published/unpublished/unlinked/unsuccessful
 * @return {LogObject<clickOnFilterInEBayShopParams>} LogObject<clickOnFilterInEBayShopParams>
 */
export function clickOnFilterInEBayShop(params) {
    return {
        evid: 4,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickPublishUnpublishProducts' event (evid: 40)
 *
 * Event description: When clicks to publish / unpublish product in eBay/amazon/wish shop
 *
 * @param {clickPublishUnpublishProductsParams} params - The parameters for this event
 * @property {string} inventoryValue - inventory_value
 * @property {string} variantsList - variants_list
 * @property {boolean} hasOptions - has_options
 * @property {string} name - name
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - channel
 * @property {string} sku - sku
 * @property {boolean} inventoryCustomized - inventory_customized
 * @property {number} totalVariantsCount - total_variants_count
 * @property {string} totalVariantsList - total_variants_list
 * @property {string} asin - asin
 * @property {number} amazonSalePriceLong - amazon_sale_price_long
 * @property {number} imagesNum - images_num
 * @property {string} description - description
 * @property {string} productsList - list of items
 * @property {string} customizedFields - customized_fields
 * @property {boolean} priceCustomized - price_customized
 * @property {boolean} giftWrap - gift_wrap
 * @property {GUID} uuid - uuid
 * @property {number} storePriceLong - store_price_long
 * @property {string} product_guid - product_guid
 * @property {boolean} giftMessage - gift_message
 * @property {GUID} storeId - store_id
 * @property {number} storeInventory - store_inventory
 * @property {boolean} onSale - on_sale
 * @property {boolean} isInitial - is_initial
 * @property {boolean} contianAdultContent - contian_adult_content
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} fulfilledBy - fulfilled_by
 * @property {string} tagsList - tags_list
 * @property {number} variantsCount - variants_count
 * @property {string} condition - condition
 * @property {string} updatedFields - list of fields changed
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @property {string} origin - Product page/dashboard bulk publish/ dashboard/Variant page (for amazon)/dashboard bulk(google)/list all button(google)
 * @property {string} updatedLogisticFields - updated_logistic_fields
 * @property {string} productAttributes - product_attributes
 * @property {string} shippingsList - shipping_list
 * @property {number} maxOrder - max_order
 * @property {number} wishPriceLong - wish_price_long
 * @property {number} amazonInventory - amazon_inventory
 * @property {string} inventoryPolicy - inventory_policy
 * @property {number} amazonPriceLong - amazon_price_long
 * @property {number} storeSalePriceLong - store_sale_price_long
 * @property {string} value - publish / unpublish/link/unlink/save draft
 * @property {number} handlingTime - handling_time
 * @return {LogObject<clickPublishUnpublishProductsParams>} LogObject<clickPublishUnpublishProductsParams>
 */
export function clickPublishUnpublishProducts(params) {
    return {
        evid: 40,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewEBayShopSrc101Evid41' event (evid: 41)
 *
 * Event description: When a user clicks on 'View on eBay'/Amazon  in published product settings (3 dots) / dashboard
 *
 * @param {clickViewEBayShopSrc101Evid41Params} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} channel - ebay
 * @property {string} asin - asin
 * @property {GUID} product_guid - the relevant product id
 * @property {string} asinParrentId - asin_parrent_id
 * @property {string} origin - origin
 * @return {LogObject<clickViewEBayShopSrc101Evid41Params>} LogObject<clickViewEBayShopSrc101Evid41Params>
 */
export function clickViewEBayShopSrc101Evid41(params) {
    return {
        evid: 41,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickEditProduct' event (evid: 42)
 *
 * Event description: When user clicks to edit product in eBay/amazon/wish/google shopping Shop
 *
 * @param {clickEditProductParams} params - The parameters for this event
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - channel
 * @property {string} state - state
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} product_guid - the chosen product id
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - firstProduct / arrow / line / link/dashboard /dashboard tooltip/ product page
 * @property {string} type - type
 * @return {LogObject<clickEditProductParams>} LogObject<clickEditProductParams>
 */
export function clickEditProduct(params) {
    return {
        evid: 42,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveProduct' event (evid: 43)
 *
 * Event description: When a user clicks on 'publish first product' in the dashboard after finishing the onboarding
 *
 * @param {clickSaveProductParams} params - The parameters for this event
 * @property {GUID} product_guid - relevant product guid
 * @return {LogObject<clickSaveProductParams>} LogObject<clickSaveProductParams>
 */
export function clickSaveProduct(params) {
    return {
        evid: 43,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'enableDisableEditProductDetailsForEBay' event (evid: 44)
 *
 * Event description: When user clicks to edit product in eBay Shop
 *
 * @param {enableDisableEditProductDetailsForEBayParams} params - The parameters for this event
 * @property {GUID} product_guid - the chosen product
 * @property {GUID} storeId - store_id
 * @property {boolean} status - true / false
 * @property {string} type - image / name / price
 * @return {LogObject<enableDisableEditProductDetailsForEBayParams>} LogObject<enableDisableEditProductDetailsForEBayParams>
 */
export function enableDisableEditProductDetailsForEBay(params) {
    return {
        evid: 44,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddSaveShippingService' event (evid: 45)
 *
 * Event description: When user clicks Add/ Save Shipping Service in one of the modals
 *
 * @param {clickAddSaveShippingServiceParams} params - The parameters for this event
 * @property {boolean} isFree - true / false
 * @property {GUID} storeId - store_id
 * @property {string} service - chosen shipping service (e.g. FedEx international priority)
 * @property {string} origin - onboarding / settings
 * @property {string} type - domestic / international
 * @return {LogObject<clickAddSaveShippingServiceParams>} LogObject<clickAddSaveShippingServiceParams>
 */
export function clickAddSaveShippingService(params) {
    return {
        evid: 45,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeMaxQuantityPerProductVariant' event (evid: 46)
 *
 * Event description: When a user changes the max quantity per product variant in the eBay shop settings
 *
 * @param {changeMaxQuantityPerProductVariantParams} params - The parameters for this event
 * @property {string} newValue - the new number the user enters
 * @property {GUID} storeId - store_id
 * @return {LogObject<changeMaxQuantityPerProductVariantParams>} LogObject<changeMaxQuantityPerProductVariantParams>
 */
export function changeMaxQuantityPerProductVariant(params) {
    return {
        evid: 46,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDisconnectAccount' event (evid: 47)
 *
 * Event description: Click to disconnect account in modal (confirming disconnect, after event 80)
 *
 * @param {clickToDisconnectAccountParams} params - The parameters for this event
 * @property {string} channel - ebay/amazon/wish/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - Onboarding/settings
 * @property {string} accountType - account_type
 * @property {string} type - type
 * @property {string} value - value
 * @return {LogObject<clickToDisconnectAccountParams>} LogObject<clickToDisconnectAccountParams>
 */
export function clickToDisconnectAccount(params) {
    return {
        evid: 47,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeShippingHandlingTime' event (evid: 48)
 *
 * Event description: When user chooses the shipping handling time from drop down in account set up / shop settings
 *
 * @param {changeShippingHandlingTimeParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - onboarding / settings
 * @property {string} value - chosen value from dropdown
 * @return {LogObject<changeShippingHandlingTimeParams>} LogObject<changeShippingHandlingTimeParams>
 */
export function changeShippingHandlingTime(params) {
    return {
        evid: 48,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeShippingCalculation' event (evid: 49)
 *
 * Event description: When user chooses the shipping calculation method from dropdown in account set up / shop settings
 *
 * @param {changeShippingCalculationParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - onboarding / settings
 * @property {string} type - domestic / international
 * @property {string} value - flat rate / calculated
 * @return {LogObject<changeShippingCalculationParams>} LogObject<changeShippingCalculationParams>
 */
export function changeShippingCalculation(params) {
    return {
        evid: 49,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLinkToEBayListing' event (evid: 5)
 *
 * Event description: user clicks in 3dots menu of Product Page "Link to eBay /Amazon listing"
 *
 * @param {clickLinkToEBayListingParams} params - The parameters for this event
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - ebay
 * @property {boolean} canPublish - true if user did not exceed his limits to publish
 * @property {string} asin - asin
 * @property {string} product_guid - relevant product id (can be eBay product Id in case of unlinked product - NOT guid)
 * @property {boolean} isPremiumEligible - true if the premium package allows to publish
 * @property {string} origin - 3dots / choose / relink/Link Variant
 * @return {LogObject<clickLinkToEBayListingParams>} LogObject<clickLinkToEBayListingParams>
 */
export function clickLinkToEBayListing(params) {
    return {
        evid: 5,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'igClickConnectInstagram' event (evid: 50)
 *
 * Event description: When the user click to connect Instagram shop
 *
 * @param {igClickConnectInstagramParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<igClickConnectInstagramParams>} LogObject<igClickConnectInstagramParams>
 */
export function igClickConnectInstagram(params) {
    return {
        evid: 50,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'igClickManageFbShop' event (evid: 51)
 *
 * Event description: When user click to manage FB shop from the Instagram Tab
 *
 * @param {igClickManageFbShopParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - main page/ set up fb shop first modal
 * @return {LogObject<igClickManageFbShopParams>} LogObject<igClickManageFbShopParams>
 */
export function igClickManageFbShop(params) {
    return {
        evid: 51,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'igClickViewVideoLearnMore' event (evid: 52)
 *
 * Event description: When the user clicks to view the learn more video
 *
 * @param {igClickViewVideoLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<igClickViewVideoLearnMoreParams>} LogObject<igClickViewVideoLearnMoreParams>
 */
export function igClickViewVideoLearnMore(params) {
    return {
        evid: 52,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'igClickToChangeToBusinessAccount' event (evid: 53)
 *
 * Event description: when the user doesn't have Instagram business account he sees the card -> the event sent when he clicks the button
 *
 * @param {igClickToChangeToBusinessAccountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<igClickToChangeToBusinessAccountParams>} LogObject<igClickToChangeToBusinessAccountParams>
 */
export function igClickToChangeToBusinessAccount(params) {
    return {
        evid: 53,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewProductOnWix' event (evid: 54)
 *
 * Event description: When a user clicks on 'View on Wix"  in product page / dashboard
 *
 * @param {clickViewProductOnWixParams} params - The parameters for this event
 * @property {string} channel - wish/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} product_guid - the relevant product id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - origin
 * @return {LogObject<clickViewProductOnWixParams>} LogObject<clickViewProductOnWixParams>
 */
export function clickViewProductOnWix(params) {
    return {
        evid: 54,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickApplyProductFulfillment' event (evid: 55)
 *
 * Event description: When a user clicks to apply products fulfillment in dashboard
 *
 * @param {clickApplyProductFulfillmentParams} params - The parameters for this event
 * @property {string} channel - amazon
 * @property {string} productsList - list of product ids
 * @property {string} fulfilledBy - selffulfil / fba
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @property {number} handlingTime - handling_time
 * @return {LogObject<clickApplyProductFulfillmentParams>} LogObject<clickApplyProductFulfillmentParams>
 */
export function clickApplyProductFulfillment(params) {
    return {
        evid: 55,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveInventorySyncSettings' event (evid: 56)
 *
 * Event description: when user clicks sync save in Inventory Settings. NOT RELEVANT FOR WISH
 *
 * @param {saveInventorySyncSettingsParams} params - The parameters for this event
 * @property {string} channel - wish
 * @property {number} restockAt - when quantity reaches
 * @property {number} variantLimits - max amount of each variant that can be synced to amazon
 * @property {boolean} endListingOnHide - true/false
 * @property {GUID} uuid - uuid
 * @property {number} restockTo - restock quantity to
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} fulfilledBy - selffulfil / fba
 * @property {string} fulfillmentLatency - only for fba?
 * @property {boolean} autoRestock - true/false
 * @property {boolean} endListingOnOutOfStock - true/false
 * @property {string} shippingSpeed - only for fba?
 * @property {boolean} endListingOnDelete - true/false
 * @property {boolean} isLimitInventory - IsLimitInventory
 * @return {LogObject<saveInventorySyncSettingsParams>} LogObject<saveInventorySyncSettingsParams>
 */
export function saveInventorySyncSettings(params) {
    return {
        evid: 56,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'amazonCloseSearchModal' event (evid: 57)
 *
 * Event description: user clicks cancel / closes search modal without  connecting product / variant to Amazon asin
 *
 * @param {amazonCloseSearchModalParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} channel - channel
 * @property {GUID} product_guid - product id
 * @property {string} value - close/cancel
 * @return {LogObject<amazonCloseSearchModalParams>} LogObject<amazonCloseSearchModalParams>
 */
export function amazonCloseSearchModal(params) {
    return {
        evid: 57,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductInUnlinkedProductModal' event (evid: 58)
 *
 * Event description: When a user clicks on product in unlinked product modal (does not leads to link)
 *
 * @param {clickOnProductInUnlinkedProductModalParams} params - The parameters for this event
 * @property {string} variantId - Selected Variant id (wix variant id). Will be Null when its product and not variant id
 * @property {string} asinParentId - Amazon Product Id
 * @property {string} channel - amazon
 * @property {string} asin - Amazon asin
 * @property {string} product_guid - the relevant product id (Wix)
 * @return {LogObject<clickOnProductInUnlinkedProductModalParams>} LogObject<clickOnProductInUnlinkedProductModalParams>
 */
export function clickOnProductInUnlinkedProductModal(params) {
    return {
        evid: 58,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOpenPageInNewTab' event (evid: 59)
 *
 * Event description: When user gets empty page after click on ebay / amazon and clicks on l"Open Page in New Tab" to see the channe
 *
 * @param {clickOpenPageInNewTabParams} params - The parameters for this event
 * @property {string} channel - ebay / amazon
 * @return {LogObject<clickOpenPageInNewTabParams>} LogObject<clickOpenPageInNewTabParams>
 */
export function clickOpenPageInNewTab(params) {
    return {
        evid: 59,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSyncAccount' event (evid: 6)
 *
 * Event description: when user clicks sync account in Settings
 *
 * @param {clickSyncAccountParams} params - The parameters for this event
 * @property {string} channel - amazon
 * @return {LogObject<clickSyncAccountParams>} LogObject<clickSyncAccountParams>
 */
export function clickSyncAccount(params) {
    return {
        evid: 6,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickRemoveShippingService' event (evid: 60)
 *
 * Event description: When a user clicks to remove shipping service
 *
 * @param {clickRemoveShippingServiceParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} service - chosen shipping service (e.g. FedEx international priority)
 * @property {string} origin - onboarding / settings
 * @property {string} type - domestic / international
 * @return {LogObject<clickRemoveShippingServiceParams>} LogObject<clickRemoveShippingServiceParams>
 */
export function clickRemoveShippingService(params) {
    return {
        evid: 60,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'applyExcludeShippingLocations' event (evid: 61)
 *
 * Event description: When a user clicks 'Apply' in the 'Excluded shipping locations' modal
 *
 * @param {applyExcludeShippingLocationsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - onboarding / settings
 * @property {string} type - domestic / international
 * @property {string} value - excluded locations
 * @return {LogObject<applyExcludeShippingLocationsParams>} LogObject<applyExcludeShippingLocationsParams>
 */
export function applyExcludeShippingLocations(params) {
    return {
        evid: 61,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickGoToStoresProducts' event (evid: 62)
 *
 * Event description: When a user clicks on 'Go to stores products' in the empty eBay/amazon Shop dashboard. For wish: click on 'Add product' in the shop page dashboard
 *
 * @param {clickGoToStoresProductsParams} params - The parameters for this event
 * @property {string} channel - eBay/amazon/wish
 * @property {GUID} uuid - uuid
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - origin
 * @return {LogObject<clickGoToStoresProductsParams>} LogObject<clickGoToStoresProductsParams>
 */
export function clickGoToStoresProducts(params) {
    return {
        evid: 62,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToOpenShopSettings' event (evid: 63)
 *
 * Event description: When a user clicks to open shop settings in the eBay/amazon/wish Shop dashboard
 *
 * @param {clickToOpenShopSettingsParams} params - The parameters for this event
 * @property {string} channel - ebay/amazon/wish
 * @property {string} state - state
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @return {LogObject<clickToOpenShopSettingsParams>} LogObject<clickToOpenShopSettingsParams>
 */
export function clickToOpenShopSettings(params) {
    return {
        evid: 63,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToEditProductSpecifics' event (evid: 64)
 *
 * Event description: When a user clicks on one of the product action (e.g. set pricing, edit inventory etc,) in the eBay Shop dashboard / product page
 *
 * @param {clickToEditProductSpecificsParams} params - The parameters for this event
 * @property {string} channel - ebay
 * @property {string} productsList - products_list
 * @property {string} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - items_count
 * @property {string} origin - dashboard / product page
 * @property {string} type - pricing / inventory / policy / category
 * @return {LogObject<clickToEditProductSpecificsParams>} LogObject<clickToEditProductSpecificsParams>
 */
export function clickToEditProductSpecifics(params) {
    return {
        evid: 64,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToCreateNewPolicy' event (evid: 65)
 *
 * Event description: When a user clicks to create a new policy (payment/shipping/return) in the eBay shop settings
 *
 * @param {clickToCreateNewPolicyParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} origin - settings / product page
 * @property {string} type - shipping / return / payment
 * @return {LogObject<clickToCreateNewPolicyParams>} LogObject<clickToCreateNewPolicyParams>
 */
export function clickToCreateNewPolicy(params) {
    return {
        evid: 65,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSavePolicy' event (evid: 66)
 *
 * Event description: When a user clicks to save policy (payment/shipping/return) in the eBay shop settings
 *
 * @param {clickSavePolicyParams} params - The parameters for this event
 * @property {string} type - shipping / return / payment
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickSavePolicyParams>} LogObject<clickSavePolicyParams>
 */
export function clickSavePolicy(params) {
    return {
        evid: 66,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDuplicatePolicy' event (evid: 67)
 *
 * Event description: When a user clicks to duplicate a policy (payment/shipping/return) in the eBay shop settings
 *
 * @param {clickToDuplicatePolicyParams} params - The parameters for this event
 * @property {string} type - shipping / return / payment
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickToDuplicatePolicyParams>} LogObject<clickToDuplicatePolicyParams>
 */
export function clickToDuplicatePolicy(params) {
    return {
        evid: 67,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCustomizeProductForEBay' event (evid: 68)
 *
 * Event description: When a user turns 'customize fro eBay' toggle on/off in the product page.
 *
 * @param {clickCustomizeProductForEBayParams} params - The parameters for this event
 * @property {GUID} product_guid - product id
 * @property {boolean} status - true / false
 * @property {string} category - name / price / inventory / policy / category
 * @return {LogObject<clickCustomizeProductForEBayParams>} LogObject<clickCustomizeProductForEBayParams>
 */
export function clickCustomizeProductForEBay(params) {
    return {
        evid: 68,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChangeBestOfferSettings' event (evid: 69)
 *
 * Event description: When a user clicks to change the 'best offer' settings in the product page.
 *
 * @param {clickToChangeBestOfferSettingsParams} params - The parameters for this event
 * @property {GUID} product_guid - relevant product id
 * @property {GUID} storeId - store_id
 * @property {string} value - accept / dont accept
 * @return {LogObject<clickToChangeBestOfferSettingsParams>} LogObject<clickToChangeBestOfferSettingsParams>
 */
export function clickToChangeBestOfferSettings(params) {
    return {
        evid: 69,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingMerchantAccountRequestedPopupClicked' event (evid: 7)
 *
 * Event description: When user click on the Merchant account requested popup. NOT RELEVANT FOR WISH
 *
 * @param {onBoardingMerchantAccountRequestedPopupClickedParams} params - The parameters for this event
 * @property {string} channel - Amazon/Ebay/Wish
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} selection - x/cancel/got it
 * @return {LogObject<onBoardingMerchantAccountRequestedPopupClickedParams>} LogObject<onBoardingMerchantAccountRequestedPopupClickedParams>
 */
export function onBoardingMerchantAccountRequestedPopupClicked(params) {
    return {
        evid: 7,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveProductSrc101Evid70' event (evid: 70)
 *
 * Event description: in 3dots menu in product page  / in upgrade modal of Advanced packages user clicks "Save as draft"
 *
 * @param {clickSaveProductSrc101Evid70Params} params - The parameters for this event
 * @property {boolean} hasOptions - has_options
 * @property {string} channel - wish
 * @property {boolean} canPublish - true if user did not exceed his limits to publish
 * @property {GUID} uuid - uuid
 * @property {string} product_guid - relevant product id
 * @property {GUID} storeId - store_id
 * @property {boolean} isPublished - is_published
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} origin - Add Product Button/three dots
 * @return {LogObject<clickSaveProductSrc101Evid70Params>} LogObject<clickSaveProductSrc101Evid70Params>
 */
export function clickSaveProductSrc101Evid70(params) {
    return {
        evid: 70,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToConnectWixProductToEBayProduct' event (evid: 71)
 *
 * Event description: When a user clicks to connect Wix product to eBay/amazon product
 *
 * @param {clickToConnectWixProductToEBayProductParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} asinParentId - asin_parent_id
 * @property {string} channel - channel
 * @property {string} asin - asin
 * @property {string} product_guid - the relevant product id (Wix)
 * @property {GUID} storeId - store_id
 * @property {string} origin - modal / approve match
 * @return {LogObject<clickToConnectWixProductToEBayProductParams>} LogObject<clickToConnectWixProductToEBayProductParams>
 */
export function clickToConnectWixProductToEBayProduct(params) {
    return {
        evid: 71,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickApplyProductPricing' event (evid: 72)
 *
 * Event description: When a user clicks to apply products pricing in dashboard
 *
 * @param {clickApplyProductPricingParams} params - The parameters for this event
 * @property {string} channel - ebay
 * @property {string} productsList - list of product ids
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @return {LogObject<clickApplyProductPricingParams>} LogObject<clickApplyProductPricingParams>
 */
export function clickApplyProductPricing(params) {
    return {
        evid: 72,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickApplyProductInventory' event (evid: 73)
 *
 * Event description: When a user clicks to apply products inventory in dashboard
 *
 * @param {clickApplyProductInventoryParams} params - The parameters for this event
 * @property {string} channel - ebay
 * @property {string} productsList - list of product ids
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @return {LogObject<clickApplyProductInventoryParams>} LogObject<clickApplyProductInventoryParams>
 */
export function clickApplyProductInventory(params) {
    return {
        evid: 73,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickApplyProductPolicies' event (evid: 74)
 *
 * Event description: When a user clicks to apply products policies in dashboard
 *
 * @param {clickApplyProductPoliciesParams} params - The parameters for this event
 * @property {string} productsList - list of product ids
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @property {string} type - category /..
 * @return {LogObject<clickApplyProductPoliciesParams>} LogObject<clickApplyProductPoliciesParams>
 */
export function clickApplyProductPolicies(params) {
    return {
        evid: 74,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToSyncAccount' event (evid: 75)
 *
 * Event description: When a user clicks to sync account in eBay shop settings
 *
 * @param {clickToSyncAccountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @return {LogObject<clickToSyncAccountParams>} LogObject<clickToSyncAccountParams>
 */
export function clickToSyncAccount(params) {
    return {
        evid: 75,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveProductCategory' event (evid: 76)
 *
 * Event description: When a user clicks to save product category
 *
 * @param {clickSaveProductCategoryParams} params - The parameters for this event
 * @property {string} productsList - list of product ids
 * @property {GUID} storeId - store_id
 * @property {number} numOfItems - 1 or more (relevant for bulk actions)
 * @property {string} category - chosen category name
 * @return {LogObject<clickSaveProductCategoryParams>} LogObject<clickSaveProductCategoryParams>
 */
export function clickSaveProductCategory(params) {
    return {
        evid: 76,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewEBayShop' event (evid: 77)
 *
 * Event description: When a user clicks on 'View Shop' in the dashboard. for google shopping is to click on 'go to merchant center account'
 *
 * @param {clickViewEBayShopParams} params - The parameters for this event
 * @property {string} channel - wish/Google shopping
 * @property {string} state - state
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - origin
 * @return {LogObject<clickViewEBayShopParams>} LogObject<clickViewEBayShopParams>
 */
export function clickViewEBayShop(params) {
    return {
        evid: 77,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnActionInPublishProductModal' event (evid: 78)
 *
 * Event description: When clicks on accept & Publish / cancel in publish product in modal eBay/amazon/wish shop
 *
 * @param {clickOnActionInPublishProductModalParams} params - The parameters for this event
 * @property {string} channel - wish/ebay/amazon
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - product_guid
 * @property {GUID} storeId - store_id
 * @property {boolean} dontShow - true if checkbox checked
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} value - accept / cancel /close
 * @return {LogObject<clickOnActionInPublishProductModalParams>} LogObject<clickOnActionInPublishProductModalParams>
 */
export function clickOnActionInPublishProductModal(params) {
    return {
        evid: 78,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToUnlinkProductVariant' event (evid: 79)
 *
 * Event description: When a user clicks to unlink product/variant to amazon product
 *
 * @param {clickToUnlinkProductVariantParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {string} asinParentId - amazon product guid
 * @property {string} channel - amazon
 * @property {string} asin - amazon asin
 * @property {GUID} product_guid - the relevant product id (Wix)
 * @property {string} origin - Unlink button
 * @return {LogObject<clickToUnlinkProductVariantParams>} LogObject<clickToUnlinkProductVariantParams>
 */
export function clickToUnlinkProductVariant(params) {
    return {
        evid: 79,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClicksOnUpgrade' event (evid: 8)
 *
 * Event description: When non-premium user clicks on “upgrade” button
 *
 * @param {userClicksOnUpgradeParams} params - The parameters for this event
 * @property {string} channel - Amazon/Ebay/Wish/Google shopping/Tiktok
 * @return {LogObject<userClicksOnUpgradeParams>} LogObject<userClicksOnUpgradeParams>
 */
export function userClicksOnUpgrade(params) {
    return {
        evid: 8,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'onBoardingClickToDisconnectAccount' event (evid: 80)
 *
 * Event description: when the user clicks to disconnect option(first intent)
 *
 * @param {onBoardingClickToDisconnectAccountParams} params - The parameters for this event
 * @property {string} channel - ebay/wish/amazon/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - onboarding/settings
 * @property {string} accountType - account_type
 * @return {LogObject<onBoardingClickToDisconnectAccountParams>} LogObject<onBoardingClickToDisconnectAccountParams>
 */
export function onBoardingClickToDisconnectAccount(params) {
    return {
        evid: 80,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'disconnectAccountPopupClosed' event (evid: 81)
 *
 * Event description: when user close Disconnect Account Popup(cancel disconnect)
 *
 * @param {disconnectAccountPopupClosedParams} params - The parameters for this event
 * @property {string} channel - ebay/wish/Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} selection - x/cancel
 * @property {string} origin - Onboarding/settings
 * @property {string} accountType - account_type
 * @return {LogObject<disconnectAccountPopupClosedParams>} LogObject<disconnectAccountPopupClosedParams>
 */
export function disconnectAccountPopupClosed(params) {
    return {
        evid: 81,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addShippingDestinationFromWixClicked' event (evid: 82)
 *
 * Event description: Add shipping destination from Wix clicked.
 *
 * @param {addShippingDestinationFromWixClickedParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {string} origin - origin
 * @return {LogObject<addShippingDestinationFromWixClickedParams>} LogObject<addShippingDestinationFromWixClickedParams>
 */
export function addShippingDestinationFromWixClicked(params) {
    return {
        evid: 82,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingsSaveClicked' event (evid: 83)
 *
 * Event description: Send in every time when user save changes in settings for Shipping And Tags
 *
 * @param {settingsSaveClickedParams} params - The parameters for this event
 * @property {string} channel - ebay/wish/amazon
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} section - ags/shipping
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {boolean} isChanged - Is user changed something
 * @property {string} inputValues - In a JSON  add info about imputed values, for example:[{ ‘Destination’:’USA’, ‘Shipping price’:’1.2’ ‘Delivery Day’:’3’, },{...}], [{‘Tags’:’Dogs’,’Out of stock’}]
 * @property {number} inputValuesCount - How many destinations/tags user input
 * @return {LogObject<settingsSaveClickedParams>} LogObject<settingsSaveClickedParams>
 */
export function settingsSaveClicked(params) {
    return {
        evid: 83,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dataLoadedInPage' event (evid: 84)
 *
 * Event description: When content in page loaded - for example Product page
 *
 * @param {dataLoadedInPageParams} params - The parameters for this event
 * @property {string} channel - Facebook / Instagram / ebay/ amazon
 * @property {string} state - json of published / unpublished / unsuccessful / unlinked products for eBayShop page
 * @property {GUID} product_guid - only for product page
 * @property {boolean} isPremiumEligible - true if premium package allows using feature.if the user is connected to premium unlimited VIP - true/false
 * @property {string} accountStatus - Active / In review / Rejected
 * @property {string} pageName - welcome / manage / manage EmptyState
 * @property {string} type - only for product page : published / unpublished / unlinked / unsuccessful
 * @return {LogObject<dataLoadedInPageParams>} LogObject<dataLoadedInPageParams>
 */
export function dataLoadedInPage(params) {
    return {
        evid: 84,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dashboardCheckWishMerchantCenterClicked' event (evid: 85)
 *
 * Event description: when users click on Wish Merchant Center banner
 *
 * @param {dashboardCheckWishMerchantCenterClickedParams} params - The parameters for this event
 * @property {string} channel - Facebook / Instagram / ebay/ amazon
 * @property {string} state - json of published / unpublished / unsuccessful / unlinked products for eBayShop page
 * @property {GUID} product_guid - only for product page
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} origin - Wish shop/dashboard, wish shop/onboarding,..
 * @property {string} target - Check wish merchant center/cancel
 * @return {LogObject<dashboardCheckWishMerchantCenterClickedParams>} LogObject<dashboardCheckWishMerchantCenterClickedParams>
 */
export function dashboardCheckWishMerchantCenterClicked(params) {
    return {
        evid: 85,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageEditForWishToggleChanged' event (evid: 86)
 *
 * Event description: when users change Edit for wish toggle
 *
 * @param {productPageEditForWishToggleChangedParams} params - The parameters for this event
 * @property {string} channel - wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} status - New toggle status: on/off
 * @property {string} target - Name/description/.
 * @return {LogObject<productPageEditForWishToggleChangedParams>} LogObject<productPageEditForWishToggleChangedParams>
 */
export function productPageEditForWishToggleChanged(params) {
    return {
        evid: 86,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageTabWithSettingsChanged' event (evid: 87)
 *
 * Event description: when users change tab
 *
 * @param {productPageTabWithSettingsChangedParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} target - Tab name: General info/Tags/Shipping App
 * @return {LogObject<productPageTabWithSettingsChangedParams>} LogObject<productPageTabWithSettingsChangedParams>
 */
export function productPageTabWithSettingsChanged(params) {
    return {
        evid: 87,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnActionInUnPublishProductModal' event (evid: 88)
 *
 * Event description: when users click on Unpublish Modal
 *
 * @param {clickOnActionInUnPublishProductModalParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} value - unpublish/cancel/x/?
 * @return {LogObject<clickOnActionInUnPublishProductModalParams>} LogObject<clickOnActionInUnPublishProductModalParams>
 */
export function clickOnActionInUnPublishProductModal(params) {
    return {
        evid: 88,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCancelInPp' event (evid: 89)
 *
 * Event description: when users click on Cancel in PP
 *
 * @param {clickOnCancelInPpParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<clickOnCancelInPpParams>} LogObject<clickOnCancelInPpParams>
 */
export function clickOnCancelInPp(params) {
    return {
        evid: 89,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickDiscardChangesOfProduct' event (evid: 9)
 *
 * Event description: if when user has unsaved changes in product page and leaves it - in "Save your Changes" modal clicks on "Discard changes"
 *
 * @param {clickDiscardChangesOfProductParams} params - The parameters for this event
 * @property {string} type - published / unpublished
 * @property {GUID} product_guid - relevant product id
 * @return {LogObject<clickDiscardChangesOfProductParams>} LogObject<clickDiscardChangesOfProductParams>
 */
export function clickDiscardChangesOfProduct(params) {
    return {
        evid: 9,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCancelInPpPopup' event (evid: 90)
 *
 * Event description: when users click on Cancel in PP popup
 *
 * @param {clickOnCancelInPpPopupParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} value - unpublish/cancel/x/?
 * @return {LogObject<clickOnCancelInPpPopupParams>} LogObject<clickOnCancelInPpPopupParams>
 */
export function clickOnCancelInPpPopup(params) {
    return {
        evid: 90,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clicksEditForWishInVariants' event (evid: 91)
 *
 * Event description: where user open the dropdown for selecting columns for variants
 *
 * @param {clicksEditForWishInVariantsParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<clicksEditForWishInVariantsParams>} LogObject<clicksEditForWishInVariantsParams>
 */
export function clicksEditForWishInVariants(params) {
    return {
        evid: 91,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editForWishInVariantsFiltersSelected' event (evid: 92)
 *
 * Event description: when user selected colums for variants
 *
 * @param {editForWishInVariantsFiltersSelectedParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} status - on/off
 * @property {string} value - Selected value: Wish Name, SHU, Wish Price/Inventory/Show on Wish/GTIN
 * @return {LogObject<editForWishInVariantsFiltersSelectedParams>} LogObject<editForWishInVariantsFiltersSelectedParams>
 */
export function editForWishInVariantsFiltersSelected(params) {
    return {
        evid: 92,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clicksInErrorsPopupLearnMoreClose' event (evid: 93)
 *
 * Event description: when user click in error message
 *
 * @param {clicksInErrorsPopupLearnMoreCloseParams} params - The parameters for this event
 * @property {string} channel - ebay/wish/Google shopping
 * @property {string} state - published/unpublished
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - current_package_name
 * @property {GUID} product_guid - product_guid
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} type - Message type. for google shopping: 'Domain in use'
 * @property {string} value - cancel\continue
 * @return {LogObject<clicksInErrorsPopupLearnMoreCloseParams>} LogObject<clicksInErrorsPopupLearnMoreCloseParams>
 */
export function clicksInErrorsPopupLearnMoreClose(params) {
    return {
        evid: 93,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'unsuccessfulListingsPopupShown' event (evid: 94)
 *
 * Event description: Unsuccessful Listings popup shown
 *
 * @param {unsuccessfulListingsPopupShownParams} params - The parameters for this event
 * @property {string} channel - ebay/wish
 * @property {GUID} uuid - uuid
 * @property {GUID} product_guid - the chosen product id
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} value - learn more/cancel
 * @return {LogObject<unsuccessfulListingsPopupShownParams>} LogObject<unsuccessfulListingsPopupShownParams>
 */
export function unsuccessfulListingsPopupShown(params) {
    return {
        evid: 94,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSelectionInUnlinkedProductModal' event (evid: 95)
 *
 * Event description: Click selection in unlinked product modal.
 *
 * @param {clickSelectionInUnlinkedProductModalParams} params - The parameters for this event
 * @property {string} variantId - Variant id
 * @property {string} asinParentId - Amazon Product Id
 * @property {string} channel - amazon
 * @property {string} asin - Amazon asin
 * @property {GUID} product_guid - product_guid
 * @property {string} selection - what was the user's selection: select/cancel/exit/link to create new product
 * @property {string} search_results - results shown/ no results/ Null (when the user didn’t search in box)
 * @return {LogObject<clickSelectionInUnlinkedProductModalParams>} LogObject<clickSelectionInUnlinkedProductModalParams>
 */
export function clickSelectionInUnlinkedProductModal(params) {
    return {
        evid: 95,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnPopUpMessage' event (evid: 96)
 *
 * Event description: When the user clicks on the pop-up message
 *
 * @param {clickOnPopUpMessageParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {string} page - Account connected
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} type - continue
 * @return {LogObject<clickOnPopUpMessageParams>} LogObject<clickOnPopUpMessageParams>
 */
export function clickOnPopUpMessage(params) {
    return {
        evid: 96,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToCreateNewAccount' event (evid: 97)
 *
 * Event description: When the user clicks on ‘create new account’  (relevant for google shopping)
 *
 * @param {clickToCreateNewAccountParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @property {string} origin - Values: Account setup page /Connect GMC popup .
 * @return {LogObject<clickToCreateNewAccountParams>} LogObject<clickToCreateNewAccountParams>
 */
export function clickToCreateNewAccount(params) {
    return {
        evid: 97,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToGetCode' event (evid: 98)
 *
 * Event description: When the user clicks on ‘get code’ button
 *
 * @param {clickToGetCodeParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<clickToGetCodeParams>} LogObject<clickToGetCodeParams>
 */
export function clickToGetCode(params) {
    return {
        evid: 98,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'verificationCodePopupShown' event (evid: 99)
 *
 * Event description: When the verification code window pops up
 *
 * @param {verificationCodePopupShownParams} params - The parameters for this event
 * @property {string} channel - Google shopping
 * @property {GUID} uuid - uuid
 * @property {string} currentPackageName - Current premium package.
 * @property {boolean} isPremiumEligible - if the user is connected to premium unlimited VIP - true/false
 * @return {LogObject<verificationCodePopupShownParams>} LogObject<verificationCodePopupShownParams>
 */
export function verificationCodePopupShown(params) {
    return {
        evid: 99,
        src: 101,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorEvent' event (evid: 10)
 *
 * Event description: error event.
 *
 * @param {errorEventParams} params - The parameters for this event
 * @property {string} dsc - dsc
 * @property {number} response_time - Time in ms from load to error
 * @property {string} vsi - vsi
 * @property {number} time - Time in ms from load to error
 * @property {boolean} is_rollout - is_rollout
 * @property {string} initiator_name - initiator_name
 * @property {string} server - server
 * @property {string} builderType - builder_type
 * @property {string} errscp - error scope
 * @property {GUID} site_id - changed from did -> site_id on Oct 03, 2013
 * @property {string} errn - error name
 * @property {string} p4 - 4st extra parameter
 * @property {string} majorver - the major version of html editor
 * @property {string} trgt - target name, api call or class
 * @property {boolean} isLiveEditor - is_live_editor
 * @property {number} ts - Time in ms from load to error
 * @property {string} playerVersion - player_version
 * @property {string} artifactVersion - artifact_version
 * @property {GUID} visitor_id - visitor_id
 * @property {number} usersOnPageCount - users_on_page_count
 * @property {string} viewmode - viewmode
 * @property {string} error_description_short - error_description_short
 * @property {string} data_center - data_center
 * @property {string} screenResolution - screen_resolution
 * @property {string} p3 - 3rd extra parameter
 * @property {GUID} did - changed from did -> site_id on Oct 03, 2013
 * @property {GUID} cid - client/computer id
 * @property {boolean} isSg - is_sg
 * @property {string} dsOrigin - ds_origin
 * @property {string} p2 - 2nd extra parameter
 * @property {string} token - token
 * @property {string} ver - sender version
 * @property {string} sessionId - session_id
 * @property {number} errc - error code
 * @property {string} stack - stacktrace
 * @property {GUID} metasiteid - metasiteid
 * @property {string} viewerName - viewer_name
 * @property {string} app_id - app_id
 * @property {number} sev - severity of the error
 * @property {GUID} esi - esi
 * @property {number} cat - category id
 * @property {string} errormsg - dsc
 * @property {number} usersOnSiteCount - users_on_site_count
 * @property {string} p1 - 1st extra parameter
 * @property {GUID} msid - msid
 * @property {number} base_version - base_version
 * @property {number} iss - issue (sub-category)
 * @return {LogObject<errorEventParams>} LogObject<errorEventParams>
 */
export function errorEvent(params) {
    return {
        evid: 10,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAssignmentOfProductsToProductTaxGroupSm' event (evid: 100)
 *
 * Event description: assignment of product / product list to Product Tax Group.
 * can happen when user assigns products explicitly only
 *
 * @param {taxAssignmentOfProductsToProductTaxGroupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} taxCode - e.g. PH404186, ? can be not defined
 * @property {string} productsList - list of products that will be saved
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - guid
 * @property {string} origin - deprecated
 * @property {string} type - deprecated
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxAssignmentOfProductsToProductTaxGroupSmParams>} LogObject<taxAssignmentOfProductsToProductTaxGroupSmParams>
 */
export function taxAssignmentOfProductsToProductTaxGroupSm(params) {
    return {
        evid: 100,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartAbandonment' event (evid: 1001)
 *
 * Event description: This event sent one hour after a cart is created without placing the order of that cart
 *
 * @param {cartAbandonmentParams} params - The parameters for this event
 * @property {number} total_long - cart total on the moment of the abandoned multiply by 100000
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {boolean} is_coupon - true if the cart with applied coupon when abandonment, false otherwise
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isVolatileCart - ECOM PLATFORM CAHNGE: if true the cart_id will send checkoutId if false it will send the cartId
 * @property {boolean} is_contact - true if the event sent on a contact , false otherwise (visitor/member)
 * @property {boolean} is_member - true if the visitor signed to the site, false otherwise
 * @property {number} numOfItems - number of products in cart
 * @property {string} currency - cart currency
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cartAbandonmentParams>} LogObject<cartAbandonmentParams>
 */
export function cartAbandonment(params) {
    return {
        evid: 1001,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartRecovered' event (evid: 1002)
 *
 * Event description: When the cart become an order after it already defined as a cart abandonment
 *
 * @param {cartRecoveredParams} params - The parameters for this event
 * @property {number} total_long - cart total on the moment of recovery, multiply by 100000
 * @property {GUID} cartId - cartId
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isVolatileCart - ECOM PLATFORM CAHNGE: if true the cart_id will send checkoutId if false it will send the cartId
 * @property {boolean} is_contact - true if the event sent on a contact , false otherwise (visitor/member)
 * @property {boolean} is_member - true if the visitor signed to the site, false otherwise
 * @property {string} currency - currency of cart
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cartRecoveredParams>} LogObject<cartRecoveredParams>
 */
export function cartRecovered(params) {
    return {
        evid: 1002,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSupportSm' event (evid: 101)
 *
 * Event description: Click on call support icon from SM home
 *
 * @param {clickOnSupportSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - home
 * @property {string} target - url or link where it sends the user to...
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSupportSmParams>} LogObject<clickOnSupportSmParams>
 */
export function clickOnSupportSm(params) {
    return {
        evid: 101,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxSelectProductsForTaxGroupModalShownSm' event (evid: 102)
 *
 * Event description: after user clicked on "add products" in ProductTaxGroup page, "Select products for tax group" modal shown
 *
 * @param {taxSelectProductsForTaxGroupModalShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - in case of eddit inside existing productTaxGroup
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxSelectProductsForTaxGroupModalShownSmParams>} LogObject<taxSelectProductsForTaxGroupModalShownSmParams>
 */
export function taxSelectProductsForTaxGroupModalShownSm(params) {
    return {
        evid: 102,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'abandonedCartAutomaticInstall' event (evid: 1022)
 *
 * Event description: This events aims to help us monitoring "silent installation" (automatic) of  'abandoned cart' feature in new stores.
 *
 * @param {abandonedCartAutomaticInstallParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} countryFromHeader - the country from the code header
 * @property {string} automationRuleId - the automation rule id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<abandonedCartAutomaticInstallParams>} LogObject<abandonedCartAutomaticInstallParams>
 */
export function abandonedCartAutomaticInstall(params) {
    return {
        evid: 1022,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickInSelectProductsForTaxGroupModalSm' event (evid: 103)
 *
 * Event description: in "Select products for tax group" modal user check products and clicks "add"
 *
 * @param {taxClickInSelectProductsForTaxGroupModalSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} productsList - list of selected products
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - in case of eddit inside existing productTaxGroup
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickInSelectProductsForTaxGroupModalSmParams>} LogObject<taxClickInSelectProductsForTaxGroupModalSmParams>
 */
export function taxClickInSelectProductsForTaxGroupModalSm(params) {
    return {
        evid: 103,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsCompletedNotification' event (evid: 1035)
 *
 * Event description: A notification is sent to the user when import completed (server event)
 *
 * @param {importProductsCompletedNotificationParams} params - The parameters for this event
 * @property {string} appName - appname
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {number} total - total items imported
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<importProductsCompletedNotificationParams>} LogObject<importProductsCompletedNotificationParams>
 */
export function importProductsCompletedNotification(params) {
    return {
        evid: 1035,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'splitProductServerCommandsToBatches' event (evid: 1036)
 *
 * Event description: When sending more than 500 commands we split the commands into batches - this BI is for monitoring this process
 *
 * @param {splitProductServerCommandsToBatchesParams} params - The parameters for this event
 * @property {GUID} storeId - .
 * @property {number} numberOfBatches - the number of batches that was sent
 * @property {GUID} uuid - .
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productId - product_guid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<splitProductServerCommandsToBatchesParams>} LogObject<splitProductServerCommandsToBatchesParams>
 */
export function splitProductServerCommandsToBatches(params) {
    return {
        evid: 1036,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorInExecutingProductCommandsBatches' event (evid: 1037)
 *
 * Event description: When there are more than 500 commands in the catalog we split the commands to batches. this event is sent if one of the batches fail
 *
 * @param {errorInExecutingProductCommandsBatchesParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} errorMessage - error_message
 * @property {GUID} uuid - .
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productId - .
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<errorInExecutingProductCommandsBatchesParams>} LogObject<errorInExecutingProductCommandsBatchesParams>
 */
export function errorInExecutingProductCommandsBatches(params) {
    return {
        evid: 1037,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnSaveInProductTaxGroupInnerPageSm' event (evid: 104)
 *
 * Event description: user clicks on "Save" in ProductTaxGroup to create new / edit existing ProductTaxGroup.  Click can not lead to save event if user didn't choose Tax code.
 *
 * @param {taxClickOnSaveInProductTaxGroupInnerPageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} taxCode - e.g. PH404186, ? can be not defined
 * @property {string} productsList - list of products that will be saved
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - ? exists only in case of eddit, guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnSaveInProductTaxGroupInnerPageSmParams>} LogObject<taxClickOnSaveInProductTaxGroupInnerPageSmParams>
 */
export function taxClickOnSaveInProductTaxGroupInnerPageSm(params) {
    return {
        evid: 104,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddEditProductTaxGroupSm' event (evid: 105)
 *
 * Event description: user clicks on "Create another group" in ProductTaxGroup main page or drilled down on existing ProductTaxGroup
 *
 * @param {taxClickOnAddEditProductTaxGroupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - only in case of edditing
 * @property {string} type - new / eddit
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnAddEditProductTaxGroupSmParams>} LogObject<taxClickOnAddEditProductTaxGroupSmParams>
 */
export function taxClickOnAddEditProductTaxGroupSm(params) {
    return {
        evid: 105,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleUpdatedSmServerEvent' event (evid: 1050)
 *
 * Event description: when the shipping rule (before separation - shipping&tax rule) is updated - server event
 *
 * @param {shippingRuleUpdatedSmServerEventParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} services - json of services - each has id , title, deliveryTime, rate(ratesByRange)
 * @property {string} dest - json of countries and their states in shipping rule (code and subdivisions)
 * @property {number} numOfServices - number of different shipping services added by user (will be more then 1 for rtc)
 * @property {string} name - name
 * @property {string} fallbackOption - fallback_option
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} enabled - enabled
 * @property {boolean} allowStorePickUp - allow_store_pick_up if checked send true
 * @property {string} pickupOption - pickup_option
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierSettings - carrier_settings
 * @property {string} methodType - flat / free / price_range / weight_range / pickup_only
 * @property {number} handlingFee_long - INTEGER!!!!!!! (multiply by 100000)
 * @property {string} carrierServices - carrier_services
 * @property {string} mainPackageId - main_package_id
 * @property {string} identityType - identity_type
 * @property {string} carrierType - carrier_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingRuleUpdatedSmServerEventParams>} LogObject<shippingRuleUpdatedSmServerEventParams>
 */
export function shippingRuleUpdatedSmServerEvent(params) {
    return {
        evid: 1050,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageRenderedSf' event (evid: 1051)
 *
 * Event description: When the Product page render in SF
 *
 * @param {productPageRenderedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} origin - origin
 * @property {string} productId - cart_id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} product - product guid
 * @return {LogObject<productPageRenderedSfParams>} LogObject<productPageRenderedSfParams>
 */
export function productPageRenderedSf(params) {
    return {
        evid: 1051,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToCartSf' event (evid: 1052)
 *
 * Event description: Product Added To Cart SF
 *
 * @param {productAddedToCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} quantity - number of quantity added to cart in the specific product
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {string} product_id - product_guid
 * @property {number} num_items - total # of quantity (for all products) in cart after adding the product to cart
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<productAddedToCartSfParams>} LogObject<productAddedToCartSfParams>
 */
export function productAddedToCartSf(params) {
    return {
        evid: 1052,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageQuickViewRenderedSf' event (evid: 1053)
 *
 * Event description: product Page Quick View Rendered SF.
 *
 * @param {productPageQuickViewRenderedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} origin - origin
 * @property {string} productId - product guid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<productPageQuickViewRenderedSfParams>} LogObject<productPageQuickViewRenderedSfParams>
 */
export function productPageQuickViewRenderedSf(params) {
    return {
        evid: 1053,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'galleryRenderedSf' event (evid: 1055)
 *
 * Event description: sent when gallery rendering ended
 *
 * @param {galleryRenderedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} instanceId - instance_id
 * @property {string} referral_name - referral_name
 * @property {GUID} visitorId - visitor_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - isMerchant
 * @property {string} compId - compId
 * @property {string} galleryType - galleryType
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<galleryRenderedSfParams>} LogObject<galleryRenderedSfParams>
 */
export function galleryRenderedSf(params) {
    return {
        evid: 1055,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleCreatedSmServerEvent' event (evid: 1056)
 *
 * Event description: when the tax rue was created - moved to src 130
 *
 * @param {taxTaxRuleCreatedSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} calculatorId - calculator_id
 * @property {boolean} calcTaxAfterShipping - true or false
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {GUID} biToken - msid
 * @property {boolean} isTaxIncludingInPrice - is_tax_including_in_orice
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {number} taxRate - the tax rate INTEGER!!!!!!! (multiply by 100000)
 * @property {string} taxState - the state in the rule (if there is no state send NULL)
 * @property {string} user_agent - user_agent
 * @property {string} manualRatesPerGroup - manual_rates_per_group
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - the country of the rule
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleCreatedSmServerEventParams>} LogObject<taxTaxRuleCreatedSmServerEventParams>
 */
export function taxTaxRuleCreatedSmServerEvent(params) {
    return {
        evid: 1056,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleCreatedSmServerEvent' event (evid: 1057)
 *
 * Event description: when the shipping rule (before separation - shipping&tax rule) was created - server event
 *
 * @param {shippingRuleCreatedSmServerEventParams} params - The parameters for this event
 * @property {string} services - json of services - each has id , title, deliveryTime, rate(ratesByRange)
 * @property {string} dest - json of countries and their states in shipping rule (code and subdivisions)
 * @property {number} numOfServices - number of different shipping services added by user
 * @property {string} name - shipping rule name
 * @property {string} fallbackOption - backup settings for the rtc option
 * @property {GUID} biToken - msid
 * @property {GUID} uuid - uuid
 * @property {string} enabled - true/false - whether the shipping rule is enabled
 * @property {GUID} storeId - store_id
 * @property {boolean} allowStorePickUp - allow_store_pick_up if checked send true
 * @property {string} pickupOption - array with the pickup details
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} carrierSettings - array of app id, title, default rate for the apps that were turned on in the shipping rule
 * @property {string} methodType - flat / free / price_range / weight_range / pickup_only
 * @property {number} handlingFee_long - INTEGER!!!!!!! (multiply by 100000)
 * @property {string} carrierServices - array of app ids that were turned on in the shipping rule
 * @property {string} mainPackageId - main package for the rtc option
 * @property {string} identityType - identity_type
 * @property {string} carrierType - relevant for the rtc option
 * @return {LogObject<shippingRuleCreatedSmServerEventParams>} LogObject<shippingRuleCreatedSmServerEventParams>
 */
export function shippingRuleCreatedSmServerEvent(params) {
    return {
        evid: 1057,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleDeletedSmServerEvent' event (evid: 1058)
 *
 * Event description: when the tax rue was deleted - server event
 *
 * @param {taxTaxRuleDeletedSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} taxState - tax_state
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - tax_country
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleDeletedSmServerEventParams>} LogObject<taxTaxRuleDeletedSmServerEventParams>
 */
export function taxTaxRuleDeletedSmServerEvent(params) {
    return {
        evid: 1058,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleDeletedSmServerEvent' event (evid: 1059)
 *
 * Event description: when the shipping rule (before separation - shipping&tax rule) was deleted - server event
 *
 * @param {shippingRuleDeletedSmServerEventParams} params - The parameters for this event
 * @property {GUID} biToken - msid
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingRuleDeletedSmServerEventParams>} LogObject<shippingRuleDeletedSmServerEventParams>
 */
export function shippingRuleDeletedSmServerEvent(params) {
    return {
        evid: 1059,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxMoveProductsPopupShownSm' event (evid: 106)
 *
 * Event description: After user clicked on Delete in 3dots menu - Remove tax group and Move Products Popup is shown. Also if in inner TaxGroup page user moves products from Products table  - Move products popup is shown (the move happens after confirm in popup no need to save changes to ProductTaxGroup)
 *
 * @param {taxMoveProductsPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} reason - delete / move
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - guid of current group
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxMoveProductsPopupShownSmParams>} LogObject<taxMoveProductsPopupShownSmParams>
 */
export function taxMoveProductsPopupShownSm(params) {
    return {
        evid: 106,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleEnabledDisabledSmServerEvent' event (evid: 1060)
 *
 * Event description: when the shipping rule (before separation - shipping&tax rule) was enabled/disabled - server event
 *
 * @param {shippingRuleEnabledDisabledSmServerEventParams} params - The parameters for this event
 * @property {GUID} biToken - msid
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} status - true for enable false for disabled
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingRuleEnabledDisabledSmServerEventParams>} LogObject<shippingRuleEnabledDisabledSmServerEventParams>
 */
export function shippingRuleEnabledDisabledSmServerEvent(params) {
    return {
        evid: 1060,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRulesMigratedTaxPageSmServerEvent' event (evid: 1061)
 *
 * Event description: when existing user, who has at least 1 nonzero tax rule saved in Shipping&Tax page, opens Stores BO for the first time tax rules migrated to Tax page-> the popup in tax page should open for him
 *
 * @param {taxTaxRulesMigratedTaxPageSmServerEventParams} params - The parameters for this event
 * @property {number} numberOfRules - number of tax rules that migrated
 * @property {GUID} biToken - msid
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<taxTaxRulesMigratedTaxPageSmServerEventParams>} LogObject<taxTaxRulesMigratedTaxPageSmServerEventParams>
 */
export function taxTaxRulesMigratedTaxPageSmServerEvent(params) {
    return {
        evid: 1061,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAvalaraOnboardingStageFinished' event (evid: 1062)
 *
 * Event description: when user goes through Avalara onboarding, specific stage of it finished successfully
 *
 * @param {taxAvalaraOnboardingStageFinishedParams} params - The parameters for this event
 * @property {string} account_id - account_id in Avalara
 * @property {number} duration - duration from beginning of stage to finish, ms
 * @property {number} company_id - company_id in Avalara
 * @property {string} stage - name of specific stage of onboarding: request new account / get companyId / create nexus / create tax rule for address
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} taxState - state of user's address
 * @property {string} accountId - account_id in Avalara
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - country of user's address
 * @property {string} identityType - identity_type
 * @property {number} companyId - company_id in Avalara
 * @return {LogObject<taxAvalaraOnboardingStageFinishedParams>} LogObject<taxAvalaraOnboardingStageFinishedParams>
 */
export function taxAvalaraOnboardingStageFinished(params) {
    return {
        evid: 1062,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToManualSmServerEvent' event (evid: 1063)
 *
 * Event description: when user clicks on "Switch to manual"  - tax rules that were autocalculated redefined manually (if user didn't set manual rate ever it will be 0; if he set a rule manually -> switched to avalara -> switched to manual back - the rate he put manually from the beginning will be displayed)
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToManualSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} taxState - tax_state
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - tax_country
 * @property {GUID} previousCalculator - previous_calculator
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_id
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToManualSmServerEventParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToManualSmServerEventParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToManualSmServerEvent(params) {
    return {
        evid: 1063,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToAvalaraSmServerEvent' event (evid: 1064)
 *
 * Event description: when user clicks on "Switch to Automated tax" or if in popup for existing users he clicks on "get Automated tax"  tax rules that were saved manual should be recalculated with Avalara . Rules that we do not have in Avalara account but have in wix - are added to avalara and rules that were deleted in wix  but still exist in Avalara - are deleted from avalara during Sync with Avalara/onboarding, only after it the flow type switches
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToAvalaraSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} addRegionList - json of countries and states  added to Avalara on sync
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} calculatorName - calculator_name
 * @property {string} deleteRegionList - json of countries and states deleted from Avalara on sync
 * @property {string} taxState - tax_state
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - tax_country
 * @property {string} type - switch / switch_onboarding
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_id
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraSmServerEventParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraSmServerEventParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToAvalaraSmServerEvent(params) {
    return {
        evid: 1064,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAvalaraError' event (evid: 1065)
 *
 * Event description: obtained avalara error when user goes through Avalara onboarding  /tried to add tax rule/ tried to delete tax rule/ tried to switch to avalara flow / error in estimating tax amount in cart
 *
 * @param {taxAvalaraErrorParams} params - The parameters for this event
 * @property {string} errorMessage - error message from avalara
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} errorType - TBD when have statistics on specific errors
 * @property {string} origin - onboarding / add_tax_rule / delete_tax_rule / switch_to_avalara / estimate_tax_rate
 * @property {string} identityType - identity_type
 * @return {LogObject<taxAvalaraErrorParams>} LogObject<taxAvalaraErrorParams>
 */
export function taxAvalaraError(params) {
    return {
        evid: 1065,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'multipleActiveCartsPerVisitorDetected' event (evid: 1066)
 *
 * Event description: server detect in the server that there is few active carts for the same visitor
 *
 * @param {multipleActiveCartsPerVisitorDetectedParams} params - The parameters for this event
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id the first one
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<multipleActiveCartsPerVisitorDetectedParams>} LogObject<multipleActiveCartsPerVisitorDetectedParams>
 */
export function multipleActiveCartsPerVisitorDetected(params) {
    return {
        evid: 1066,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxProductTaxGroupEdditedChangeTaxCodeSmServerEvent' event (evid: 1069)
 *
 * Event description: user changed TaxCode in TaxGroup
 *
 * @param {taxProductTaxGroupEdditedChangeTaxCodeSmServerEventParams} params - The parameters for this event
 * @property {string} taxCode - new tax code
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productTaxGroupId - guid
 * @property {string} identityType - identity_type
 * @return {LogObject<taxProductTaxGroupEdditedChangeTaxCodeSmServerEventParams>} LogObject<taxProductTaxGroupEdditedChangeTaxCodeSmServerEventParams>
 */
export function taxProductTaxGroupEdditedChangeTaxCodeSmServerEvent(params) {
    return {
        evid: 1069,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickInMoveProductsPopupSm' event (evid: 107)
 *
 * Event description: In  Move Products popup user choose another Tax Group to which the products will move (in case of removing -  after removing current) and clicks "confirm"
 *
 * @param {taxClickInMoveProductsPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} productTaxGroupIdNew - the product group to which we move
 * @property {string} reason - delete / move
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - guid of current group
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickInMoveProductsPopupSmParams>} LogObject<taxClickInMoveProductsPopupSmParams>
 */
export function taxClickInMoveProductsPopupSm(params) {
    return {
        evid: 107,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxProductTaxGroupEnableDisableSmServerEvent' event (evid: 1070)
 *
 * Event description: user can enable Tax Classes: 1)if its first time - after saving first Tax  Group 2) if he had some TaxClasses then disable then enable again by click on toggle (doesn't happen if click on 'x' in unassigned products popup') . User can disable TaxClasses: 1) after clicking on toggle and confirming in warning popup 2) after deleting last taxGroup
 *
 * @param {taxProductTaxGroupEnableDisableSmServerEventParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} status - true for enable false for desable
 * @property {string} identityType - identity_type
 * @return {LogObject<taxProductTaxGroupEnableDisableSmServerEventParams>} LogObject<taxProductTaxGroupEnableDisableSmServerEventParams>
 */
export function taxProductTaxGroupEnableDisableSmServerEvent(params) {
    return {
        evid: 1070,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxProductTaxGroupCreatedSmServerEvent' event (evid: 1071)
 *
 * Event description: user saved new ProductTaxGroup. also can be automatic General tax group created event (e.g. user saves manually defined tax group and in popup for unassigned products he chooses "create general tax group" )
 *
 * @param {taxProductTaxGroupCreatedSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} taxCode - e.g. PH404186
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} numberOfItems - number of products added to TaxGroup on creating
 * @property {string} productTaxGroupName - the name of the group user typed in, e.g. "food"
 * @property {string} productTaxGroupId - guid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<taxProductTaxGroupCreatedSmServerEventParams>} LogObject<taxProductTaxGroupCreatedSmServerEventParams>
 */
export function taxProductTaxGroupCreatedSmServerEvent(params) {
    return {
        evid: 1071,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxProductTaxGroupDeletedSmServerEvent' event (evid: 1072)
 *
 * Event description: user deleted ProductTaxGroup. if user had products in ProductTaxGroup is sent after confirming notification popup (to move products to another group / to turn off ProductTaxGroups in case it was last group)
 *
 * @param {taxProductTaxGroupDeletedSmServerEventParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productTaxGroupId - guid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<taxProductTaxGroupDeletedSmServerEventParams>} LogObject<taxProductTaxGroupDeletedSmServerEventParams>
 */
export function taxProductTaxGroupDeletedSmServerEvent(params) {
    return {
        evid: 1072,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRefundCommitToAvalara' event (evid: 1073)
 *
 * Event description: Commit to Avalara of refund made by user that has Avalara. we do check if original order was commited to Avalara, in this case we will not succeed to commit
 *
 * @param {taxRefundCommitToAvalaraParams} params - The parameters for this event
 * @property {GUID} clientRefundId - unique id of refund, to join to 10:1166
 * @property {string} taxRefundId - unique identifier of commit
 * @property {string} orderId - order_id of original transaction to join to 10:1163 to check committed tax of original order in case of full refund
 * @property {GUID} uuid - uuid
 * @property {number} taxCommittedLong - INT (multiplied by 100000), tax of original order commited to Avalara for specific line items (send only in case of partial refund for specific line items)
 * @property {string} errorReason - in case when is_success = false - what was the reason
 * @property {boolean} isSuccess - true if refund commit didn't fail
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id who sends the event
 * @property {number} taxLong - INT (multiplied by 100000), tax of refund commited to Avalara
 * @property {boolean} withShipping - true if shipping is also refunded
 * @property {string} currency - currency
 * @property {string} identityType - identity_type
 * @property {boolean} withLineItems - true - refund is on line items , false - an arbitrary amount (aka custom refund)
 * @property {string} refundType - full/partial
 * @return {LogObject<taxRefundCommitToAvalaraParams>} LogObject<taxRefundCommitToAvalaraParams>
 */
export function taxRefundCommitToAvalara(params) {
    return {
        evid: 1073,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'login' event (evid: 1074)
 *
 * Event description: No of browsers
 *
 * @param {loginParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} browser_type - browser_type
 * @property {string} browser - browser
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} msid - msid
 * @property {string} browser_name - browser_name
 * @property {string} identityType - identity_type
 * @return {LogObject<loginParams>} LogObject<loginParams>
 */
export function login(params) {
    return {
        evid: 1074,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardApplyServer' event (evid: 1075)
 *
 * Event description: result of verification of gift card code  on server after click Apply (success or not)
 *
 * @param {giftCardApplyServerParams} params - The parameters for this event
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (Gifted App)
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} errorReason - disabled / expired / invalid / empty...
 * @property {boolean} isSuccess - true  if redeem happened
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<giftCardApplyServerParams>} LogObject<giftCardApplyServerParams>
 */
export function giftCardApplyServer(params) {
    return {
        evid: 1075,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardRemoveServer' event (evid: 1076)
 *
 * Event description: remove gift card from cart on server
 *
 * @param {giftCardRemoveServerParams} params - The parameters for this event
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<giftCardRemoveServerParams>} LogObject<giftCardRemoveServerParams>
 */
export function giftCardRemoveServer(params) {
    return {
        evid: 1076,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sameCartIdDifferentMemberIdVisitorId' event (evid: 1077)
 *
 * Event description: Sent on `get cart` and `render checkout`
 * is_valid = false means the same cart_id seen on different entity as the one who created the cart
 *
 * @param {sameCartIdDifferentMemberIdVisitorIdParams} params - The parameters for this event
 * @property {GUID} storeId - store _id
 * @property {GUID} originalVisitor - the original visitor the cart was created by
 * @property {GUID} visitorId - deprecated
 * @property {GUID} cartId - cartId
 * @property {GUID} scMemberId - sc_member_id
 * @property {GUID} uuid - uuid
 * @property {GUID} scVisitorId - sc_visitor_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - deprecated
 * @property {boolean} scIsOwner - sc_is_owner
 * @property {string} origin - cart (get cart), checkout (render checkout), order (place order)
 * @property {GUID} memberId - deprecated
 * @property {boolean} is_valid - True if the cart is seen by the right entity, false otherwize
 * @property {boolean} isEmpty - true if no products on cart, false if empty
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} addressId - addressId on cart
 * @property {GUID} originalMember - the original member the cart was created by
 * @return {LogObject<sameCartIdDifferentMemberIdVisitorIdParams>} LogObject<sameCartIdDifferentMemberIdVisitorIdParams>
 */
export function sameCartIdDifferentMemberIdVisitorId(params) {
    return {
        evid: 1077,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToPreviewRefundCancelEmail' event (evid: 108)
 *
 * Event description: When the user click to preview cancel/refund email in the cancel modal
 *
 * @param {clickToPreviewRefundCancelEmailParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isFreeTextChanged - True if the user changed the free text content, otherwise false
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel / refund / cancel with refund
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToPreviewRefundCancelEmailParams>} LogObject<clickToPreviewRefundCancelEmailParams>
 */
export function clickToPreviewRefundCancelEmail(params) {
    return {
        evid: 108,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'setNewOwnerOnCart' event (evid: 1088)
 *
 * Event description: When the first member is taking ownership on a cart for the first time
 *
 * @param {setNewOwnerOnCartParams} params - The parameters for this event
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cart_id
 * @property {GUID} uuid - uuid
 * @property {GUID} previousMember - previous member of the cart
 * @property {GUID} storeId - storeId
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - isMerchant
 * @property {string} identityType - iגentity
 * @property {string} previousIdentityType - visitor/member
 * @return {LogObject<setNewOwnerOnCartParams>} LogObject<setNewOwnerOnCartParams>
 */
export function setNewOwnerOnCart(params) {
    return {
        evid: 1088,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnDeleteInProductTaxGroupInnerPageSm' event (evid: 109)
 *
 * Event description: user clicks on "Delete" from 3dots menu in ProductTaxGroup. 1) If it is last ProductTaxGroup it will lead to switching off the ProductTaxGroup toggle (after confirm in notification popup) 2) If not last but user has items in the group we will ask him to move product to existing group (after confirm in moving popup products will be moved and group deleted)
 *
 * @param {taxClickOnDeleteInProductTaxGroupInnerPageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnDeleteInProductTaxGroupInnerPageSmParams>} LogObject<taxClickOnDeleteInProductTaxGroupInnerPageSmParams>
 */
export function taxClickOnDeleteInProductTaxGroupInnerPageSm(params) {
    return {
        evid: 109,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductBoxSf' event (evid: 11)
 *
 * Event description: sent from web from product gallery. also since june 2019 started to be sent from OneApp Store Front (member view)
 *
 * @param {clickOnProductBoxSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {boolean} hasRibbon - has_ribbon
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} impressionId - impression_id
 * @property {GUID} owner_id - owner_id
 * @property {number} rank - rank
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductBoxSfParams>} LogObject<clickOnProductBoxSfParams>
 */
export function clickOnProductBoxSf(params) {
    return {
        evid: 11,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnEditShipToAddressSm' event (evid: 110)
 *
 * Event description: click on "Edit" in Ship To (address of buyer) section in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnEditShipToAddressSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnEditShipToAddressSmParams>} LogObject<shippingLabelClickOnEditShipToAddressSmParams>
 */
export function shippingLabelClickOnEditShipToAddressSm(params) {
    return {
        evid: 110,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartCreatedSf' event (evid: 1101)
 *
 * Event description: Cart Created SF
 *
 * @param {cartCreatedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartCreatedSfParams>} LogObject<cartCreatedSfParams>
 */
export function cartCreatedSf(params) {
    return {
        evid: 1101,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'temporaryCartCreatedSf' event (evid: 1102)
 *
 * Event description: Temporary Cart Created.
 * Relevant to buy now and subscriptions, equivalent to the event 10:1101.
 *
 * @param {temporaryCartCreatedSfParams} params - The parameters for this event
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isSubscription - is the cart a subscription cart
 * @property {string} identityType - identity_type
 * @return {LogObject<temporaryCartCreatedSfParams>} LogObject<temporaryCartCreatedSfParams>
 */
export function temporaryCartCreatedSf(params) {
    return {
        evid: 1102,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnApplyPromotionalCodeSf' event (evid: 111)
 *
 * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view)
 *
 * @param {clickOnApplyPromotionalCodeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} cartId - cart_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnApplyPromotionalCodeSfParams>} LogObject<clickOnApplyPromotionalCodeSfParams>
 */
export function clickOnApplyPromotionalCodeSf(params) {
    return {
        evid: 111,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverErrorsInCheckout' event (evid: 1117)
 *
 * Event description: Triggers on server errors in checkout
 * right now sent only when the transaction currency selected in checkout
 *  need to be migrated to src 130
 *
 * @param {serverErrorsInCheckoutParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} customFields - Json containing additional error info
 * @property {string} errorReason - the error that triggers the event
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkoutId
 * @return {LogObject<serverErrorsInCheckoutParams>} LogObject<serverErrorsInCheckoutParams>
 */
export function serverErrorsInCheckout(params) {
    return {
        evid: 1117,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponAppliedSfSrc10Evid112' event (evid: 112)
 *
 * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront
 *
 * @param {couponAppliedSfSrc10Evid112Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<couponAppliedSfSrc10Evid112Params>} LogObject<couponAppliedSfSrc10Evid112Params>
 */
export function couponAppliedSfSrc10Evid112(params) {
    return {
        evid: 112,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutWithEWalletSf' event (evid: 113)
 *
 * Event description: buyer clicks on checkout with e-wallwt in cart page
 *
 * @param {clickOnCheckoutWithEWalletSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {string} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} user_agent - user_agent
 * @property {boolean} preOrder - pre_order
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {string} type - e-wallet type
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @return {LogObject<clickOnCheckoutWithEWalletSfParams>} LogObject<clickOnCheckoutWithEWalletSfParams>
 */
export function clickOnCheckoutWithEWalletSf(params) {
    return {
        evid: 113,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutSf' event (evid: 114)
 *
 * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'
 *
 * @param {clickOnCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping (=shipping & local delivery) /store pickup / none (when digital product)
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @return {LogObject<clickOnCheckoutSfParams>} LogObject<clickOnCheckoutSfParams>
 */
export function clickOnCheckoutSf(params) {
    return {
        evid: 114,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'removedProductFromCartSf' event (evid: 115)
 *
 * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view). Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {removedProductFromCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<removedProductFromCartSfParams>} LogObject<removedProductFromCartSfParams>
 */
export function removedProductFromCartSf(params) {
    return {
        evid: 115,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingAddressSetSfSrc10Evid1151' event (evid: 1151)
 *
 * Event description: Shipping Address Set SF.
 *
 * @param {shippingAddressSetSfSrc10Evid1151Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {GUID} uuid - uuid
 * @property {string} country - country_name
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} subdivision - subdivision
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingAddressSetSfSrc10Evid1151Params>} LogObject<shippingAddressSetSfSrc10Evid1151Params>
 */
export function shippingAddressSetSfSrc10Evid1151(params) {
    return {
        evid: 1151,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPlacedSf' event (evid: 1154)
 *
 * Event description: sent before arriving to payment step in checkout or POS order (in new checkout funnel, POS only)
 *
 * @param {orderPlacedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} orderId - order_id
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} numberOfItems - count
 * @property {boolean} isMerchant - merchant status
 * @property {number} taxLong - tax_long
 * @property {number} grandTotalLong - grand_total_long
 * @property {string} origin - origin - pos/ web
 * @property {number} couponlong - coupon_long
 * @property {string} currency - currency
 * @property {string} transaction - transactionid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} transactionId - transaction_id
 * @return {LogObject<orderPlacedSfParams>} LogObject<orderPlacedSfParams>
 */
export function orderPlacedSf(params) {
    return {
        evid: 1154,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPaid' event (evid: 1155)
 *
 * Event description: Order Paid
 *
 * @param {orderPaidParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cartid
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {GUID} uuid - the uuid of the owner in case of offline payment
 * @property {string} paymentMethod - payment type - cash /  / squareOffline / paypal / offline / stripe...
 * @property {GUID} subscriptionId - subscription_id
 * @property {number} paymentCycle - the payment cycle number
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - merchant status
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} origin - origin - pos/ web
 * @property {GUID} contactId - contactId, if there is one
 * @property {string} paymentProvider - actual payment provider - paypal/paypal express / Offline/ stripe... N/A - means the whole amount is covered with coupon
 * @property {string} transaction - transaction_id to integrate cashier events
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - memberGuid
 * @return {LogObject<orderPaidParams>} LogObject<orderPaidParams>
 */
export function orderPaid(params) {
    return {
        evid: 1155,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'transactionPaid' event (evid: 1156)
 *
 * Event description: one stage before order paid. the confirmation from payment gateway arrived, order was still not confirmed in wixstores.
 *
 * @param {transactionPaidParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {GUID} uuid - the uuid of the owner in case of offline payment
 * @property {string} paymentType - payment_type
 * @property {string} user_agent - user_agent
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} transactionId - transaction_id
 * @return {LogObject<transactionPaidParams>} LogObject<transactionPaidParams>
 */
export function transactionPaid(params) {
    return {
        evid: 1156,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'placedOrder' event (evid: 1158)
 *
 * Event description: UoU is submitting the order (through cashier)
 *
 * @param {placedOrderParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} taxLong - deprecated
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (when UoU buys a product using Gift Card)
 * @property {string} cashierTransactionStatus - eWallet - PENDING , 3DS -3DS, APPROVED
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} externalOrderId - External ID of the order from TPA (e.g. when buyer buys a Gift Card)
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} paymentStatus - **Not reliable**
 * @property {string} productsList - json of {product_id:Guid, quantity: int, fulfillerName : string, price:int}
 * @property {string} appName - app_name
 * @property {string} taxFlowType - avalaraAuto/avalaraManual/manual/backup
 * @property {string} orderId - order_id
 * @property {string} paymentMethod - payment type - cashier
 * @property {GUID} subscriptionId - subscriptionId
 * @property {number} taxRate - deprecated
 * @property {number} paymentCycle - 1 - for first cycle...
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} numberOfItems - number of items in order
 * @property {boolean} isMerchant - merchant status
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} redeemTransactionId - id of redeem transaction in the Gifted App (when UoU buys a product using Gift Card)
 * @property {number} grandTotalLong - grand_total_long, multiplied by 100 000 and rounded to int
 * @property {string} origin - origin - pos/ web / wix_invoices
 * @property {number} couponlong - coupon_long
 * @property {GUID} contactId - contactId, if there is
 * @property {number} giftCardLong - INT, multiplied by 100 000
 * @property {string} paymentProvider - actual payment provider - paypal/paypal express / Offline/ stripe...
 * @property {string} shippingMethodType - free/flat/pickup....
 * @property {string} currency - currency
 * @property {string} couponType - type of coupon applied
 * @property {number} shippingLong - amount of shipping in order, INTEGER multiplied by 100000
 * @property {string} transaction - transactionid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} couponId - coupon guid
 * @property {GUID} checkoutId - checkout_id
 * @property {DateTime} orderDateCreated - order_date_created
 * @property {string} transactionId - transaction_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<placedOrderParams>} LogObject<placedOrderParams>
 */
export function placedOrder(params) {
    return {
        evid: 1158,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailToBuyerBounced' event (evid: 1159)
 *
 * Event description: Will sent when an order was made with an out of stock product (creating minus in the stock)
 *
 * @param {emailToBuyerBouncedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor
 * @property {GUID} cartId - cartid
 * @property {string} orderId - order_id
 * @property {GUID} uuid - the uuid of the owner in case of offline payment
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - merchant status
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<emailToBuyerBouncedParams>} LogObject<emailToBuyerBouncedParams>
 */
export function emailToBuyerBounced(params) {
    return {
        evid: 1159,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updatedCartItemQuantitySf' event (evid: 116)
 *
 * Event description: Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {updatedCartItemQuantitySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<updatedCartItemQuantitySfParams>} LogObject<updatedCartItemQuantitySfParams>
 */
export function updatedCartItemQuantitySf(params) {
    return {
        evid: 116,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailToBuyerOpen' event (evid: 1160)
 *
 * Event description: when an email sent to the user (Merchant)
 *
 * @param {emailToBuyerOpenParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} emailRefId - email_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} orderid - order_id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} email_type - email type
 * @return {LogObject<emailToBuyerOpenParams>} LogObject<emailToBuyerOpenParams>
 */
export function emailToBuyerOpen(params) {
    return {
        evid: 1160,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailToBuyerClick' event (evid: 1161)
 *
 * Event description: When the status of an order is changed when a new info coming from Cashier
 *
 * @param {emailToBuyerClickParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} paymentStatus - the new payment status updated from cashier
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} orderid - order_id
 * @property {string} paymentProvider - payment type - cash / / squareOffline / paypal / offline / stripe...
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<emailToBuyerClickParams>} LogObject<emailToBuyerClickParams>
 */
export function emailToBuyerClick(params) {
    return {
        evid: 1161,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRateEstimationFromAvalara' event (evid: 1162)
 *
 * Event description: Estimation of tax rate was obtained from Avalara in the cart . NB: correct visitor_id only since 08/03/2019
 *
 * @param {taxTaxRateEstimationFromAvalaraParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} duration - time for estimation , ms
 * @property {GUID} visitorId - visitor_id. valid from 08.03.2019
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} externalEntityId - external_entity_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - merchant status
 * @property {number} taxLong - tax_long
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<taxTaxRateEstimationFromAvalaraParams>} LogObject<taxTaxRateEstimationFromAvalaraParams>
 */
export function taxTaxRateEstimationFromAvalara(params) {
    return {
        evid: 1162,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxCommittedTaxTransactionWithAvalara' event (evid: 1163)
 *
 * Event description: when the order becomes paid / is marked as paid we commit to Avalara in order for them to record the tax taken on the order. (up to 3 times per order if for some reason the commit fails). Valid values since 25 Feb 2019 (before included also manual trnx)
 * Tax calculated during the commit can be different than the estimate. NB : field nexus_defined starts from 07.03.2019. msid is invalid
 *
 * @param {taxCommittedTaxTransactionWithAvalaraParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} orderNumber - order index number the users are seeing in their orders page
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cartid
 * @property {string} orderId - order_id
 * @property {number} taxCommittedLong - INT (multiplied by 100000), send 0 if commit failed
 * @property {number} taxEstimateLong - INT (multiplied by 100000)
 * @property {string} errorReason - in case when  is_success  = false - what was the reason
 * @property {boolean} isRetryable - in case when  is_success  = false indicator if a retry should occur after
 * @property {boolean} isSuccess - true if commit didn't fail
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} nexusDefined - true - calls where we actually needed Avalara (where we have nexus), false -  for calls that are only exists for reporting purposes (with no nexuses, will be committed with 0 tax). starts from 07.03.2019. Relevant only when is_success  = true  (in other case its just a guess)
 * @property {number} taxDifference - committed - estimate, INT (multiplied by 100000), send 0 if commit failed
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} fallbackUsed - true if fallback was used. Relevant only when is_suvvess  = true  (in other case its just a guess)
 * @return {LogObject<taxCommittedTaxTransactionWithAvalaraParams>} LogObject<taxCommittedTaxTransactionWithAvalaraParams>
 */
export function taxCommittedTaxTransactionWithAvalara(params) {
    return {
        evid: 1163,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'refundCancelEmailSentToBuyer' event (evid: 1165)
 *
 * Event description: when an email sent to the buyer due to a cancel / refund order
 *
 * @param {refundCancelEmailSentToBuyerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - the client_id of the visitor
 * @property {GUID} biToken - msid
 * @property {GUID} orderId - order_id
 * @property {string} emailType - cancel with refund / refund / cancel
 * @property {GUID} uuid - uuid
 * @property {GUID} emailRefId - email_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<refundCancelEmailSentToBuyerParams>} LogObject<refundCancelEmailSentToBuyerParams>
 */
export function refundCancelEmailSentToBuyer(params) {
    return {
        evid: 1165,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderRefundCanceled' event (evid: 1166)
 *
 * Event description: User cancel and/or refund order (full or partially)
 * If no refund requested those fields will be empty. Till 08 April 2020 msid was invalid (=store_id) and app_def_id was not reported
 *
 * @param {orderRefundCanceledParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} clientRefundId - client_refund_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} refundReason - refund reason (closed list)
 * @property {string} paymentType - offline / manual / online
 * @property {GUID} refundTransactionId - refund_request_id
 * @property {boolean} isMember - true if the order made by a member, false otherwise
 * @property {boolean} isSuccess - if the refund/cancel successed or not
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} failReason - if the request failed
 * @property {number} numOfItems - when isAll=false,  indicate how many line items are marked for refund
 * @property {string} origin - cancel order / refund order
 * @property {string} paymentProvider - order payment provider - paypal/ stripe/...
 * @property {string} currency - currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {boolean} isAll - false indicates if the refund is on line items , true - an arbitary amount (aka custom refund)
 * @property {GUID} msid - msid
 * @property {boolean} isCancel - true if the order canceled, false otherwise
 * @property {string} identityType - identity_type
 * @property {string} refundType - full / partial / none
 * @property {boolean} isEmail - true if the buyer choose to send email confirmation, otherwise false
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<orderRefundCanceledParams>} LogObject<orderRefundCanceledParams>
 */
export function orderRefundCanceled(params) {
    return {
        evid: 1166,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateFulfillmentForItemInOrderManualySm' event (evid: 1167)
 *
 * Event description: Update will accure when the user/fulfiller changes manually the tracking number or tracking link or shipping provider
 *
 * More info on 1170 event
 *
 * (fulfiller name and fulfiler type are in the creation event- 1170)
 *
 * @param {updateFulfillmentForItemInOrderManualySmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {boolean} isTPA - deprecated
 * @property {string} shippingProvider - USPS, ...
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} fulfillmentId - id of fulfillment (to join on update or delete)
 * @property {boolean} hasTrackingNumber - if fullfillment has tracking number
 * @property {GUID} userId - userid
 * @property {boolean} hasTrackingInfo - if fulfillment has tracking info - Shipping provider, Tracking number and Tracking link (not mandatory
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateFulfillmentForItemInOrderManualySmParams>} LogObject<updateFulfillmentForItemInOrderManualySmParams>
 */
export function updateFulfillmentForItemInOrderManualySm(params) {
    return {
        evid: 1167,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteFulfillmentForItemSInOrderManuallySm' event (evid: 1168)
 *
 * Event description: When a fulfillment is being deleted (there is not UI for that, so this event is rarely sent)
 *
 * @param {deleteFulfillmentForItemSInOrderManuallySmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} fulfillmentId - id of fulfillment (to join on update or delete)
 * @property {GUID} userId - userid
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteFulfillmentForItemSInOrderManuallySmParams>} LogObject<deleteFulfillmentForItemSInOrderManuallySmParams>
 */
export function deleteFulfillmentForItemSInOrderManuallySm(params) {
    return {
        evid: 1168,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillerAddedToOrder' event (evid: 1169)
 *
 * Event description: when UoU is submitting the order with external fulfiler (not selffulfill). right artifact : com.wixpress.ecommerce.wix-ecommerce-orders-web orders placed from OneApp StoreFront stored in users_10 (from web - in sites_10)
 *
 * @param {fulfillerAddedToOrderParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} fulfillerId - ID OF FULFILLER
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} numberOfItems - number of items fulfilled by the fulfiller
 * @property {boolean} isMerchant - is_merchant
 * @property {number} grandTotalLong - integer, multiplied by 100000, amount for products fulfilled by fulfiller
 * @property {string} currency - currency
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillerAddedToOrderParams>} LogObject<fulfillerAddedToOrderParams>
 */
export function fulfillerAddedToOrder(params) {
    return {
        evid: 1169,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorWhenApplyingACouponSf' event (evid: 117)
 *
 * Event description: Error when applying a coupon SF.
 *
 * @param {errorWhenApplyingACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} errorCode - dsc
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorWhenApplyingACouponSfParams>} LogObject<errorWhenApplyingACouponSfParams>
 */
export function errorWhenApplyingACouponSf(params) {
    return {
        evid: 117,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createFulfillmentForItemInOrderAutomaticallySm' event (evid: 1170)
 *
 * Event description: When TPA fullfills some items in order / user adds tracking number (from fulfillers menu in Order page or created Shipping Label with Wix)  -  on server side the fullfillment for the item is created.  This is taken into account for calculating order fulfillment status (part of the items have fulfillment, status will be `PARTIALLY_FULFILLED`, no item has fulfillment, status will be `NOT_FULFILLED`, all items have fulfillment, status will be `FULFILLED`) untill user overrides it through orders menu by mark whole order as fulfilled/unfulfilled (414 event) After user override - the auto fulfillment stop updating (is not taken into account for order status ). storing: users_10 (no app_def_id) - from BO
 * sites_10 - with app_def_id - TPA
 * sites_10 - stores app_id - Endicia. before 09.02.2020 msid was invalid (= store_id)
 *
 * @param {createFulfillmentForItemInOrderAutomaticallySmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - Deprecated
 * @property {string} fulfillerName - deprecated
 * @property {boolean} emailDefined - deprecated
 * @property {string} productsList - Deprecated
 * @property {string} orderId - order_id
 * @property {boolean} isTPA - deprecated
 * @property {string} shippingProvider - USPS, ...
 * @property {string} fulfillerType - deprecated
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - before 09.02.20 for Endicia was null
 * @property {number} numberOfItems - number of items fulfilled by the fulfiller .started to have it since 09.02.20
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all items in order
 * @property {number} grandTotalLong - integer, multiplied by 100000, amount for products fulfilled by fulfiller. started to have it since 09.02.20. NB: BUG - multiplied by 10000.
 * @property {string} fulfillmentId - id of fulfillment (to join on update or delete)
 * @property {string} currency - currency
 * @property {boolean} hasTrackingNumber - deprecated
 * @property {GUID} userId - userid
 * @property {boolean} hasTrackingInfo - if fulfillment has tracking info - Shipping provider, Tracking number and Tracking link (not mandatory
 * @property {GUID} msid - msid, before 09.02.20 was incorrect
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid, before 09.02.20 was incorrect
 * @return {LogObject<createFulfillmentForItemInOrderAutomaticallySmParams>} LogObject<createFulfillmentForItemInOrderAutomaticallySmParams>
 */
export function createFulfillmentForItemInOrderAutomaticallySm(params) {
    return {
        evid: 1170,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderUpdated' event (evid: 1171)
 *
 * Event description: When an order is updated successfully.
 *
 * @param {orderUpdatedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - id of app who sends the event (WixStores in most cases, can be Corvid as well), not id of fulfiller who will create the order
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<orderUpdatedParams>} LogObject<orderUpdatedParams>
 */
export function orderUpdated(params) {
    return {
        evid: 1171,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editOrderError' event (evid: 1172)
 *
 * Event description: When there is an error in editing order
 *
 * @param {editOrderErrorParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} errorReason - the reason for the error
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - id of app who sends the event (WixStores in most cases, can be Corvid as well), not id of fulfiller who will create the order
 * @property {string} origin - billingAddress.email / shippingAddress / sendConfirmationMail / orderId
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<editOrderErrorParams>} LogObject<editOrderErrorParams>
 */
export function editOrderError(params) {
    return {
        evid: 1172,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderSourceUpdated' event (evid: 1173)
 *
 * Event description: When an order's source is being updated (like with FB ads). This event can be send a couple of days after an order is being created.
 *
 * @param {orderSourceUpdatedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} source - The source of the order
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} transactionId - transaction_id
 * @return {LogObject<orderSourceUpdatedParams>} LogObject<orderSourceUpdatedParams>
 */
export function orderSourceUpdated(params) {
    return {
        evid: 1173,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'minimumOrderValidationError' event (evid: 1174)
 *
 * Event description: in checkout / in cart - validation to check if the grand total reach the minimum order subtotal limit - if not a message is sent to the buyer
 *
 * @param {minimumOrderValidationErrorParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} minimumValueLong - the minimum order limit the user set in the stores settings
 * @property {string} stage - The stage the error sends at (cart summary  ,place order)
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cartid
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - merchant status
 * @property {number} diffLong - The diff between the actual value and the minimum order limit
 * @property {string} currency - the currency that is presented to the buyer
 * @property {GUID} msid - msid
 * @property {string} identityType - .
 * @return {LogObject<minimumOrderValidationErrorParams>} LogObject<minimumOrderValidationErrorParams>
 */
export function minimumOrderValidationError(params) {
    return {
        evid: 1174,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardRedeemServer' event (evid: 1175)
 *
 * Event description: when gift card is redeemed (happens after click on place order before creating an  order - if redeem fails  - order is not created)
 *
 * @param {giftCardRedeemServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (Gifted App)
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} errorReason - disabled / expired / invalid / empty...
 * @property {boolean} isSuccess - true  if redeem happened
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} redeemAmountLong - integer, multiplied by 100 000
 * @property {string} redeemTransactionId - id of redeem transaction in the Gifted App
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardRedeemServerParams>} LogObject<giftCardRedeemServerParams>
 */
export function giftCardRedeemServer(params) {
    return {
        evid: 1175,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardVoidServer' event (evid: 1176)
 *
 * Event description: when gift card transaction is voided (happens if redeem suceeded but cashier / inventory failed and order was not created)- Feb 24' move to 130:3000
 *
 * @param {giftCardVoidServerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (Gifted App)
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} reason - the reason why order failed
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} redeemTransactionId - id of redeem transaction in the Gifted App
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardVoidServerParams>} LogObject<giftCardVoidServerParams>
 */
export function giftCardVoidServer(params) {
    return {
        evid: 1176,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateInventoryByOrder' event (evid: 1177)
 *
 * Event description: When the inventory of a product is being updated (increase/decrease) by an order. For all updating inventory, check 10:1179
 *
 * @param {updateInventoryByOrderParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} variantId - variant_id
 * @property {number} quantity - quantity
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} preOrderState - pre_order_state
 * @property {string} appDefId - app_def_id
 * @property {number} amount - the amount of products increase/decrease
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - order paid, order placed, order canceled / refunded, payment canceled, payment no answer
 * @property {GUID} locationId - locationid
 * @property {string} productId - product_guid
 * @property {GUID} appId - app_id
 * @property {string} inventoryPolicy - quantity / status
 * @property {string} identityType - identity_type
 * @property {string} value - quantity: out of stock = 0 in stock = 1. tracked : new quantity.
 * @property {boolean} preOrderAvailable - is the product variant  currently available for pre order?
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateInventoryByOrderParams>} LogObject<updateInventoryByOrderParams>
 */
export function updateInventoryByOrder(params) {
    return {
        evid: 1177,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryPolicyUpdated' event (evid: 1178)
 *
 * Event description: Inventory policy (tracking method) updated - quantity (tracked) status (untracked)
 *
 * @param {inventoryPolicyUpdatedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_id
 * @property {string} productId - productId
 * @property {string} inventoryPolicy - quantity (tracking) / status (not tracking)
 * @property {string} identityType - identity_type
 * @return {LogObject<inventoryPolicyUpdatedParams>} LogObject<inventoryPolicyUpdatedParams>
 */
export function inventoryPolicyUpdated(params) {
    return {
        evid: 1178,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryUpdated' event (evid: 1179)
 *
 * Event description: When the inventory of a product is being update (increase/decrese)
 *
 * @param {inventoryUpdatedParams} params - The parameters for this event
 * @property {string} variantId - variant_id
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {number} amount - the amount of products increase/decrease
 * @property {string} intentName - possible values: manual (manual update) / order (decrement from an order) / revert_inventory_change (automatic restock in case of over selling)
 * @property {string} productId - product_guid
 * @property {string} inventoryItemId - unique guid for product + variant
 * @property {string} inventoryPolicy - quantity / status
 * @property {string} identityType - identity_type
 * @property {string} value - status: out of stock = 0 in stock = 1. quantity (tracked) : new quantity.
 * @property {boolean} preOrderAvailable - is the product variant  currently available for pre order?
 * @return {LogObject<inventoryUpdatedParams>} LogObject<inventoryUpdatedParams>
 */
export function inventoryUpdated(params) {
    return {
        evid: 1179,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'removeACouponSf' event (evid: 118)
 *
 * Event description: Remove a coupon SF.
 *
 * @param {removeACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<removeACouponSfParams>} LogObject<removeACouponSfParams>
 */
export function removeACouponSf(params) {
    return {
        evid: 118,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'localDeliveryInOrderPlaced' event (evid: 1180)
 *
 * Event description: This event should be sent after an order is placed, after 1158 order placed event if the order was made with local delivery service.
 *
 * @param {localDeliveryInOrderPlacedParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} externalId - External id of shipping rule which LocalDeliveryOption is linked to. Most commonly it would be shippingRuleId from WixStores
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} optionId - Local delivery option Id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} shippingTitle - Shipping option title the UoU saw.
 * @property {boolean} isSchedule - is the selected method is schedule delivery
 * @property {string} areaType - "radius" or "zip code"
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<localDeliveryInOrderPlacedParams>} LogObject<localDeliveryInOrderPlacedParams>
 */
export function localDeliveryInOrderPlaced(params) {
    return {
        evid: 1180,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'applyACouponSf' event (evid: 119)
 *
 * Event description: Coupon applied SF.
 *
 * @param {applyACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {number} total_long - total_long
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} name - name
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {number} total - total_long
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} type - type
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<applyACouponSfParams>} LogObject<applyACouponSfParams>
 */
export function applyACouponSf(params) {
    return {
        evid: 119,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickedOnProductQuickViewSf' event (evid: 12)
 *
 * Event description: Clicked on product quick view SF.
 *
 * @param {clickedOnProductQuickViewSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {boolean} hasRibbon - has_ribbon
 * @property {string} appName - app_name
 * @property {GUID} impressionId - impression_id
 * @property {number} rank - rank
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickedOnProductQuickViewSfParams>} LogObject<clickedOnProductQuickViewSfParams>
 */
export function clickedOnProductQuickViewSf(params) {
    return {
        evid: 12,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartClickOnContinueShoppingSf' event (evid: 120)
 *
 * Event description: cart - click on continue shopping
 *
 * @param {cartClickOnContinueShoppingSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - only in minimum order modal in checkout - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - null (from checkout page) / Minimum_order_cart / minimum_order_checkout/ shopping cart
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartClickOnContinueShoppingSfParams>} LogObject<cartClickOnContinueShoppingSfParams>
 */
export function cartClickOnContinueShoppingSf(params) {
    return {
        evid: 120,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartWidgetPageRenderedSf' event (evid: 1201)
 *
 * Event description: cart icon rendered in editor
 *
 * @param {cartWidgetPageRenderedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} origin - origin
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<cartWidgetPageRenderedSfParams>} LogObject<cartWidgetPageRenderedSfParams>
 */
export function cartWidgetPageRenderedSf(params) {
    return {
        evid: 1201,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddNoteToSellerSf' event (evid: 121)
 *
 * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickOnAddNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddNoteToSellerSfParams>} LogObject<clickOnAddNoteToSellerSfParams>
 */
export function clickOnAddNoteToSellerSf(params) {
    return {
        evid: 121,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveNoteToSellerSf' event (evid: 122)
 *
 * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {saveNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {boolean} is_empty - is text field empty
 * @return {LogObject<saveNoteToSellerSfParams>} LogObject<saveNoteToSellerSfParams>
 */
export function saveNoteToSellerSf(params) {
    return {
        evid: 122,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteNoteToSellerSf' event (evid: 123)
 *
 * Event description: buyer clicks on 'delete note to seller' in cart page
 *
 * @param {deleteNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteNoteToSellerSfParams>} LogObject<deleteNoteToSellerSfParams>
 */
export function deleteNoteToSellerSf(params) {
    return {
        evid: 123,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewCartPageSf' event (evid: 124)
 *
 * Event description: view cart page. since june 2019 also for OneApp Store front
 *
 * @param {viewCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {GUID} visitorId - visitorId
 * @property {string} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} isContinueShopping - is_continue_shopping_link
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {boolean} isFullWidth - is_full_width
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_promo_code - is_promo_code
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 * @property {string} checkoutType - checkout_type
 * @property {boolean} isShippingCalculated - is_shipping_calculated
 * @property {boolean} isTaxCosts - is_tax_costs
 * @property {number} lineItemsCount - num_line_items
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {boolean} is_note - is_note
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {boolean} isDeliveryRates - is_delivery_rates
 * @property {boolean} isPickupAvailable - is_pickup_available
 * @property {GUID} checkoutId - checkout_id
 * @property {string} shippingReason - shipping_reason
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<viewCartPageSfParams>} LogObject<viewCartPageSfParams>
 */
export function viewCartPageSf(params) {
    return {
        evid: 124,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateClickedInSelectYourShippingDestinationPopupSf' event (evid: 125)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation
 *
 * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} hasZipCode - has_zip_code
 * @property {string} shippingDestinationState - shipping_destination_state
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {string} shippingDestinationCountry - shipping_destination_country
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function updateClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 125,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cancelClickedInSelectYourShippingDestinationPopupSf' event (evid: 126)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked
 *
 * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function cancelClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 126,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToWishlistSfSrc10Evid1260' event (evid: 1260)
 *
 * Event description: when a product was successfully added to wishlist after the buyer clicks on button
 *
 * @param {productAddedToWishlistSfSrc10Evid1260Params} params - The parameters for this event
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {GUID} storeId - store_id
 * @property {string} productType - Digital/ Physical
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {string} productId - product_guid
 * @return {LogObject<productAddedToWishlistSfSrc10Evid1260Params>} LogObject<productAddedToWishlistSfSrc10Evid1260Params>
 */
export function productAddedToWishlistSfSrc10Evid1260(params) {
    return {
        evid: 1260,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewOrderHistoryPageSf' event (evid: 127)
 *
 * Event description: view order history page (when it is with orders or without)
 *
 * @param {viewOrderHistoryPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact id
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewOrderHistoryPageSfParams>} LogObject<viewOrderHistoryPageSfParams>
 */
export function viewOrderHistoryPageSf(params) {
    return {
        evid: 127,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewOrderDetailsPageSf' event (evid: 128)
 *
 * Event description: view order details in order history page
 *
 * @param {viewOrderDetailsPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {number} itemsCount - number of items in the order
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order_page
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewOrderDetailsPageSfParams>} LogObject<viewOrderDetailsPageSfParams>
 */
export function viewOrderDetailsPageSf(params) {
    return {
        evid: 128,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInOrderHistoryPageSf' event (evid: 129)
 *
 * Event description: UoU clicks that are coming from the order_history page
 *
 * @param {clickInOrderHistoryPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} orderId - order id, in case we have it (in track order, view invoice)
 * @property {string} click_type - go_shopping / track_order / download / view_invoice
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order_history_page / order_details_page
 * @property {string} productId - product_guid
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInOrderHistoryPageSfParams>} LogObject<clickInOrderHistoryPageSfParams>
 */
export function clickInOrderHistoryPageSf(params) {
    return {
        evid: 129,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sortGallerySf' event (evid: 13)
 *
 * Event description: Sort gallery SF.
 *
 * @param {sortGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} method - price / newest / name
 * @property {string} sortDir - sort_order
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<sortGallerySfParams>} LogObject<sortGallerySfParams>
 */
export function sortGallerySf(params) {
    return {
        evid: 13,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToViewCartPageSf' event (evid: 130)
 *
 * Event description: click to view cart page. since june 2019 also for OneApp Store front. mini cart flor - sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {clickToViewCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {boolean} isNavigateCart - hardcoded true -> for Anodot
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - add to cart / mini cart / cart widget / checkout...
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewCartPageSfParams>} LogObject<clickToViewCartPageSfParams>
 */
export function clickToViewCartPageSf(params) {
    return {
        evid: 130,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'migrationServerShowStep' event (evid: 1300)
 *
 * Event description: show migration step - server event
 *
 * @param {migrationServerShowStepParams} params - The parameters for this event
 * @property {string} step - step - get_sites/site-list/no-sites/migration/ready/migration-preview-error/not-eligible/switching/migrate-error/success
 * @property {GUID} msidTd - msid in the td
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<migrationServerShowStepParams>} LogObject<migrationServerShowStepParams>
 */
export function migrationServerShowStep(params) {
    return {
        evid: 1300,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeMigratedToNewMsid' event (evid: 1306)
 *
 * Event description: after migration process (old store to new) this event will replace provision event for the new store.
 *
 * @param {storeMigratedToNewMsidParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<storeMigratedToNewMsidParams>} LogObject<storeMigratedToNewMsidParams>
 */
export function storeMigratedToNewMsid(params) {
    return {
        evid: 1306,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'allProductsRemovedFromCollection' event (evid: 1307)
 *
 * Event description: user removed all products from collection (using API)
 *
 * @param {allProductsRemovedFromCollectionParams} params - The parameters for this event
 * @property {string} categoryId - category_id
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<allProductsRemovedFromCollectionParams>} LogObject<allProductsRemovedFromCollectionParams>
 */
export function allProductsRemovedFromCollection(params) {
    return {
        evid: 1307,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'customFieldInProductSet' event (evid: 1308)
 *
 * Event description: when specific  key was set / updated / deleted (value  = empty)
 *
 * @param {customFieldInProductSetParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} fieldName - shippingGroupId / planIds / customFulfiller
 * @property {string} values - list of values / value
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @return {LogObject<customFieldInProductSetParams>} LogObject<customFieldInProductSetParams>
 */
export function customFieldInProductSet(params) {
    return {
        evid: 1308,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnUpdateShipToAddressSm' event (evid: 131)
 *
 * Event description: click on "Update"  ShipTo address  (address of buyer) in "Edit Customer address" popup in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnUpdateShipToAddressSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} countryTo - country of buyer
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {string} stateTo - state of buyer
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnUpdateShipToAddressSmParams>} LogObject<shippingLabelClickOnUpdateShipToAddressSmParams>
 */
export function shippingLabelClickOnUpdateShipToAddressSm(params) {
    return {
        evid: 131,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnAddNewShipFromAddressSm' event (evid: 132)
 *
 * Event description: click on "Add new" ShipFrom address (address of merchant) section in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnAddNewShipFromAddressSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnAddNewShipFromAddressSmParams>} LogObject<shippingLabelClickOnAddNewShipFromAddressSmParams>
 */
export function shippingLabelClickOnAddNewShipFromAddressSm(params) {
    return {
        evid: 132,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnHappyMomentCardOa' event (evid: 133)
 *
 * Event description: after user finished onboarding (and at least one step was from OA) happy moment card was shown and user clicks on it (and goes to social post (promote module)
 *
 * @param {clickOnHappyMomentCardOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnHappyMomentCardOaParams>} LogObject<clickOnHappyMomentCardOaParams>
 */
export function clickOnHappyMomentCardOa(params) {
    return {
        evid: 133,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickAddOnTheChooseRegionScreenOa' event (evid: 134)
 *
 * Event description: When the user click "next" in CountrySelectorScreen / CountrySubdivisionScreen screen (after choosing country / state for future tax rule)
 *
 * @param {taxClickAddOnTheChooseRegionScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} taxState - state chosen
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - country chosen
 * @property {string} type - country / state
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickAddOnTheChooseRegionScreenOaParams>} LogObject<taxClickAddOnTheChooseRegionScreenOaParams>
 */
export function taxClickAddOnTheChooseRegionScreenOa(params) {
    return {
        evid: 134,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageYourPayPalRefundPermissionShownToUserSrc10Evid135' event (evid: 135)
 *
 * Event description: When the  Refund Permission modal is shown to the user
 *
 * @param {manageYourPayPalRefundPermissionShownToUserSrc10Evid135Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageYourPayPalRefundPermissionShownToUserSrc10Evid135Params>} LogObject<manageYourPayPalRefundPermissionShownToUserSrc10Evid135Params>
 */
export function manageYourPayPalRefundPermissionShownToUserSrc10Evid135(params) {
    return {
        evid: 135,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productCreatedSm' event (evid: 1351)
 *
 * Event description: Product created SM.
 *
 * @param {productCreatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - product_name
 * @property {string} sku - sku
 * @property {boolean} visible - visible
 * @property {string} appName - app_name
 * @property {number} discountedPrice - discounted_price_long
 * @property {number} price - price_long
 * @property {string} brand - brand
 * @property {string} appDefId - app used API
 * @property {boolean} preOrder - pre_order
 * @property {boolean} isMerchant - is_merchant
 * @property {string} currency - currency
 * @property {number} itemCost - item_cost_long
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<productCreatedSmParams>} LogObject<productCreatedSmParams>
 */
export function productCreatedSm(params) {
    return {
        evid: 1351,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productDeleted' event (evid: 1353)
 *
 * Event description: Product deleted.
 *
 * @param {productDeletedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} origin - sm_single, sm_bulk, sm_import, oneapp
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @return {LogObject<productDeletedParams>} LogObject<productDeletedParams>
 */
export function productDeleted(params) {
    return {
        evid: 1353,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productUpdated' event (evid: 1355)
 *
 * Event description: When a product is updated.
 *
 * @param {productUpdatedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app used API
 * @property {string} updated - A list of the fields that were update
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @return {LogObject<productUpdatedParams>} LogObject<productUpdatedParams>
 */
export function productUpdated(params) {
    return {
        evid: 1355,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageYourPayPalRefundPermissionClickGoToAcceptPaymentSrc10Evid136' event (evid: 136)
 *
 * Event description: When the user click the 'Go To Accept Payment'
 *
 * @param {manageYourPayPalRefundPermissionClickGoToAcceptPaymentSrc10Evid136Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageYourPayPalRefundPermissionClickGoToAcceptPaymentSrc10Evid136Params>} LogObject<manageYourPayPalRefundPermissionClickGoToAcceptPaymentSrc10Evid136Params>
 */
export function manageYourPayPalRefundPermissionClickGoToAcceptPaymentSrc10Evid136(params) {
    return {
        evid: 136,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'galleryClickSortBy' event (evid: 139)
 *
 * Event description: When the user clicks the sort by button (mobile) / dropdown (desktop)
 *
 * @param {galleryClickSortByParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickSortByParams>} LogObject<galleryClickSortByParams>
 */
export function galleryClickSortBy(params) {
    return {
        evid: 139,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLoadMoreInGallerySf' event (evid: 14)
 *
 * Event description: when a buyer clicks to view more products in the gallery (load more/next page/ etc.)
 *
 * @param {clickLoadMoreInGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} categoryId - category_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - type
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickLoadMoreInGallerySfParams>} LogObject<clickLoadMoreInGallerySfParams>
 */
export function clickLoadMoreInGallerySf(params) {
    return {
        evid: 14,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'galleryClickFilter' event (evid: 140)
 *
 * Event description: When a visitor clicks "Filter" in mobile only!
 *
 * @param {galleryClickFilterParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickFilterParams>} LogObject<galleryClickFilterParams>
 */
export function galleryClickFilter(params) {
    return {
        evid: 140,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'galleryClickApplyFilter' event (evid: 141)
 *
 * Event description: When a visitor clicks "Apply Filter" in mobile only! after he choose the filters
 *
 * @param {galleryClickApplyFilterParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} filterTypes - list of the filter types changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickApplyFilterParams>} LogObject<galleryClickApplyFilterParams>
 */
export function galleryClickApplyFilter(params) {
    return {
        evid: 141,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'galleryClickClearAllFilters' event (evid: 142)
 *
 * Event description: When a visitor clicks "Clear All" in mobile only! after he in the filters view
 *
 * @param {galleryClickClearAllFiltersParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickClearAllFiltersParams>} LogObject<galleryClickClearAllFiltersParams>
 */
export function galleryClickClearAllFilters(params) {
    return {
        evid: 142,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickEditOnImageInProductPage' event (evid: 143)
 *
 * Event description: When user click to edit an image on the product pag
 *
 * @param {clickEditOnImageInProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {string} productType - digital / physical
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} productId - product
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickEditOnImageInProductPageParams>} LogObject<clickEditOnImageInProductPageParams>
 */
export function clickEditOnImageInProductPage(params) {
    return {
        evid: 143,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'mediaItemAddReplacedSuccessfullyToProductPage' event (evid: 144)
 *
 * Event description: The media item add/replaced successfully
 *
 * @param {mediaItemAddReplacedSuccessfullyToProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} videoIds - list of all videos ids
 * @property {string} imageIds - list of all images ids
 * @property {string} appName - app
 * @property {string} productType - digital / physical
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product_screen / collection_screen / all_media
 * @property {string} itemId - media item_id
 * @property {string} productId - product
 * @property {string} mediaSource - DeviceMedia / WixMedia
 * @property {string} action - add / replace
 * @property {GUID} bi_token - msid
 * @property {string} item - image / video
 * @return {LogObject<mediaItemAddReplacedSuccessfullyToProductPageParams>} LogObject<mediaItemAddReplacedSuccessfullyToProductPageParams>
 */
export function mediaItemAddReplacedSuccessfullyToProductPage(params) {
    return {
        evid: 144,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exposureEventForUsersTests' event (evid: 145)
 *
 * Event description: generic event fired on an exposure moment for users tests
 *
 * @param {exposureEventForUsersTestsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} testName - test name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - type of exposure point
 * @property {boolean} is_eligible - true if the feature eligible, false otherwise
 * @property {GUID} bi_token - msid
 * @return {LogObject<exposureEventForUsersTestsParams>} LogObject<exposureEventForUsersTestsParams>
 */
export function exposureEventForUsersTests(params) {
    return {
        evid: 145,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionCreatedSm' event (evid: 1451)
 *
 * Event description: Collection created SM.
 *
 * @param {collectionCreatedSmParams} params - The parameters for this event
 * @property {string} categoryId - category_id
 * @property {boolean} visible - the collection visibility status
 * @property {GUID} storeId - store_id
 * @property {string} slug - collections slug
 * @property {string} appDefId - app_def_id
 * @property {string} origin - bulk action / product form / collections tab
 * @property {string} identityType - identity_type
 * @return {LogObject<collectionCreatedSmParams>} LogObject<collectionCreatedSmParams>
 */
export function collectionCreatedSm(params) {
    return {
        evid: 1451,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionDeletedSm' event (evid: 1452)
 *
 * Event description: Collection deleted SM.
 *
 * @param {collectionDeletedSmParams} params - The parameters for this event
 * @property {string} categoryId - category_id
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<collectionDeletedSmParams>} LogObject<collectionDeletedSmParams>
 */
export function collectionDeletedSm(params) {
    return {
        evid: 1452,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToCollectionSm' event (evid: 1453)
 *
 * Event description: productId and categoryId were switched, fix on 6th April 2020
 *
 * @param {productAddedToCollectionSmParams} params - The parameters for this event
 * @property {string} categoryId - switched - is sent product_guid . fix on 6th April 2020
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} origin - bulk action / collections tab
 * @property {string} productId - switched - is sent category_id. fix on 6th April 2020
 * @property {string} identityType - identity_type
 * @return {LogObject<productAddedToCollectionSmParams>} LogObject<productAddedToCollectionSmParams>
 */
export function productAddedToCollectionSm(params) {
    return {
        evid: 1453,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productRemovedFromCollectionSm' event (evid: 1454)
 *
 * Event description: Product removed from collection SM.
 *
 * @param {productRemovedFromCollectionSmParams} params - The parameters for this event
 * @property {string} categoryId - category_id
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} origin - bulk action / collections tab
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @return {LogObject<productRemovedFromCollectionSmParams>} LogObject<productRemovedFromCollectionSmParams>
 */
export function productRemovedFromCollectionSm(params) {
    return {
        evid: 1454,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionUpdatedSm' event (evid: 1455)
 *
 * Event description: Collection updated SM.
 *
 * @param {collectionUpdatedSmParams} params - The parameters for this event
 * @property {string} name - collection name
 * @property {string} categoryId - collection id
 * @property {boolean} visible - the collection visibility status
 * @property {GUID} storeId - store_id
 * @property {string} slug - collection slug
 * @property {string} appDefId - app_def_id
 * @property {string} updated - list of updated fields
 * @property {string} identityType - identity_type
 * @return {LogObject<collectionUpdatedSmParams>} LogObject<collectionUpdatedSmParams>
 */
export function collectionUpdatedSm(params) {
    return {
        evid: 1455,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryKeyOfAProductSet' event (evid: 1456)
 *
 * Event description: When specific inventory key was  set/ updated.
 * currently,  the only inventory key in this event is pre order.
 * (for track quantity key see separate event 10:1178)
 *
 * @param {inventoryKeyOfAProductSetParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appDefId - app_def_id
 * @property {string} fieldName - Pre Order /  ...
 * @property {string} values - the updated values
 * @property {string} productId - product_guid
 * @property {GUID} inventoryItemId - unique id per product+variant
 * @property {string} identityType - identity_type
 * @return {LogObject<inventoryKeyOfAProductSetParams>} LogObject<inventoryKeyOfAProductSetParams>
 */
export function inventoryKeyOfAProductSet(params) {
    return {
        evid: 1456,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'invalidMediaItemResponseFailToAddItem' event (evid: 146)
 *
 * Event description: invalid media item response - video/image failed to be saved on ecom pages
 *
 * @param {invalidMediaItemResponseFailToAddItemParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} source - video maker / image studio / media manager
 * @property {string} appName - app
 * @property {string} productType - digital / physical
 * @property {boolean} isMerchant - is_merchant
 * @property {string} itemId - media item id
 * @property {GUID} productId - product
 * @property {GUID} bi_token - msid
 * @property {string} item - video / image / ....
 * @return {LogObject<invalidMediaItemResponseFailToAddItemParams>} LogObject<invalidMediaItemResponseFailToAddItemParams>
 */
export function invalidMediaItemResponseFailToAddItem(params) {
    return {
        evid: 146,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChangeGalleryFiltersSf' event (evid: 147)
 *
 * Event description: When a visitor changes one of the gallery filters
 *
 * @param {clickToChangeGalleryFiltersSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} filterType - relevant filter type (color, collection, etc...)
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToChangeGalleryFiltersSfParams>} LogObject<clickToChangeGalleryFiltersSfParams>
 */
export function clickToChangeGalleryFiltersSf(params) {
    return {
        evid: 147,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'chooseLogicForSliderGalleryOnComponentSettingsSfe' event (evid: 148)
 *
 * Event description: click on one of the radio buttons to choose which logic to display in the slider gallery
 *
 * @param {chooseLogicForSliderGalleryOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} algorithmId - algorithm_id
 * @property {string} appName - app_name
 * @property {GUID} algorithmProviderId - algorithm_provider_id
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page
 * @property {string} value - related products / collections
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseLogicForSliderGalleryOnComponentSettingsSfeParams>} LogObject<chooseLogicForSliderGalleryOnComponentSettingsSfeParams>
 */
export function chooseLogicForSliderGalleryOnComponentSettingsSfe(params) {
    return {
        evid: 148,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oneAppErrorLayer' event (evid: 149)
 *
 * Event description: when in OneApp StoreModule / StoreFront user sees "Ooops, smth went wrong" or endless spinner
 *
 * @param {oneAppErrorLayerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} errorMessage - validation error message
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} errorType - initialData
 * storeData
 * taxSettings
 * shippingSettings
 * taxRules
 * @property {string} origin - e.g. merchantDashboard
 * @property {GUID} bi_token - msid
 * @return {LogObject<oneAppErrorLayerParams>} LogObject<oneAppErrorLayerParams>
 */
export function oneAppErrorLayer(params) {
    return {
        evid: 149,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productGalleryResizeSf' event (evid: 15)
 *
 * Event description: product Gallery Resize SF.
 *
 * @param {productGalleryResizeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} categoryId - category_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {number} newGalleryWidth - width
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<productGalleryResizeSfParams>} LogObject<productGalleryResizeSfParams>
 */
export function productGalleryResizeSf(params) {
    return {
        evid: 15,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'upgradePopupPaymentTabShownSm' event (evid: 150)
 *
 * Event description: Ecom Upgrade Pop Up is shown to user after payment method is successfully connected
 *
 * @param {upgradePopupPaymentTabShownSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<upgradePopupPaymentTabShownSmParams>} LogObject<upgradePopupPaymentTabShownSmParams>
 */
export function upgradePopupPaymentTabShownSm(params) {
    return {
        evid: 150,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'upgradePopupPaymentTabInteractionSm' event (evid: 151)
 *
 * Event description: User interacts with Upgrade Pop Up which is shown after payment method is successfully connected: close or click Upgrade
 *
 * @param {upgradePopupPaymentTabInteractionSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} interaction - close/upgrade
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<upgradePopupPaymentTabInteractionSmParams>} LogObject<upgradePopupPaymentTabInteractionSmParams>
 */
export function upgradePopupPaymentTabInteractionSm(params) {
    return {
        evid: 151,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCtaClick' event (evid: 152)
 *
 * Event description: PAYMENT_CTA_CLICK.
 *
 * @param {paymentCtaClickParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} button - link / strip
 * @property {string} pageName - orders list, order page
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentCtaClickParams>} LogObject<paymentCtaClickParams>
 */
export function paymentCtaClick(params) {
    return {
        evid: 152,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCtaView' event (evid: 153)
 *
 * Event description: PAYMENT_CTA_VIEW.
 *
 * @param {paymentCtaViewParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} button - link / strip
 * @property {string} pageName - orders list, order page
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentCtaViewParams>} LogObject<paymentCtaViewParams>
 */
export function paymentCtaView(params) {
    return {
        evid: 153,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterCurrenciesListChangedSfe' event (evid: 1531)
 *
 * Event description: triggered wither When a users adds / deletes a currency from the list in currency convertor component , or when the list of checkout currencies has changed by Account manger to premium users that uses Multi-currency feature (since end of 2022)
 *
 * @param {currencyConverterCurrenciesListChangedSfeParams} params - The parameters for this event
 * @property {number} count - num of currencies in use
 * @property {string} appName - currency-site-settings- when the change is in currency convertor; checkout-currency-site-settings when the change is in checkout currencies list
 * @property {string} currencyList - list of all currencies in use
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - bi token
 * @return {LogObject<currencyConverterCurrenciesListChangedSfeParams>} LogObject<currencyConverterCurrenciesListChangedSfeParams>
 */
export function currencyConverterCurrenciesListChangedSfe(params) {
    return {
        evid: 1531,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToEditSubscriptionOnProductPage' event (evid: 154)
 *
 * Event description: when user click to edit subscription in product page
 *
 * @param {clickToEditSubscriptionOnProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} subscriptionOptionGuid - subscriptionOptionGuid
 * @property {string} productId - the product id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToEditSubscriptionOnProductPageParams>} LogObject<clickToEditSubscriptionOnProductPageParams>
 */
export function clickToEditSubscriptionOnProductPage(params) {
    return {
        evid: 154,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'hoverOnRibbonTooltipInProductPage' event (evid: 155)
 *
 * Event description: when user hover on Ribbon tooltip in product page
 *
 * @param {hoverOnRibbonTooltipInProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} msid - msid
 * @property {GUID} bi_token - msid
 * @return {LogObject<hoverOnRibbonTooltipInProductPageParams>} LogObject<hoverOnRibbonTooltipInProductPageParams>
 */
export function hoverOnRibbonTooltipInProductPage(params) {
    return {
        evid: 155,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnChangeShipFromAddressSm' event (evid: 156)
 *
 * Event description: click on "Change" ShipFrom address (address of merchant) in "Enter new Shipping from address" popup in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnChangeShipFromAddressSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {string} countryFrom - country of merchant
 * @property {string} stateFrom - state  of merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnChangeShipFromAddressSmParams>} LogObject<shippingLabelClickOnChangeShipFromAddressSmParams>
 */
export function shippingLabelClickOnChangeShipFromAddressSm(params) {
    return {
        evid: 156,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnAddCustomPackageSm' event (evid: 157)
 *
 * Event description: click on "Add Custom Package"  in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnAddCustomPackageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnAddCustomPackageSmParams>} LogObject<shippingLabelClickOnAddCustomPackageSmParams>
 */
export function shippingLabelClickOnAddCustomPackageSm(params) {
    return {
        evid: 157,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnCreateACustomPackageSm' event (evid: 158)
 *
 * Event description: click on "Create & Save" in "Create a custom package" popup  in Shipping label inner page (client event)
 *
 * @param {shippingLabelClickOnCreateACustomPackageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {string} packageDetails - json of height, width, depth
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnCreateACustomPackageSmParams>} LogObject<shippingLabelClickOnCreateACustomPackageSmParams>
 */
export function shippingLabelClickOnCreateACustomPackageSm(params) {
    return {
        evid: 158,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelSuccessPopupShownSm' event (evid: 159)
 *
 * Event description: after user payed for Shipping label success popup "Your label is ready for print" shown
 *
 * @param {shippingLabelSuccessPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} emailDefined - true if  "send shipping confirmation email" is preselected -  if for free :)
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} orderAvailability - true if "mark order as paid" is preselected - if for free :)
 * @property {string} carrierName - carrier_name
 * @property {GUID} shipmentId - id of shipping label
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelSuccessPopupShownSmParams>} LogObject<shippingLabelSuccessPopupShownSmParams>
 */
export function shippingLabelSuccessPopupShownSm(params) {
    return {
        evid: 159,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'loadingProcessPath' event (evid: 16)
 *
 * Event description: for path analysis
 *
 * @param {loadingProcessPathParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} isFirstTimeUsage - is_first_time_usage
 * @property {string} description - description
 * @property {string} appName - app_name
 * @property {number} eventIndex - event index this the 1st, 2nd, 3rd event in the path etc
 * @property {number} eventId - id of event at path
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} durationMs - he event’s time-stamp minus the previous event’s time-stamp in milliseconds
 * @property {GUID} sessionId - GUID which is created when the app initializes, which is the same for each event in a given path
 * @property {number} timestampMs - milliseconds-since-session-started
 * @property {GUID} bi_token - msid
 * @return {LogObject<loadingProcessPathParams>} LogObject<loadingProcessPathParams>
 */
export function loadingProcessPath(params) {
    return {
        evid: 16,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnBackToPaypalSf' event (evid: 160)
 *
 * Event description: buyer clicks on 'back to PayPal' in shipping screen in checkout
 *
 * @param {clickOnBackToPaypalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {string} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBackToPaypalSfParams>} LogObject<clickOnBackToPaypalSfParams>
 */
export function clickOnBackToPaypalSf(params) {
    return {
        evid: 160,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingAddressSetSf' event (evid: 161)
 *
 * Event description: Shipping address set SF. since june 2019 is also sentt from OneApp (origin =OA StoreFront)
 *
 * @param {shippingAddressSetSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingAddressSetSfParams>} LogObject<shippingAddressSetSfParams>
 */
export function shippingAddressSetSf(params) {
    return {
        evid: 161,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleBackfill' event (evid: 1612)
 *
 * Event description: This bi is relevant for the shipping rule backfill (in order to get a snapshot of the data)
 *
 * @param {shippingRuleBackfillParams} params - The parameters for this event
 * @property {string} services - json of services - each has id , title, deliveryTime, rate(ratesByRange)
 * @property {string} dest - json of countries and their states in shipping rule (code and subdivisions)
 * @property {string} name - shipping rule name
 * @property {string} fallbackOption - backup settings for the rtc option
 * @property {GUID} uuid - uuid
 * @property {string} enabled - true/false - whether the shipping rule is enabled
 * @property {string} pickupOption - array with the pickup details
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} carrierSettings - array of app id, title, default rate for the apps that were turned on in the shipping rule
 * @property {string} methodType - flat / free / price_range / weight_range / pickup_only
 * @property {number} handlingFee_long - INTEGER!!!!!!! (multiply by 100000)
 * @property {string} carrierServices - array of app ids that were turned on in the shipping rule
 * @property {string} mainPackageId - main package for the rtc option
 * @property {string} identityType - identity_type
 * @property {string} carrierType - relevant for the rtc option
 * @return {LogObject<shippingRuleBackfillParams>} LogObject<shippingRuleBackfillParams>
 */
export function shippingRuleBackfill(params) {
    return {
        evid: 1612,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickPrintLabelAfterPurchaseSm' event (evid: 162)
 *
 * Event description: user can click "Print Label" from  success popup "Your label is ready for print" or from 3dots menu in Orders page
 *
 * @param {shippingLabelClickPrintLabelAfterPurchaseSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} emailDefined - true if  "send shipping confirmation email" is marked -  if for free :)
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} orderAvailability - true if "mark order as paid" is marked - if for free :)
 * @property {string} carrierName - carrier_name
 * @property {string} origin - popup / 3dots / mainCTA
 * @property {GUID} shipmentId - id of shipping label
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickPrintLabelAfterPurchaseSmParams>} LogObject<shippingLabelClickPrintLabelAfterPurchaseSmParams>
 */
export function shippingLabelClickPrintLabelAfterPurchaseSm(params) {
    return {
        evid: 162,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnContinueToPaymentSf' event (evid: 163)
 *
 * Event description: Click on continue to payment SF (on web) since june 2019 also sent from OneApp (leads to "Review Oreder" (placeOrder) screen)
 *
 * @param {clickOnContinueToPaymentSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping choice the buyer did in the cart
 * @property {number} optionscount - number of delivery methods from which buyer choosed
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} selectedoptiontype - type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} methodType - pickup/not pickup
 * @property {string} origin - origin
 * @property {number} selectedoptionindex - index
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {string} shippingRuleOptions - shipping method type- free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup / local delivery
 * @return {LogObject<clickOnContinueToPaymentSfParams>} LogObject<clickOnContinueToPaymentSfParams>
 */
export function clickOnContinueToPaymentSf(params) {
    return {
        evid: 163,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showMerchantPaymentPopupSf' event (evid: 164)
 *
 * Event description: Show merchant payment popup SF.
 *
 * @param {showMerchantPaymentPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {GUID} bi_token - msid
 * @return {LogObject<showMerchantPaymentPopupSfParams>} LogObject<showMerchantPaymentPopupSfParams>
 */
export function showMerchantPaymentPopupSf(params) {
    return {
        evid: 164,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showMerchantUpgradePopupSf' event (evid: 165)
 *
 * Event description: Show merchant upgrade popup SF.
 *
 * @param {showMerchantUpgradePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {GUID} bi_token - msid
 * @return {LogObject<showMerchantUpgradePopupSfParams>} LogObject<showMerchantUpgradePopupSfParams>
 */
export function showMerchantUpgradePopupSf(params) {
    return {
        evid: 165,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverPaymentGatewayActivatedSm' event (evid: 1651)
 *
 * Event description: server payment gateway activated SM - same as 661 in client, but B2B payment gateways
 *
 * @param {serverPaymentGatewayActivatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} paymentMethod - payment method
 * @property {string} user_agent - user_agent
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<serverPaymentGatewayActivatedSmParams>} LogObject<serverPaymentGatewayActivatedSmParams>
 */
export function serverPaymentGatewayActivatedSm(params) {
    return {
        evid: 1651,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverPaymentGatewayDeActivatedSm' event (evid: 1652)
 *
 * Event description: server payment gateway de-activated SM - same as 662 in client, but B2B payment gateways
 *
 * @param {serverPaymentGatewayDeActivatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} uuid - uuid
 * @property {string} paymentMethod - payment method
 * @property {string} user_agent - user_agent
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<serverPaymentGatewayDeActivatedSmParams>} LogObject<serverPaymentGatewayDeActivatedSmParams>
 */
export function serverPaymentGatewayDeActivatedSm(params) {
    return {
        evid: 1652,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickNoThanksOnMerchantUpgradePopupSf' event (evid: 166)
 *
 * Event description: When the store owner clicks to continue to checkout to place a test order, in upgrade popup in the live site
 *
 * @param {clickNoThanksOnMerchantUpgradePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickNoThanksOnMerchantUpgradePopupSfParams>} LogObject<clickNoThanksOnMerchantUpgradePopupSfParams>
 */
export function clickNoThanksOnMerchantUpgradePopupSf(params) {
    return {
        evid: 166,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnMerchantUpgradePopupSf' event (evid: 167)
 *
 * Event description: Click on merchant upgrade popup SF.
 *
 * @param {clickOnMerchantUpgradePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} notificationType - merchant pop-up / buyer pop-up
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnMerchantUpgradePopupSfParams>} LogObject<clickOnMerchantUpgradePopupSfParams>
 */
export function clickOnMerchantUpgradePopupSf(params) {
    return {
        evid: 167,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'placeOrderSf' event (evid: 168)
 *
 * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay)
 *
 * @param {placeOrderSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardCode - gift_card_code
 * @property {GUID} giftCardId - gift_card_id
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - fast flow / quick flow
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {string} paymentMethod - paymentMethod
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} hasCustomField - true - if order was placed with filled custom field
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} numOfLineItems - num_of_line_items
 * @property {boolean} is_member - is_memebr
 * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
 * @property {boolean} hasPaymentMethod - true / false
 * @property {string} origin - origin
 * @property {boolean} isPremium - true / false
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<placeOrderSfParams>} LogObject<placeOrderSfParams>
 */
export function placeOrderSf(params) {
    return {
        evid: 168,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCallToActionInMerchantPopUpSf' event (evid: 169)
 *
 * Event description: click on call to action (upgrade / set payment) in merchant pop-up
 *
 * @param {clickOnCallToActionInMerchantPopUpSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} notificationType - payments/upgrade/shipping
 * @property {string} notification_type - payments/upgrade/shipping
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCallToActionInMerchantPopUpSfParams>} LogObject<clickOnCallToActionInMerchantPopUpSfParams>
 */
export function clickOnCallToActionInMerchantPopUpSf(params) {
    return {
        evid: 169,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewStorePageSf' event (evid: 17)
 *
 * Event description: view store page in viewer
 *
 * @param {viewStorePageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} pageId - page name - thank you page / product page...
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewStorePageSfParams>} LogObject<viewStorePageSfParams>
 */
export function viewStorePageSf(params) {
    return {
        evid: 17,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnBackInCheckoutProcessSf' event (evid: 170)
 *
 * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp
 *
 * @param {clickOnBackInCheckoutProcessSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - delivery options, payment
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBackInCheckoutProcessSfParams>} LogObject<clickOnBackInCheckoutProcessSfParams>
 */
export function clickOnBackInCheckoutProcessSf(params) {
    return {
        evid: 170,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelGetLabelCostsFromCarrier' event (evid: 1700)
 *
 * Event description: when user filled the necessary fields (like service, package type, addressFrom, addressTo) we request Indicia cost for label to show it to user. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelGetLabelCostsFromCarrierParams} params - The parameters for this event
 * @property {GUID} orderId - order_id
 * @property {string} countryTo - country of buyer
 * @property {GUID} storeId - store_id
 * @property {string} errorReason - only in case of fail
 * @property {number} shipmentWeightLong - integer !!! multiply by 1000000, in LB
 * @property {string} service - first_class/priority/express
 * @property {boolean} isSuccess - true  - if we succeed and start refund flow
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} packageType - flat_envelope / flat_small / flat_medium_1 / flat_medium_2 / flat_large / custom (+ weight)
 * @property {string} carrierName - usps
 * @property {string} currency - currency
 * @property {string} countryFrom - country of merchant
 * @property {string} identityType - identity_type
 * @property {string} stateTo - state of buyer
 * @property {string} stateFrom - state of merchant
 * @return {LogObject<shippingLabelGetLabelCostsFromCarrierParams>} LogObject<shippingLabelGetLabelCostsFromCarrierParams>
 */
export function shippingLabelGetLabelCostsFromCarrier(params) {
    return {
        evid: 1700,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'correiosRateRequests' event (evid: 1701)
 *
 * Event description: When correios request rate from server (temp event to investigate cache )
 *
 * @param {correiosRateRequestsParams} params - The parameters for this event
 * @property {number} rate - multiply by 100000
 * @property {string} fromState - from_state
 * @property {number} statedLength - integer !!! multiply by 100000 (length that was stated on purchasing label)
 * @property {number} weight - weight - multiply by 100000
 * @property {string} toZip - to_zip
 * @property {number} weightBucket - weightBucket
 * @property {string} fromCity - from_city
 * @property {number} statedHeight - integer !!! multiply by 100000 (height that was stated on purchasing label)
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} toState - to_state
 * @property {string} toCity - to_city
 * @property {number} toRangeId - to_range_id
 * @property {number} fromRangeId - from_range_id
 * @property {string} serviceId - serviceId
 * @property {string} identityType - identity_type
 * @property {string} fromZip - from_zip
 * @property {number} statedWidth - integer !!! multiply by 100000 (weight that was stated on purchasing label)
 * @return {LogObject<correiosRateRequestsParams>} LogObject<correiosRateRequestsParams>
 */
export function correiosRateRequests(params) {
    return {
        evid: 1701,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelPurchaseLabelFromCarrier' event (evid: 1702)
 *
 * Event description: when user filled clicked "buy" and we got approve from premium API we call Indicia to pay and get the label.. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelPurchaseLabelFromCarrierParams} params - The parameters for this event
 * @property {number} shippingInsuranceLong - integer multiplied by 100000 - - if for free)
 * @property {number} signatureConfirmationLong - integer multiplied by 100000 - - if for free)
 * @property {boolean} shippingInsurance - true if checked
 * @property {GUID} orderId - order_id
 * @property {string} countryTo - country of buyer
 * @property {GUID} storeId - store_id
 * @property {string} errorReason - only in case of failed call
 * @property {number} totalShippingCostLong - integer multiplyed by 100000 (including signatureConfirmationLong, shippingInsuranceLong)
 * @property {number} wixShippingCostLong - total cost Wix payed, integer, multiplied by 100000
 * @property {number} shipmentWeightLong - integer !!! multiply by 100000 (weight that was stated on purchasing label)
 * @property {string} service - first_class/priority/express
 * @property {boolean} isSuccess - true if we got label from Indicia
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} trackingNumber - the uniq id of package (parcel) when it is shipped
 * @property {string} packageType - lat_envelope / flat_small / flat_medium_1 / flat_medium_2 / flat_large / custom (+ weight)
 * @property {string} carrierName - usps
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} countryFrom - country of merchant
 * @property {boolean} signatureConfirmation - true if checked
 * @property {string} identityType - identity_type
 * @property {string} stateTo - state of buyer
 * @property {string} stateFrom - state of merchant
 * @return {LogObject<shippingLabelPurchaseLabelFromCarrierParams>} LogObject<shippingLabelPurchaseLabelFromCarrierParams>
 */
export function shippingLabelPurchaseLabelFromCarrier(params) {
    return {
        evid: 1702,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelPrepareShippingLabel' event (evid: 1703)
 *
 * Event description: when user clicks on "Continue to Pay" server is preparing a label. isSuccess = false in 2 cases: we failed Endicia call / error from premium. In case we succeeded with Endicia and failed with premium we will have signatureConfirmationLong and shippingInsuranceLong not null.. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelPrepareShippingLabelParams} params - The parameters for this event
 * @property {number} shippingInsuranceLong - integer multiplied by 100000
 * @property {number} signatureConfirmationLong - integer multiplied by 100000
 * @property {boolean} shippingInsurance - true if checked
 * @property {GUID} orderId - order_id
 * @property {string} countryTo - country of buyer
 * @property {GUID} storeId - store_id
 * @property {string} errorReason - only in case of fail
 * @property {number} totalShippingCostLong - integer multiplyed by 100000 (including signatureConfirmationLong, shippingInsuranceLong)
 * @property {number} shipmentWeightLong - integer !!! multiply by 100000, in LB
 * @property {string} service - first_class/priority/express
 * @property {boolean} isSuccess - true  - if we got cost from Endicia and got data from premium to show to user
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} errorType - premium / carrier
 * @property {string} packageType - flat_envelope / flat_small / flat_medium_1 / flat_medium_2 / flat_large / custom (+ weight)
 * @property {string} carrierName - usps
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} countryFrom - country of merchant
 * @property {boolean} signatureConfirmation - true if checked
 * @property {string} identityType - identity_type
 * @property {string} stateTo - state of buyer
 * @property {string} stateFrom - state of merchant
 * @property {number} rateAdjustmentLong - integer multiplied by 100000
 * @return {LogObject<shippingLabelPrepareShippingLabelParams>} LogObject<shippingLabelPrepareShippingLabelParams>
 */
export function shippingLabelPrepareShippingLabel(params) {
    return {
        evid: 1703,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelPremiumNotification' event (evid: 1704)
 *
 * Event description: after user pays in Premium modal we get notification from Premium.. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelPremiumNotificationParams} params - The parameters for this event
 * @property {string} paidAdjustmentIds - A list of adjustment ids that were paid in this payment separated by “ ,“
 * @property {GUID} storeId - store_id
 * @property {GUID} tpaSubscriptionId - package user bought
 * @property {string} invoiceId - premium #
 * @property {number} pricePaidLong - integer multiplied by 100,000 (price user paid). since 09/02/22 its the price for both shippingLabel total price + adjustments price
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} shippingLabelTotalPriceLong - integer multiplied by 100,000 (price user paid for shipping labels)
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {number} adjustmentsTotalPriceLong - adjustments_total_price_long
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelPremiumNotificationParams>} LogObject<shippingLabelPremiumNotificationParams>
 */
export function shippingLabelPremiumNotification(params) {
    return {
        evid: 1704,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelUploadToMedia' event (evid: 1705)
 *
 * Event description: after we got notification from Premium.. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelUploadToMediaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} imageUrl - image path
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelUploadToMediaParams>} LogObject<shippingLabelUploadToMediaParams>
 */
export function shippingLabelUploadToMedia(params) {
    return {
        evid: 1705,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelRefundRequestToCarrier' event (evid: 1706)
 *
 * Event description: first time we request for refund to Endicia after request from user (it can be either ok  and start refund flow or decline). This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelRefundRequestToCarrierParams} params - The parameters for this event
 * @property {GUID} orderId - order_id - can we have it?
 * @property {GUID} storeId - store_id
 * @property {string} exception - e.g. "Refund already in process" when isSuccess = true (means we mark refund as successfull while it actually was approved in previous try), also any exception got from Endicia when isSuccess = false. started to be reported since May 2020
 * @property {boolean} isSuccess - true  - if we succeed and start refund flow
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} trackingNumber - uniq id of parcell
 * @property {string} carrierName - usps
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} picNumber - uniq id to identify a label
 * @property {string} identityType - identity_type
 * @property {string} initiator - who initiate the refund: user/wix
 * @return {LogObject<shippingLabelRefundRequestToCarrierParams>} LogObject<shippingLabelRefundRequestToCarrierParams>
 */
export function shippingLabelRefundRequestToCarrier(params) {
    return {
        evid: 1706,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelRefundStatusRequestToCarrier' event (evid: 1707)
 *
 * Event description: after 14 days passed after succesfully started refund flow with Endicia (requested refund and got approve) we call to Endicia to get the refund status (if do not succeed call again next day and so on).. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelRefundStatusRequestToCarrierParams} params - The parameters for this event
 * @property {string} initiator_name - who initiate the refund: user/wix
 * @property {string} refundStatus - yes / no / retry
 * @property {GUID} orderId - order_id - can we have it?
 * @property {GUID} storeId - store_id
 * @property {number} retryNumber - for first refund request send 0
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} trackingNumber - uniq id of parcell
 * @property {string} carrierName - usps
 * @property {number} refundAmountLong - integer !!!! (multiply by 100000)
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} picNumber - uniq id to identify a label
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelRefundStatusRequestToCarrierParams>} LogObject<shippingLabelRefundStatusRequestToCarrierParams>
 */
export function shippingLabelRefundStatusRequestToCarrier(params) {
    return {
        evid: 1707,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelPremiumRefund' event (evid: 1708)
 *
 * Event description: after we got approve on Refund from Endicia (after 14 days passed)  Premium refunds user.. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelPremiumRefundParams} params - The parameters for this event
 * @property {GUID} orderId - order_id - can we have it?
 * @property {GUID} storeId - store_id
 * @property {string} invoiceId - premium #
 * @property {number} pricePaidLong - integer multiplyed by 100000 (price user paid)
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} tpaPackageId - package user bought (guid?)
 * @property {number} refundAmountLong - integer multiplyed by 100000 - amount refunded to user
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelPremiumRefundParams>} LogObject<shippingLabelPremiumRefundParams>
 */
export function shippingLabelPremiumRefund(params) {
    return {
        evid: 1708,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelWeightAdjustment' event (evid: 1709)
 *
 * Event description: if user stated in printing label not correct weight (that actually was the package) Endicia charges  / refund us extra money. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelWeightAdjustmentParams} params - The parameters for this event
 * @property {number} statedLength - integer !!! multiply by 100000
 * @property {number} actualHeight - integer !!! multiply by 100000
 * @property {GUID} orderId - order_id - can we have it?
 * @property {number} statedHeight - integer !!! multiply by 100000
 * @property {GUID} storeId - store_id
 * @property {number} actualWidth - integer !!! multiply by 100000
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} trackingNumber - the uniq id of package (parcel) when it is shipped
 * @property {number} actualWeight - integer !!! multiply by 100000. Since 10.05.2020 is in pounds (before it - in ounce)
 * @property {string} carrierName - usps
 * @property {number} actualAmount - Amount of Adjustment! Always > 0 . If status_name  = processed it is upper adjustment (means that user paid less and We pay extra money) Money!! - integer !!! multiply by 100000
 * @property {string} adjustType - upper - for extra charge, lower  - otherwise (on the money amount)
 * @property {string} status - processed / refunded
 * @property {number} statedAmount - Money!! - integer !!! multiply by 100000  (money that was stated on purchasing label)
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {number} paidAmount - amount paid by user for label Money!! - integer !!! multiply by 100000
 * @property {number} statedWeight - integer !!! multiply by 100000 (weight that was stated on purchasing label), in pounds
 * @property {string} identityType - identity_type
 * @property {number} actualLength - integer !!! multiply by 100000
 * @property {number} statedWidth - integer !!! multiply by 100000
 * @return {LogObject<shippingLabelWeightAdjustmentParams>} LogObject<shippingLabelWeightAdjustmentParams>
 */
export function shippingLabelWeightAdjustment(params) {
    return {
        evid: 1709,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnEditCartSf' event (evid: 171)
 *
 * Event description: click on edit cart button in checkout process
 *
 * @param {clickOnEditCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - page in checkout (delivery, payment...)
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditCartSfParams>} LogObject<clickOnEditCartSfParams>
 */
export function clickOnEditCartSf(params) {
    return {
        evid: 171,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelFulfillmentCreated' event (evid: 1710)
 *
 * Event description: creating fulfilment on side of shipping label. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelFulfillmentCreatedParams} params - The parameters for this event
 * @property {string} productsList - list of product_guids
 * @property {GUID} orderId - order_id
 * @property {GUID} storeId - store_id
 * @property {number} totalShippingCostLong - integer multiplyed by 100000 (including signatureConfirmationLong, shippingInsuranceLong)
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} carrierName - usps
 * @property {string} fulfillmentId - fulfillment_id
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelFulfillmentCreatedParams>} LogObject<shippingLabelFulfillmentCreatedParams>
 */
export function shippingLabelFulfillmentCreated(params) {
    return {
        evid: 1710,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelDefaultAddressFromSet' event (evid: 1711)
 *
 * Event description: when user purchases his first label / when purchases label with different address from than was set as default before. This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelDefaultAddressFromSetParams} params - The parameters for this event
 * @property {GUID} orderId - order_id
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} countryFrom - country from address From
 * @property {string} type - new / edit
 * @property {string} identityType - identity_type
 * @property {string} stateFrom - state from address From
 * @return {LogObject<shippingLabelDefaultAddressFromSetParams>} LogObject<shippingLabelDefaultAddressFromSetParams>
 */
export function shippingLabelDefaultAddressFromSet(params) {
    return {
        evid: 1711,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelLabelCancellationRequestFromPremium' event (evid: 1712)
 *
 * Event description: we got request that user’s label purchase is cancelled by premium (in case of fraud for example). This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelLabelCancellationRequestFromPremiumParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} invoiceId - premium #
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} cancellation_reason - USER_CANCEL/ FAILED_PAYMENT/TRANSFER_CANCELLATION_REASON/ UNKNOWN_CANCELLATION_TYPE_ERROR_STATE
 * @property {GUID} tpaPackageId - package user bought
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelLabelCancellationRequestFromPremiumParams>} LogObject<shippingLabelLabelCancellationRequestFromPremiumParams>
 */
export function shippingLabelLabelCancellationRequestFromPremium(params) {
    return {
        evid: 1712,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelCreateShippingLabelButtonRenderedSrc10Evid1713' event (evid: 1713)
 *
 * Event description: User paid the adjustment for the shipping labels
 * (if user stated in printing label not correct weight). This bi was deprecated due to Endicia termination on March 20th 2023.
 *
 * @param {shippingLabelCreateShippingLabelButtonRenderedSrc10Evid1713Params} params - The parameters for this event
 * @property {GUID} orderId - order_id
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} carrierName - carrier_name
 * @property {GUID} shipmentId - shipment_id
 * @property {number} adjustmentPrice - Amount of Adjustment! Always > 0 . If status_name = processed it is upper adjustment (means that user paid less and We pay  extra money) Money!! - integer !!! multiply by 100000
 * @property {string} adjustmentCurrencyCode - currency
 * @property {string} identityType - identity_type
 * @return {LogObject<shippingLabelCreateShippingLabelButtonRenderedSrc10Evid1713Params>} LogObject<shippingLabelCreateShippingLabelButtonRenderedSrc10Evid1713Params>
 */
export function shippingLabelCreateShippingLabelButtonRenderedSrc10Evid1713(params) {
    return {
        evid: 1713,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutProgressBarSf' event (evid: 172)
 *
 * Event description: click on one of the stages in the progress bar
 *
 * @param {clickOnCheckoutProgressBarSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} dest - page in checkout (delivery, payment...)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - page in checkout (delivery, payment...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCheckoutProgressBarSfParams>} LogObject<clickOnCheckoutProgressBarSfParams>
 */
export function clickOnCheckoutProgressBarSf(params) {
    return {
        evid: 172,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showShippingPopupSf' event (evid: 173)
 *
 * Event description: Show shipping popup - no shipping rule for destination
 *
 * @param {showShippingPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} bi_token - msid
 * @return {LogObject<showShippingPopupSfParams>} LogObject<showShippingPopupSfParams>
 */
export function showShippingPopupSf(params) {
    return {
        evid: 173,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'thankYouPageLoadSf' event (evid: 174)
 *
 * Event description: this event indicates witch "thank you page" was presented to the user. there are 10 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical) 2.paymentMethodType : online/offline 3. shipping method : shipping /store pickup / non.
 *
 * @param {thankYouPageLoadSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} paymentMethodType - online/offline
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} numOfLineItems - num_of_line_items
 * @property {string} payment_status - payment_status
 * @property {string} origin - origin
 * @property {string} paymentProvider - payment provider (paypal, strip....)
 * @property {string} shippingMethodType - shipping /store pickup / non
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageLoadSfParams>} LogObject<thankYouPageLoadSfParams>
 */
export function thankYouPageLoadSf(params) {
    return {
        evid: 174,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'thankYouPageDownloadFileClickedSf' event (evid: 175)
 *
 * Event description: buyer clicked on download file  in Thank you page
 *
 * @param {thankYouPageDownloadFileClickedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageDownloadFileClickedSfParams>} LogObject<thankYouPageDownloadFileClickedSfParams>
 */
export function thankYouPageDownloadFileClickedSf(params) {
    return {
        evid: 175,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'thankYouPageContinueShoppingClickedSf' event (evid: 176)
 *
 * Event description: buyer clicked on download file  in Thank you page
 *
 * @param {thankYouPageContinueShoppingClickedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageContinueShoppingClickedSfParams>} LogObject<thankYouPageContinueShoppingClickedSfParams>
 */
export function thankYouPageContinueShoppingClickedSf(params) {
    return {
        evid: 176,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentDetailsCompletedSf' event (evid: 177)
 *
 * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {paymentDetailsCompletedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {number} optionscount - number of payment options
 * @property {GUID} cartId - cartid
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} paymentProvider - payment provider that was chosen
 * @property {number} selectedoptionindex - index of selected option
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentDetailsCompletedSfParams>} LogObject<paymentDetailsCompletedSfParams>
 */
export function paymentDetailsCompletedSf(params) {
    return {
        evid: 177,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promoteProductClickedOa' event (evid: 178)
 *
 * Event description: Promote Product clicked - OA
 *
 * @param {promoteProductClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - three dots - product list and three dots - product
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<promoteProductClickedOaParams>} LogObject<promoteProductClickedOaParams>
 */
export function promoteProductClickedOa(params) {
    return {
        evid: 178,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelLabelReadySoonPopupShownSm' event (evid: 179)
 *
 * Event description: after user payed for Shipping label Unsuccess popup "Label ready soon" shown (can be in case if we can't call to Indicia or in case when label was successfully purchased but it takes time to get to get the image of label)
 *
 * @param {shippingLabelLabelReadySoonPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} reason - fail_to_call / no_image
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} shipmentId - id of shipping label
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelLabelReadySoonPopupShownSmParams>} LogObject<shippingLabelLabelReadySoonPopupShownSmParams>
 */
export function shippingLabelLabelReadySoonPopupShownSm(params) {
    return {
        evid: 179,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewStorePageInEditor' event (evid: 18)
 *
 * Event description: view store page in editor / preview
 *
 * @param {viewStorePageInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} pageId - page name - thank you page / product page...
 * @property {string} origin - editor / preview
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewStorePageInEditorParams>} LogObject<viewStorePageInEditorParams>
 */
export function viewStorePageInEditor(params) {
    return {
        evid: 18,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickVoidLabelSm' event (evid: 180)
 *
 * Event description: after user successfully purchased a label he can "void" it (cancel) from 3dots menu from order page
 *
 * @param {shippingLabelClickVoidLabelSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - id of shipping label
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickVoidLabelSmParams>} LogObject<shippingLabelClickVoidLabelSmParams>
 */
export function shippingLabelClickVoidLabelSm(params) {
    return {
        evid: 180,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionPlanCreatedSm' event (evid: 1801)
 *
 * Event description: When a user's subscription option is created in SM
 *
 * @param {subscriptionPlanCreatedSmParams} params - The parameters for this event
 * @property {string} discountType - 'PERCENT' / 'AMOUNT'
 * @property {string} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} interval - the interval on the subscription (every 3 months, every 2 weeks)
 * @property {GUID} subscriptionOptionGuid - subscription option guid
 * @property {string} identityType - identity_type
 * @property {string} subscriptionOptionType - frequency and length
 * @property {number} discount_long - INTEGER!! (multiply by 100000)
 * @return {LogObject<subscriptionPlanCreatedSmParams>} LogObject<subscriptionPlanCreatedSmParams>
 */
export function subscriptionPlanCreatedSm(params) {
    return {
        evid: 1801,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionPlanUpdatedSm' event (evid: 1802)
 *
 * Event description: When a user's subscription option is updated in SM
 *
 * @param {subscriptionPlanUpdatedSmParams} params - The parameters for this event
 * @property {string} discountType - 'PERCENT' / 'AMOUNT'
 * @property {string} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} interval - the interval on the subscription (every 3 months, every 2 weeks)
 * @property {GUID} subscriptionOptionGuid - subscription_option_guid
 * @property {string} identityType - identity_type
 * @property {string} subscriptionOptionType - subscription_option_type
 * @property {number} discount_long - INTEGER!! (multiply by 100000)
 * @return {LogObject<subscriptionPlanUpdatedSmParams>} LogObject<subscriptionPlanUpdatedSmParams>
 */
export function subscriptionPlanUpdatedSm(params) {
    return {
        evid: 1802,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionPlanDeletedSm' event (evid: 1803)
 *
 * Event description: When a user's subscription option is deleted
 *
 * @param {subscriptionPlanDeletedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - TPA id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} subscriptionOptionGuid - subscription option guid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<subscriptionPlanDeletedSmParams>} LogObject<subscriptionPlanDeletedSmParams>
 */
export function subscriptionPlanDeletedSm(params) {
    return {
        evid: 1803,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionsOneTimePurchaseUpdated' event (evid: 1804)
 *
 * Event description: when the user changes subscriptions "one time purchase" option of a product
 *
 * @param {subscriptionsOneTimePurchaseUpdatedParams} params - The parameters for this event
 * @property {string} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productId - product_guid
 * @property {string} identityType - identity_type
 * @property {string} value - true/false
 * @return {LogObject<subscriptionsOneTimePurchaseUpdatedParams>} LogObject<subscriptionsOneTimePurchaseUpdatedParams>
 */
export function subscriptionsOneTimePurchaseUpdated(params) {
    return {
        evid: 1804,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelConfirmVoidShippingLabelInWarningPopupSm' event (evid: 181)
 *
 * Event description: after user clicked "void shipping label" (cancel) from 3dots menu from order page user confirms cancelling label in the warning popup
 *
 * @param {shippingLabelConfirmVoidShippingLabelInWarningPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - id of shipping label
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupSmParams>} LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupSmParams>
 */
export function shippingLabelConfirmVoidShippingLabelInWarningPopupSm(params) {
    return {
        evid: 181,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickOnReviewBuyLabelSm' event (evid: 182)
 *
 * Event description: click on "Continue to Pay" in label inner page (client event). clickable only after user put valid Shipping to / from address and all required fields to estimate package price
 *
 * @param {shippingLabelClickOnReviewBuyLabelSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} shippingInsuranceLong - integer multiplied by 100000. The value user inserted (how he assets his package) not what user will pay (like in all other shipping events)
 * @property {string} package - flat_envelope / flat_small / flat_medium_1 / flat_medium_2 / flat_large / custom (?do we need more  info)
 * @property {number} signatureConfirmationLong - deprecated (do not have this info)
 * @property {boolean} shippingInsurance - true if checked
 * @property {number} paidShippingCostLong - integer multiplied by 100000
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {string} countryTo - country of buyer
 * @property {string} packageContentType - merchandise / gifts / other
 * @property {number} totalShippingCostLong - deprecated (do not have this info)
 * @property {string} service - first_class/priority/express
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - usps
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {string} countryFrom - country of merchant
 * @property {boolean} signatureConfirmation - true if checked
 * @property {string} stateTo - state of buyer
 * @property {string} stateFrom - state of merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickOnReviewBuyLabelSmParams>} LogObject<shippingLabelClickOnReviewBuyLabelSmParams>
 */
export function shippingLabelClickOnReviewBuyLabelSm(params) {
    return {
        evid: 182,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorInAddProductToCartOneAppStoreFront' event (evid: 183)
 *
 * Event description: when buyer clicked "Add to Cart" in product page but it doesn't work because buyer didn't selected product option / custom field / product with this product options is out of stock (if the quantity of selected)
 *
 * @param {errorInAddProductToCartOneAppStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} field - list of invalid fields (comma delimited) from quantity / product_options / custom_field
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {string} message - validation error
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorInAddProductToCartOneAppStoreFrontParams>} LogObject<errorInAddProductToCartOneAppStoreFrontParams>
 */
export function errorInAddProductToCartOneAppStoreFront(params) {
    return {
        evid: 183,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oneAppStoreFrontClearCartSf' event (evid: 184)
 *
 * Event description: buyer cleared cart (in cart page from 3dots menu) after it the cart becomes innactive (will get neww cart_id)
 *
 * @param {oneAppStoreFrontClearCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - # of products in cart
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true  - for merchant false for member
 * @property {GUID} bi_token - msid
 * @return {LogObject<oneAppStoreFrontClearCartSfParams>} LogObject<oneAppStoreFrontClearCartSfParams>
 */
export function oneAppStoreFrontClearCartSf(params) {
    return {
        evid: 184,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickManageProductInCartOaStoreFront' event (evid: 185)
 *
 * Event description: wneh buyer in StoreFront (member view) clicks on Product name in cart (leads to open Manage Product popup)
 *
 * @param {clickManageProductInCartOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - cart_type
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner and false for member
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickManageProductInCartOaStoreFrontParams>} LogObject<clickManageProductInCartOaStoreFrontParams>
 */
export function clickManageProductInCartOaStoreFront(params) {
    return {
        evid: 185,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnViewItemsInReviewOrderScreenOaStoreFront' event (evid: 186)
 *
 * Event description: buyer in OneApp StoreFront (member view) in checkout on review order (place order in other words) stage clicks on View items(leads to open "Your items" screen - entry point to edit cart)
 *
 * @param {clickOnViewItemsInReviewOrderScreenOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnViewItemsInReviewOrderScreenOaStoreFrontParams>} LogObject<clickOnViewItemsInReviewOrderScreenOaStoreFrontParams>
 */
export function clickOnViewItemsInReviewOrderScreenOaStoreFront(params) {
    return {
        evid: 186,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnMyOrdersInThankYouPageOaStoreFront' event (evid: 187)
 *
 * Event description: in One App Sore Front )member view)  Thank you page buyer clicked My Orders (leads to open My Orders screen)
 *
 * @param {clickOnMyOrdersInThankYouPageOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>} LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>
 */
export function clickOnMyOrdersInThankYouPageOaStoreFront(params) {
    return {
        evid: 187,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickTrackOrderInMyOrderOaStoreFront' event (evid: 188)
 *
 * Event description: in MyOrder OA StoreFront buyer (member) can click on "Track order" if merchant already added tracking # (with appropriate link)
 *
 * @param {clickTrackOrderInMyOrderOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickTrackOrderInMyOrderOaStoreFrontParams>} LogObject<clickTrackOrderInMyOrderOaStoreFrontParams>
 */
export function clickTrackOrderInMyOrderOaStoreFront(params) {
    return {
        evid: 188,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeFrontPopupShownClckedOa' event (evid: 189)
 *
 * Event description: Merchant saw/ clicked on StoreFront popup (in MemberView)  . shown only for one time - first entering Store OA
 *
 * @param {storeFrontPopupShownClckedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - shown / clicked
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeFrontPopupShownClckedOaParams>} LogObject<storeFrontPopupShownClckedOaParams>
 */
export function storeFrontPopupShownClckedOa(params) {
    return {
        evid: 189,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'creditCardErrorInCheckoutSf' event (evid: 19)
 *
 * Event description: for square integration
 *
 * @param {creditCardErrorInCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - na
 * @property {GUID} cartId - na
 * @property {string} field - cardNumber/expirationDate/postalCode/cvv
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} errorCode - na
 * @property {string} message - for example Expiration date is not valid
 * @property {string} type - VALIDATION_ERROR/INVALID_APPLICATION_ID//MISSING_CARD_DATA/TOO_MANY_REQUESTS/UNAUTHORIZED//UNKNOWN...
 * @property {GUID} bi_token - msid
 * @return {LogObject<creditCardErrorInCheckoutSfParams>} LogObject<creditCardErrorInCheckoutSfParams>
 */
export function creditCardErrorInCheckoutSf(params) {
    return {
        evid: 19,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeFrontCardClickedOa' event (evid: 190)
 *
 * Event description: StoreFront card (in StoresDashboard) was clicked (leads to open Member view)
 *
 * @param {storeFrontCardClickedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeFrontCardClickedOaParams>} LogObject<storeFrontCardClickedOaParams>
 */
export function storeFrontCardClickedOa(params) {
    return {
        evid: 190,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionCreated' event (evid: 1901)
 *
 * Event description: When a subscription is created.
 *
 * @param {subscriptionCreatedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {string} appName - app_name
 * @property {GUID} subscriptionId - subscription_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} subscriptionOptionGuid - subscription_option_guid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<subscriptionCreatedParams>} LogObject<subscriptionCreatedParams>
 */
export function subscriptionCreated(params) {
    return {
        evid: 1901,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionPlaced' event (evid: 1902)
 *
 * Event description: When a subscription is placed (before created).
 *
 * @param {subscriptionPlacedParams} params - The parameters for this event
 * @property {GUID} visitorId - visitor_id
 * @property {string} storeId - store_id
 * @property {GUID} subscriptionId - subscription_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} subscriptionOptionGuid - subscription_option_guid
 * @property {string} identityType - identity_type
 * @return {LogObject<subscriptionPlacedParams>} LogObject<subscriptionPlacedParams>
 */
export function subscriptionPlaced(params) {
    return {
        evid: 1902,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToAddTrackingNumberSm' event (evid: 191)
 *
 * Event description: User clicks on Add  tracking number  the order info (old Order page) / Fulfiller Action Menu (New order page). Click Add trac
 *
 * @param {clickToAddTrackingNumberSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill, Modalist, FBA,...
 * @property {string} appName - app name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - mainCTA/ 3 dots
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToAddTrackingNumberSmParams>} LogObject<clickToAddTrackingNumberSmParams>
 */
export function clickToAddTrackingNumberSm(params) {
    return {
        evid: 191,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnGoToMarketingSm' event (evid: 192)
 *
 * Event description: Click on "Go to Wix Marketing Tools " from SM . (e.g. from empty state of orders list page)
 *
 * @param {clickOnGoToMarketingSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - e.g. orders.list
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnGoToMarketingSmParams>} LogObject<clickOnGoToMarketingSmParams>
 */
export function clickOnGoToMarketingSm(params) {
    return {
        evid: 192,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectProductTaxGroupInProductScreenClickedOa' event (evid: 193)
 *
 * Event description: When user inside Product screen (OneApp) click on ProductTaxGroup (leads to Open ProductTaxGroup screen)
 *
 * @param {selectProductTaxGroupInProductScreenClickedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectProductTaxGroupInProductScreenClickedOaParams>} LogObject<selectProductTaxGroupInProductScreenClickedOaParams>
 */
export function selectProductTaxGroupInProductScreenClickedOa(params) {
    return {
        evid: 193,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnGoToTpaSDashboard' event (evid: 194)
 *
 * Event description: User clicks on "Go to.." (with link to TPA “orders” dashboard) inside fulfiller's menu of Order page
 *
 * @param {clickOnGoToTpaSDashboardParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill  )
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - order/ fulfill
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnGoToTpaSDashboardParams>} LogObject<clickOnGoToTpaSDashboardParams>
 */
export function clickOnGoToTpaSDashboard(params) {
    return {
        evid: 194,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickGetLabelSm' event (evid: 195)
 *
 * Event description: user clicks on "Get Label" (begining of Shipping Label flow, Main CTA in selfulfill section of Order page)
 *
 * @param {shippingLabelClickGetLabelSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickGetLabelSmParams>} LogObject<shippingLabelClickGetLabelSmParams>
 */
export function shippingLabelClickGetLabelSm(params) {
    return {
        evid: 195,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnChangeLinkInSettingsSfe' event (evid: 196)
 *
 * Event description: when the user click on the change link in the settings of the cart or the thank you page / my orders
 *
 * @param {clickOnChangeLinkInSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {string} element - continue shopping / empty state / back to store
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - current navigation link
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnChangeLinkInSettingsSfeParams>} LogObject<clickOnChangeLinkInSettingsSfeParams>
 */
export function clickOnChangeLinkInSettingsSfe(params) {
    return {
        evid: 196,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'linkChangedInSettingsSfe' event (evid: 197)
 *
 * Event description: when the link changed in the settings of the cart or the thank you page / my orders
 *
 * @param {linkChangedInSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {string} element - continue shopping / empty state / back to store
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - new link changed
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {string} value - deprecated
 * @property {GUID} bi_token - msid
 * @return {LogObject<linkChangedInSettingsSfeParams>} LogObject<linkChangedInSettingsSfeParams>
 */
export function linkChangedInSettingsSfe(params) {
    return {
        evid: 197,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelPremiumModalShownSm' event (evid: 198)
 *
 * Event description: after user clicked "Continue to Pay" the premium modal is shown (Checkout Modal Component, the title is "Shipping Label payment")
 *
 * @param {shippingLabelPremiumModalShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - can we have it?
 * @property {number} totalShippingCostLong - integer multiplied by 100000
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelPremiumModalShownSmParams>} LogObject<shippingLabelPremiumModalShownSmParams>
 */
export function shippingLabelPremiumModalShownSm(params) {
    return {
        evid: 198,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickInPremiumModalSm' event (evid: 199)
 *
 * Event description: user clicks "Submit Purchase" in  premium modal (Checkout Modal Component, the title is "Shipping Label payment")
 *
 * @param {shippingLabelClickInPremiumModalSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - can we have it?
 * @property {boolean} defaultCard - true  if user wants to pay with predefined card
 * @property {number} totalShippingCostLong - integer multiplied by 100000
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} shipmentId - id of shipping label
 * @property {string} currency - currency
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelClickInPremiumModalSmParams>} LogObject<shippingLabelClickInPremiumModalSmParams>
 */
export function shippingLabelClickInPremiumModalSm(params) {
    return {
        evid: 199,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'buyersErrorEventSf' event (evid: 20)
 *
 * Event description: This event will shot when ever an error acure on the SF
 *
 * @param {buyersErrorEventSfParams} params - The parameters for this event
 * @property {string} dsc - dsc
 * @property {number} response_time - Time in ms from load to error
 * @property {string} vsi - vsi
 * @property {number} time - Time in ms from load to error
 * @property {string} server - server
 * @property {string} builderType - builder_type
 * @property {string} errscp - error scope
 * @property {GUID} site_id - changed from did -> site_id on Oct 03, 2013
 * @property {string} errn - error name
 * @property {string} p4 - 4st extra parameter
 * @property {string} description - description
 * @property {string} majorver - the major version of html editor
 * @property {string} appName - app name
 * @property {string} trgt - target name, api call or class
 * @property {boolean} isLiveEditor - is_live_editor
 * @property {number} ts - Time in ms from load to error
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewmode - viewmode
 * @property {string} error_description_short - error_description_short
 * @property {string} p3 - 3rd extra parameter
 * @property {GUID} did - changed from did -> site_id on Oct 03, 2013
 * @property {number} errorCode - error code
 * @property {GUID} cid - client_id
 * @property {boolean} isSg - is_sg
 * @property {string} p2 - 2nd extra parameter
 * @property {string} ver - ver
 * @property {number} errc - error code
 * @property {string} stack - stacktrace
 * @property {GUID} metasiteid - metasiteid
 * @property {string} old_hight - old_hight
 * @property {number} sev - severity of the error
 * @property {GUID} esi - esi
 * @property {number} cat - category id
 * @property {string} errormsg - dsc
 * @property {string} p1 - 1st extra parameter
 * @property {GUID} msid - msid
 * @property {number} iss - issue (sub-category)
 * @property {string} new_hight - new_hight
 * @return {LogObject<buyersErrorEventSfParams>} LogObject<buyersErrorEventSfParams>
 */
export function buyersErrorEventSf(params) {
    return {
        evid: 20,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectPaymentCategorySfCashier' event (evid: 200)
 *
 * Event description: Select payment category SF cashier - select radio button
 *
 * @param {selectPaymentCategorySfCashierParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} paymentCategory - CreditCard/Ewallet
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {string} user_agent - user_agent
 * @property {GUID} app_instance_id - store_Id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectPaymentCategorySfCashierParams>} LogObject<selectPaymentCategorySfCashierParams>
 */
export function selectPaymentCategorySfCashier(params) {
    return {
        evid: 200,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sapir1' event (evid: 2001)
 *
 * Event description: fired when a new product option is created
 *
 * @param {sapir1Params} params - The parameters for this event
 * @property {string} name - Option name
 * @property {GUID} optionId - Id of the option
 * @property {string} optionType - text/color/image /UNSPECIFIED
 * @property {number} numberOfProducts - number of product the option is connected to. when the option is created the number will be 0.
 * @property {number} optionSize - number of choices in the option
 * @return {LogObject<sapir1Params>} LogObject<sapir1Params>
 */
export function sapir1(params) {
    return {
        evid: 2001,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sapir2' event (evid: 2002)
 *
 * Event description: fired when a new product option is updated
 *
 * @param {sapir2Params} params - The parameters for this event
 * @property {string} name - Option name
 * @property {GUID} optionId - Id of the option
 * @property {string} optionType - text/color/image /UNSPECIFIED
 * @property {number} numberOfProducts - number of product the option is connected to. when the option is created the number will be 0.
 * @property {string} updatedFields - list of the field that where updated
 * @property {number} optionSize - number of choices in the option
 * @return {LogObject<sapir2Params>} LogObject<sapir2Params>
 */
export function sapir2(params) {
    return {
        evid: 2002,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionDeleted' event (evid: 2003)
 *
 * Event description: fired when a new product option is deleted
 *
 * @param {productOptionDeletedParams} params - The parameters for this event
 * @property {GUID} optionId - Id of the option
 * @return {LogObject<productOptionDeletedParams>} LogObject<productOptionDeletedParams>
 */
export function productOptionDeleted(params) {
    return {
        evid: 2003,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'optionAddedToProduct' event (evid: 2004)
 *
 * Event description: fired when an Option added from Product
 *
 * @param {optionAddedToProductParams} params - The parameters for this event
 * @property {string} productId - the id of the product that the option added to
 * @property {GUID} optionId - Id of the option
 * @return {LogObject<optionAddedToProductParams>} LogObject<optionAddedToProductParams>
 */
export function optionAddedToProduct(params) {
    return {
        evid: 2004,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'optionRemovedFromProduct' event (evid: 2005)
 *
 * Event description: fired when an Option Removed from Product
 *
 * @param {optionRemovedFromProductParams} params - The parameters for this event
 * @property {string} productId - the id of the product that the option removed from
 * @property {GUID} optionId - Id of the option
 * @return {LogObject<optionRemovedFromProductParams>} LogObject<optionRemovedFromProductParams>
 */
export function optionRemovedFromProduct(params) {
    return {
        evid: 2005,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionCreated' event (evid: 2006)
 *
 * Event description: this event fired when an info section is created. the event is part of the catalog rewrite.
 *
 * @param {infoSectionCreatedParams} params - The parameters for this event
 * @property {string} name - Info section unique  name
 * @property {GUID} infoSectionId - Info section id
 * @property {string} description - Info section description
 * @property {string} richContentDescription - rich Content Description
 * @property {string} title - Info section title
 * @return {LogObject<infoSectionCreatedParams>} LogObject<infoSectionCreatedParams>
 */
export function infoSectionCreated(params) {
    return {
        evid: 2006,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionUpdated' event (evid: 2007)
 *
 * Event description: this event fired when an info section is updated. the event is part of the catalog rewrite
 *
 * @param {infoSectionUpdatedParams} params - The parameters for this event
 * @property {string} name - Info section unique  name
 * @property {GUID} infoSectionId - Info section id
 * @property {string} description - Info section description
 * @property {string} richContentDescription - rich Content Description
 * @property {string} updatedFields - The names of the fields that were updated are listed in an array
 * @property {string} title - Info section title
 * @return {LogObject<infoSectionUpdatedParams>} LogObject<infoSectionUpdatedParams>
 */
export function infoSectionUpdated(params) {
    return {
        evid: 2007,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionDeleted' event (evid: 2008)
 *
 * Event description: this event fired when an info section is deleted. the event is part of the catalog rewrite
 *
 * @param {infoSectionDeletedParams} params - The parameters for this event
 * @property {GUID} infoSectionId - Info section id
 * @return {LogObject<infoSectionDeletedParams>} LogObject<infoSectionDeletedParams>
 */
export function infoSectionDeleted(params) {
    return {
        evid: 2008,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionBulkAction' event (evid: 2009)
 *
 * Event description: this event fired when an info section bulk action happens (create/update/delete) . the event is part of the catalog rewrite
 *
 * @param {infoSectionBulkActionParams} params - The parameters for this event
 * @property {number} totalFailures - Number of failed actions out of bulk  This field contains number for update/create/delete
 * @property {string} actionType - create/update/delete
 * @property {number} totalSuccesses - Number of successfully completed actions out of bulk This field contains number for update/create/delete only
 * @return {LogObject<infoSectionBulkActionParams>} LogObject<infoSectionBulkActionParams>
 */
export function infoSectionBulkAction(params) {
    return {
        evid: 2009,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iframeLoadedSfCashier' event (evid: 201)
 *
 * Event description: Iframe loaded
 *
 * @param {iframeLoadedSfCashierParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} paymentCategory - CreditCard/Ewallet
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {string} user_agent - user_agent
 * @property {GUID} app_instance_id - storeId
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<iframeLoadedSfCashierParams>} LogObject<iframeLoadedSfCashierParams>
 */
export function iframeLoadedSfCashier(params) {
    return {
        evid: 201,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'brandCreated' event (evid: 2010)
 *
 * Event description: fired when new brand is created
 *
 * @param {brandCreatedParams} params - The parameters for this event
 * @property {string} brandName - Name of the brand
 * @property {string} brandGuid - id of the brand
 * @return {LogObject<brandCreatedParams>} LogObject<brandCreatedParams>
 */
export function brandCreated(params) {
    return {
        evid: 2010,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'brandDeleted' event (evid: 2011)
 *
 * Event description: fired when brand is deleted
 *
 * @param {brandDeletedParams} params - The parameters for this event
 * @property {string} brandGuid - Brand’s id
 * @return {LogObject<brandDeletedParams>} LogObject<brandDeletedParams>
 */
export function brandDeleted(params) {
    return {
        evid: 2011,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'brandBulkAction' event (evid: 2012)
 *
 * Event description: fired when brand baulk action placed
 *
 * @param {brandBulkActionParams} params - The parameters for this event
 * @property {number} totalFailures - Number of failed actions out of bulk  This field contains number for update/create/delete
 * @property {string} actionType - Currently only create
 * @property {number} totalSuccesses - Number of successfully completed actions out of bulk This field contains number for update/create/delete only
 * @return {LogObject<brandBulkActionParams>} LogObject<brandBulkActionParams>
 */
export function brandBulkAction(params) {
    return {
        evid: 2012,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInSelectTrackingNumberToEditPopupSm' event (evid: 202)
 *
 * Event description: User clicks on "Next" in "Select tracking number to edit" popup (edit tracking number flow  - appears only if user has multiple tracking numbers per order)
 *
 * @param {clickInSelectTrackingNumberToEditPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill  )
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier name..
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInSelectTrackingNumberToEditPopupSmParams>} LogObject<clickInSelectTrackingNumberToEditPopupSmParams>
 */
export function clickInSelectTrackingNumberToEditPopupSm(params) {
    return {
        evid: 202,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingGroupsClickManageGroupsAndProductsSm' event (evid: 203)
 *
 * Event description: when the merchant click to manage groups and products
 *
 * @param {shippingGroupsClickManageGroupsAndProductsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - create / edit
 * @property {string} appName - app name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingGroupsClickManageGroupsAndProductsSmParams>} LogObject<shippingGroupsClickManageGroupsAndProductsSmParams>
 */
export function shippingGroupsClickManageGroupsAndProductsSm(params) {
    return {
        evid: 203,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promotionalAssetDisplayToUserSrc10Evid204' event (evid: 204)
 *
 * Event description: generic event for promotional assets shown to user (dealer or in-house developed assets)
 *
 * @param {promotionalAssetDisplayToUserSrc10Evid204Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name of the asset
 * @property {string} appName - app
 * @property {string} cta_type - link , button
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the page name
 * @property {string} content - content from dealer
 * @property {string} type - asset type (banner,light-box...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<promotionalAssetDisplayToUserSrc10Evid204Params>} LogObject<promotionalAssetDisplayToUserSrc10Evid204Params>
 */
export function promotionalAssetDisplayToUserSrc10Evid204(params) {
    return {
        evid: 204,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveShippingRateCalculationSettings' event (evid: 205)
 *
 * Event description: when the merchant save his shipping rule with rate per product the shipping rate calculation is saved for all regions with the rate per product
 *
 * @param {saveShippingRateCalculationSettingsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} rateCalculationMethod - per_product_group / per_each_product /higher_rate_from_all_once
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveShippingRateCalculationSettingsParams>} LogObject<saveShippingRateCalculationSettingsParams>
 */
export function saveShippingRateCalculationSettings(params) {
    return {
        evid: 205,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSortInOrdersTableSm' event (evid: 206)
 *
 * Event description: user click on the column name to sort by payment/fulfillment/
 *
 * @param {clickSortInOrdersTableSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - wixstore (for oneApp); storeManagerApp / businessManagerStores for web
 * @property {string} direction - ascending/descending
 * @property {boolean} isMerchant - is_merchant
 * @property {string} column - payment/fulfillment/order/date/customer/total
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickSortInOrdersTableSmParams>} LogObject<clickSortInOrdersTableSmParams>
 */
export function clickSortInOrdersTableSm(params) {
    return {
        evid: 206,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingGroupsClickInDefaultGroupPopupSm' event (evid: 207)
 *
 * Event description: when the merchant opened shipping group for the first time and goes through "onboaring" : clicks in wellcome/default group popup
 *
 * @param {shippingGroupsClickInDefaultGroupPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} value - next/cancel
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingGroupsClickInDefaultGroupPopupSmParams>} LogObject<shippingGroupsClickInDefaultGroupPopupSmParams>
 */
export function shippingGroupsClickInDefaultGroupPopupSm(params) {
    return {
        evid: 207,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceChangePriceCogModalLoaded' event (evid: 208)
 *
 * Event description: The event is sent when the change Price/cog Modal loaded
 * as part of bulk actions in product list on cairo.
 *
 * @param {bulkActionCogChangePriceChangePriceCogModalLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceChangePriceCogModalLoadedParams>} LogObject<bulkActionCogChangePriceChangePriceCogModalLoadedParams>
 */
export function bulkActionCogChangePriceChangePriceCogModalLoaded(params) {
    return {
        evid: 208,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingGroupsSaveNewShippingGroupSm' event (evid: 209)
 *
 * Event description: when merchant clicked "add" in "add group" popup/ "v" in dropdown
 *
 * @param {shippingGroupsSaveNewShippingGroupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} shippingGroupId - shipping group id
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - modal / dropdown
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingGroupsSaveNewShippingGroupSmParams>} LogObject<shippingGroupsSaveNewShippingGroupSmParams>
 */
export function shippingGroupsSaveNewShippingGroupSm(params) {
    return {
        evid: 209,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createNewFbPageClickedFb' event (evid: 21)
 *
 * Event description: user clicked on create new FB page (in the pop up were he fills the page logo,...)
 *
 * @param {createNewFbPageClickedFbParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<createNewFbPageClickedFbParams>} LogObject<createNewFbPageClickedFbParams>
 */
export function createNewFbPageClickedFb(params) {
    return {
        evid: 21,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingGroupsClickOnDeleteInMenuSm' event (evid: 210)
 *
 * Event description: user clicked on "delete" in menu (leads to open"delete group"  popup)
 *
 * @param {shippingGroupsClickOnDeleteInMenuSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingGroupsClickOnDeleteInMenuSmParams>} LogObject<shippingGroupsClickOnDeleteInMenuSmParams>
 */
export function shippingGroupsClickOnDeleteInMenuSm(params) {
    return {
        evid: 210,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartWidgetLoadedSf' event (evid: 211)
 *
 * Event description: Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 * This bi is being sent when there is loading of page that has mini cart on it (in every loading of the page, even if the mini cart was not opened)
 *
 * @param {cartWidgetLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - fucj
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} cartId - cart_id. Note this field was implemented in July 24
 * @return {LogObject<cartWidgetLoadedSfParams>} LogObject<cartWidgetLoadedSfParams>
 */
export function cartWidgetLoadedSf(params) {
    return {
        evid: 211,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoadedOa' event (evid: 212)
 *
 * Event description: when specific stores screen(product_list, order_list, product, product_new, order) was rendered OneApp. is not sent for rendering coupons
 *
 * @param {pageLoadedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} state - full/empty/filtered
 * @property {boolean} hasNotifyMe - true (collecting BIS requests) false (not collecting BIS requests)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - id of site's owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {string} id - product_id for product screen
 * @property {string} layoutSettings - crop / fit
 * @property {string} previousPage - where  the user came from (stores_home  - for tabs in StoresHome, previous page_name for others)
 * @property {boolean} hasPaymentMethod - for orders screen - true if user has at least one payment method connected
 * @property {string} origin - merchantView / memberView / oneAppDashboard
 * @property {boolean} isPremium - for orders screen. true if user is premium (and do not see a bunner to upgrade)
 * @property {string} pageName - current rendered page (products, orders, product, product_new, order, dashboard, settings, shipping..., tax...)/ cannot_sell / view_store /local delivery / local delivery areas
 * @property {number} mediaCount - number of media items for the product page
 * @property {string} inventoryStatus - in_stock, out_of_stock, partially_out_of_stock
 * @property {GUID} bi_token - msid
 * @return {LogObject<pageLoadedOaParams>} LogObject<pageLoadedOaParams>
 */
export function pageLoadedOa(params) {
    return {
        evid: 212,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingGroupsClickInDeleteGroupPopupSm' event (evid: 213)
 *
 * Event description: merchant clicked "Delete" in "delete group" popup
 *
 * @param {shippingGroupsClickInDeleteGroupPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} shippingGroupId - shipping group id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingGroupsClickInDeleteGroupPopupSmParams>} LogObject<shippingGroupsClickInDeleteGroupPopupSmParams>
 */
export function shippingGroupsClickInDeleteGroupPopupSm(params) {
    return {
        evid: 213,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChooseProductsToAddTrackingNumberOa' event (evid: 214)
 *
 * Event description: User clicks on "select products to apply" in Add  tracking number dialog (for Selffulfill Products) OR clicks on "Add tracking number manually" in Fulfill TPA's dialog (for TPA's products) in OneApp. In both cases leads to Open ChooseProducts screen
 *
 * @param {clickToChooseProductsToAddTrackingNumberOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill, Modalist, FBA,...
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - fulfill/add tracking number
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToChooseProductsToAddTrackingNumberOaParams>} LogObject<clickToChooseProductsToAddTrackingNumberOaParams>
 */
export function clickToChooseProductsToAddTrackingNumberOa(params) {
    return {
        evid: 214,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsChosenToAddTrackingNumberDialogOa' event (evid: 215)
 *
 * Event description: User clicks "Add  tracking number" in choose product dialog OR clicks on "Apply to all products" in AddTracking Dialog in OneApp. Start of "Add tracking number flow" in OneApp (to scan barcode OR enter manually in Orders 3.0)
 *
 * @param {productsChosenToAddTrackingNumberDialogOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} quantity - number of item tracking number is applied
 * @property {string} fulfillerName - selffulfill, Modalist, FBA,...
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {number} total - total number of items in order
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productInfo - what is sent to server
 * @property {string} type - all / spesific
 * @property {GUID} bi_token - msid
 * @return {LogObject<productsChosenToAddTrackingNumberDialogOaParams>} LogObject<productsChosenToAddTrackingNumberDialogOaParams>
 */
export function productsChosenToAddTrackingNumberDialogOa(params) {
    return {
        evid: 215,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOn3DotsOrderSMenuOa' event (evid: 216)
 *
 * Event description: User clicks on 3dots  in Order's page in OneApp
 *
 * @param {clickOn3DotsOrderSMenuOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOn3DotsOrderSMenuOaParams>} LogObject<clickOn3DotsOrderSMenuOaParams>
 */
export function clickOn3DotsOrderSMenuOa(params) {
    return {
        evid: 216,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCopyShippingAddressOaSrc10Evid217' event (evid: 217)
 *
 * Event description: User clicks on Copy shipping address  in Order's page in OneApp
 *
 * @param {clickOnCopyShippingAddressOaSrc10Evid217Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - shipping / pickup
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCopyShippingAddressOaSrc10Evid217Params>} LogObject<clickOnCopyShippingAddressOaSrc10Evid217Params>
 */
export function clickOnCopyShippingAddressOaSrc10Evid217(params) {
    return {
        evid: 217,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnTrackingNumberInOrderPageOa' event (evid: 218)
 *
 * Event description: User clicked on tracking number link  that leads to open Manage tracking number popup in OneApp
 *
 * @param {clickOnTrackingNumberInOrderPageOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill / notApplicable )
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnTrackingNumberInOrderPageOaParams>} LogObject<clickOnTrackingNumberInOrderPageOaParams>
 */
export function clickOnTrackingNumberInOrderPageOa(params) {
    return {
        evid: 218,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceChangePriceClicked' event (evid: 219)
 *
 * Event description: Fired when user clicked “change price” button in change price / cog modal in bulk action
 *
 * @param {bulkActionCogChangePriceChangePriceClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} isRoundPrice - 1 if the user checked to round prices. (null for not percentage price changes)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} actionValueLong - the value of changing price multiplied by 100000
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {string} action - the action the user wants to perform. increase or decrease price/ percentage
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceChangePriceClickedParams>} LogObject<bulkActionCogChangePriceChangePriceClickedParams>
 */
export function bulkActionCogChangePriceChangePriceClicked(params) {
    return {
        evid: 219,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'interactionWithCollectionVideoPopupOrBannerSm' event (evid: 22)
 *
 * Event description: pop up related to collection video
 *
 * @param {interactionWithCollectionVideoPopupOrBannerSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - popup name: let's add collection to your site/ video popup/video banner
 * @property {string} interaction - x button/not now/learn more/go to editor/close/read more
 * @property {string} appName - null
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - null
 * @property {number} finishedTs - finishedTs
 * @property {boolean} didWatchVideo - should be null if no video, should be true if watched more then 10 sec. false if less then 10 sec
 * @property {GUID} bi_token - msid
 * @return {LogObject<interactionWithCollectionVideoPopupOrBannerSmParams>} LogObject<interactionWithCollectionVideoPopupOrBannerSmParams>
 */
export function interactionWithCollectionVideoPopupOrBannerSm(params) {
    return {
        evid: 22,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'refundDetailsShownToUserOaSrc10Evid220' event (evid: 220)
 *
 * Event description: When user clicked Issue refund for supported providers additional screen with ability to select spesific items to refund shown
 *
 * @param {refundDetailsShownToUserOaSrc10Evid220Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - manage order
 * @property {string} paymentProvider - the payment
 * @property {GUID} bi_token - msid
 * @return {LogObject<refundDetailsShownToUserOaSrc10Evid220Params>} LogObject<refundDetailsShownToUserOaSrc10Evid220Params>
 */
export function refundDetailsShownToUserOaSrc10Evid220(params) {
    return {
        evid: 220,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInRefundDetailsScreenOaSrc10Evid221' event (evid: 221)
 *
 * Event description: When the user clicks next in refund specific items screen
 *
 * @param {clickInRefundDetailsScreenOaSrc10Evid221Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool)},{shipping: bool}
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - manage order
 * @property {string} paymentProvider - order payment provider
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {string} refundType - full / partial
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInRefundDetailsScreenOaSrc10Evid221Params>} LogObject<clickInRefundDetailsScreenOaSrc10Evid221Params>
 */
export function clickInRefundDetailsScreenOaSrc10Evid221(params) {
    return {
        evid: 221,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectShippingMethodFromTheDropdownInCartPageSf' event (evid: 222)
 *
 * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {selectShippingMethodFromTheDropdownInCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page  (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectShippingMethodFromTheDropdownInCartPageSfParams>} LogObject<selectShippingMethodFromTheDropdownInCartPageSfParams>
 */
export function selectShippingMethodFromTheDropdownInCartPageSf(params) {
    return {
        evid: 222,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingDestinationInCartPageSf' event (evid: 223)
 *
 * Event description: When a visitor clicks to change the shipping destination on the cart page
 *
 * @param {clickOnShippingDestinationInCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} state - empty / full
 * @property {string} cartType - cart_type
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} shippingDestinationState - shipping_destination_state
 * @property {string} shippingDestinationCountry - shipping_destination_country
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnShippingDestinationInCartPageSfParams>} LogObject<clickOnShippingDestinationInCartPageSfParams>
 */
export function clickOnShippingDestinationInCartPageSf(params) {
    return {
        evid: 223,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewEWalletModalSf' event (evid: 224)
 *
 * Event description: When a visitor views e-wallet Modal after clicking on checkout with e-wallet.
 *
 * @param {viewEWalletModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart'
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<viewEWalletModalSfParams>} LogObject<viewEWalletModalSfParams>
 */
export function viewEWalletModalSf(params) {
    return {
        evid: 224,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickContinueEWalletModalSf' event (evid: 225)
 *
 * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout).
 *
 * @param {clickContinueEWalletModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} fulfillerName - users input name
 * @property {number} itemsCount - count
 * @property {string} cartType - cart_type
 * @property {string} productsList - products_list
 * @property {string} appName - app name (e.g. wixstores-client-cart)
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} paymet_providers - paymet_providers
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} num_of_shipping - num_of_shipping
 * @property {string} origin - origin
 * @property {string} type - add / edit
 * @property {GUID} checkoutId - checkout_id
 * @property {string} settings - OFF / ON_ORDER_CREATED / ON_ORDER_PAID
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - num_of_paymet_providers
 * @return {LogObject<clickContinueEWalletModalSfParams>} LogObject<clickContinueEWalletModalSfParams>
 */
export function clickContinueEWalletModalSf(params) {
    return {
        evid: 225,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oaSfClickOnProductSocialShare' event (evid: 226)
 *
 * Event description: when member click on social share for product in Store Front OneApp. Till 09.03.20 was sent from ec-sm, 10-22.03.20 was invalid (started to be sent from ec-sf but no changes in Catalog) , since 23.03 copied to ec-sf
 *
 * @param {oaSfClickOnProductSocialShareParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<oaSfClickOnProductSocialShareParams>} LogObject<oaSfClickOnProductSocialShareParams>
 */
export function oaSfClickOnProductSocialShare(params) {
    return {
        evid: 226,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentCloseCustomFulfillerSuccessfulPopup' event (evid: 227)
 *
 * Event description: user clicked  "X"(close) in successfull popup
 *
 * @param {fulfillmentCloseCustomFulfillerSuccessfulPopupParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentCloseCustomFulfillerSuccessfulPopupParams>} LogObject<fulfillmentCloseCustomFulfillerSuccessfulPopupParams>
 */
export function fulfillmentCloseCustomFulfillerSuccessfulPopup(params) {
    return {
        evid: 227,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentCloseAddEditCustomFulfillerPopup' event (evid: 228)
 *
 * Event description: user clicked on cancel/close in  "add/edit custom fulfiller" popup
 *
 * @param {fulfillmentCloseAddEditCustomFulfillerPopupParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - users input name
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - add/ edit
 * @property {string} value - cancel/close
 * @property {string} settings - on_paid / immediately / by_user
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentCloseAddEditCustomFulfillerPopupParams>} LogObject<fulfillmentCloseAddEditCustomFulfillerPopupParams>
 */
export function fulfillmentCloseAddEditCustomFulfillerPopup(params) {
    return {
        evid: 228,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnRelatedProductOa' event (evid: 229)
 *
 * Event description: user clicked on related product in main product screen OA
 *
 * @param {clickOnRelatedProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - product_id of related product
 * @property {string} productId - product_id of main product
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnRelatedProductOaParams>} LogObject<clickOnRelatedProductOaParams>
 */
export function clickOnRelatedProductOa(params) {
    return {
        evid: 229,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'toolTipWatchedSm' event (evid: 23)
 *
 * Event description: user viewed tool tip in SM
 *
 * @param {toolTipWatchedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} tooltipName - tooltip_name
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageName - page_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<toolTipWatchedSmParams>} LogObject<toolTipWatchedSmParams>
 */
export function toolTipWatchedSm(params) {
    return {
        evid: 23,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickAssignProductsToCustomFulfiller' event (evid: 230)
 *
 * Event description: user clicked "Assigned products" in Fulfillment Services page /successful popup (opens assign products modal)
 *
 * @param {fulfillmentClickAssignProductsToCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - successful popup/fulfillment services page
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickAssignProductsToCustomFulfillerParams>} LogObject<fulfillmentClickAssignProductsToCustomFulfillerParams>
 */
export function fulfillmentClickAssignProductsToCustomFulfiller(params) {
    return {
        evid: 230,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickEditCustomFulfiller' event (evid: 231)
 *
 * Event description: User clicks on "edit"  CTA  in Custom fulfiller section of  fulfilment services page (lead to open a popup)
 *
 * @param {fulfillmentClickEditCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickEditCustomFulfillerParams>} LogObject<fulfillmentClickEditCustomFulfillerParams>
 */
export function fulfillmentClickEditCustomFulfiller(params) {
    return {
        evid: 231,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnImageOfProductOaSrc10Evid232' event (evid: 232)
 *
 * Event description: member clicked on image in product screen OA SF (opens gallery) OR (since Feb 2023) swiped (view next image in gallery)
 *
 * @param {clickOnImageOfProductOaSrc10Evid232Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id of main product
 * @property {string} type - click /swipe
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnImageOfProductOaSrc10Evid232Params>} LogObject<clickOnImageOfProductOaSrc10Evid232Params>
 */
export function clickOnImageOfProductOaSrc10Evid232(params) {
    return {
        evid: 232,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickOnDeleteCustomFulfiller' event (evid: 233)
 *
 * Event description: User clicks on "delete"  CTA  in Custom fulfiller section of  fulfilment services page (lead to open a popup)
 *
 * @param {fulfillmentClickOnDeleteCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickOnDeleteCustomFulfillerParams>} LogObject<fulfillmentClickOnDeleteCustomFulfillerParams>
 */
export function fulfillmentClickOnDeleteCustomFulfiller(params) {
    return {
        evid: 233,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickInDeleteCustomFulfillerPopup' event (evid: 234)
 *
 * Event description: user clicked on "remove fulfiller"/cancel/clos in "delete custom fulfiller"  confirm popup
 *
 * @param {fulfillmentClickInDeleteCustomFulfillerPopupParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - remove/cancel/close
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickInDeleteCustomFulfillerPopupParams>} LogObject<fulfillmentClickInDeleteCustomFulfillerPopupParams>
 */
export function fulfillmentClickInDeleteCustomFulfillerPopup(params) {
    return {
        evid: 234,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnPrintPackingSlip' event (evid: 235)
 *
 * Event description: User clicks on "Print Packing Slip" inside fulfiller's menu (selffulfil)  of Order page
 *
 * @param {clickOnPrintPackingSlipParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnPrintPackingSlipParams>} LogObject<clickOnPrintPackingSlipParams>
 */
export function clickOnPrintPackingSlip(params) {
    return {
        evid: 235,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'highRpuFeatureAdAssetShown' event (evid: 236)
 *
 * Event description: when Ad asset (e.g. banner, tooltip) to Upgrade to High ARPU to get feature is shown
 *
 * @param {highRpuFeatureAdAssetShownParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} paymentStatus - payment_status
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} messageType - high ARPU / payment / both
 * @property {string} origin - editor / onboarding / StoresBO / Live site
 * @property {string} type - banner / tooltip / UoU popup
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<highRpuFeatureAdAssetShownParams>} LogObject<highRpuFeatureAdAssetShownParams>
 */
export function highRpuFeatureAdAssetShown(params) {
    return {
        evid: 236,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'highRpuDismissFeatureAdAsset' event (evid: 237)
 *
 * Event description: when user dismisses Ad asset (e.g. banner) to Upgrade to High RPU to get feature - so it won't be shown any more
 *
 * @param {highRpuDismissFeatureAdAssetParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {GUID} bi_token - msid
 * @return {LogObject<highRpuDismissFeatureAdAssetParams>} LogObject<highRpuDismissFeatureAdAssetParams>
 */
export function highRpuDismissFeatureAdAsset(params) {
    return {
        evid: 237,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'imageGalleryOpenedInProductOa' event (evid: 238)
 *
 * Event description: after memeber clicked on image in product screen gallery opened (OA)
 *
 * @param {imageGalleryOpenedInProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id of main product
 * @property {GUID} bi_token - msid
 * @return {LogObject<imageGalleryOpenedInProductOaParams>} LogObject<imageGalleryOpenedInProductOaParams>
 */
export function imageGalleryOpenedInProductOa(params) {
    return {
        evid: 238,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickOnManageFulfillers' event (evid: 239)
 *
 * Event description: User clicks on "Manage Fulfillers"  in fulfilment services card of Store Shipping  tab (Shipping and Fulfillment)
 *
 * @param {fulfillmentClickOnManageFulfillersParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - appName
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickOnManageFulfillersParams>} LogObject<fulfillmentClickOnManageFulfillersParams>
 */
export function fulfillmentClickOnManageFulfillers(params) {
    return {
        evid: 239,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorInCheckoutSf' event (evid: 24)
 *
 * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront')
 *
 * @param {errorInCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - na
 * @property {string} paymentResponse - payment_response
 * @property {string} stage - what stage in the chechout funnel the error is
 * @property {GUID} cartId - na
 * @property {string} field - cardNumber/expirationDate/postalCode/cvv/ county_code
 * @property {string} errorMessage - detailed error message
 * @property {string} appName - stores
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} message - for example Expiration date is not valid / shipping is not avilable
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<errorInCheckoutSfParams>} LogObject<errorInCheckoutSfParams>
 */
export function errorInCheckoutSf(params) {
    return {
        evid: 24,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentSendOrderToFulfillerClicked' event (evid: 240)
 *
 * Event description: User clicks on "Send to Fulfiller" in fulfiller bar view (from main CTA / 3dots menu)
 *
 * @param {fulfillmentSendOrderToFulfillerClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - main / 3dots / OneApp
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentSendOrderToFulfillerClickedParams>} LogObject<fulfillmentSendOrderToFulfillerClickedParams>
 */
export function fulfillmentSendOrderToFulfillerClicked(params) {
    return {
        evid: 240,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOn3DotsInProductPageOa' event (evid: 241)
 *
 * Event description: when merchant clicks on 3dots in product page/ product list in  OneApp (merchant view)
 *
 * @param {clickOn3DotsInProductPageOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page / product list
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOn3DotsInProductPageOaParams>} LogObject<clickOn3DotsInProductPageOaParams>
 */
export function clickOn3DotsInProductPageOa(params) {
    return {
        evid: 241,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDeleteProductOa' event (evid: 242)
 *
 * Event description: when merchant clicks on "Delete" in 3dots menu of product page OneApp (merchant view) / closes product screen with unsaved changes / changes price for product with subscription / resets inventory - a warning popup is shown. Before July 2020 was used without type only for "delete product" .
 *
 * @param {clickOnDeleteProductOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {string} type - type
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnDeleteProductOaParams>} LogObject<clickOnDeleteProductOaParams>
 */
export function clickOnDeleteProductOa(params) {
    return {
        evid: 242,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInConfirmDeleteProductPopupOa' event (evid: 243)
 *
 * Event description: when merchant clicks on "Delete"/"Reset"/"Discard" or other main CTA or "cancel" in warning popup of product page OneApp (merchant view). Before July 2020 was used without type only for "delete  (for click "discard" in "discard_changes" was 10:244 and for clicks in "reset_inventory" 10:306)
 *
 * @param {clickInConfirmDeleteProductPopupOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {string} type - type
 * @property {string} value - delete/discard/cancel/reset / change
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInConfirmDeleteProductPopupOaParams>} LogObject<clickInConfirmDeleteProductPopupOaParams>
 */
export function clickInConfirmDeleteProductPopupOa(params) {
    return {
        evid: 243,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDiscardChangesOfProductOa' event (evid: 244)
 *
 * Event description: when merchant clicks on Discard in Action sheet after clicking "cancel" in product page without saving changes. Since July 2020 replaced by 10:243 value = discard type = discard_changes
 *
 * @param {clickOnDiscardChangesOfProductOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnDiscardChangesOfProductOaParams>} LogObject<clickOnDiscardChangesOfProductOaParams>
 */
export function clickOnDiscardChangesOfProductOa(params) {
    return {
        evid: 244,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCreateAPlanSm' event (evid: 245)
 *
 * Event description: when clicking 'Create a Plan' in Empty state or not
 *
 * @param {clickCreateAPlanSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - 'empty state' / 'plans list'
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickCreateAPlanSmParams>} LogObject<clickCreateAPlanSmParams>
 */
export function clickCreateAPlanSm(params) {
    return {
        evid: 245,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveTempSubscriptionPlanSm' event (evid: 246)
 *
 * Event description: When add a subscription plan to the product (click save on the pop up)
 *
 * @param {saveTempSubscriptionPlanSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} discountType - 'PERCENT' / 'AMOUNT'
 * @property {string} appName - app
 * @property {string} planType - frequency and length
 * @property {boolean} isMerchant - is_merchant
 * @property {number} interval - the interval on the subscription (every 3 months, every 2 weeks)
 * @property {number} plan_price - INTEGER!! (multiply by 100000)
 * @property {string} productId - product_guid
 * @property {number} discount_long - INTEGER!! (multiply by 100000)
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveTempSubscriptionPlanSmParams>} LogObject<saveTempSubscriptionPlanSmParams>
 */
export function saveTempSubscriptionPlanSm(params) {
    return {
        evid: 246,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceLearnMoreClicked' event (evid: 247)
 *
 * Event description: Fired when user clicked “learn more” button
 * as part of bulk actions in product list on cairo.
 *
 * @param {bulkActionCogChangePriceLearnMoreClickedParams} params - The parameters for this event
 * @property {GUID} storeId - storeid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceLearnMoreClickedParams>} LogObject<bulkActionCogChangePriceLearnMoreClickedParams>
 */
export function bulkActionCogChangePriceLearnMoreClicked(params) {
    return {
        evid: 247,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddToCartWithOptionsSf' event (evid: 248)
 *
 * Event description: buyer clicks on 'Add to Cart' in product-widget / Add to cart button / gallery on a product with options, so the product is not added to the cart and the buyer is navigated to the Product Quick View (in Mobile - Product Page).
 *
 * @param {clickAddToCartWithOptionsSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {number} rank - the rank of the product that was clicked
 * @property {string} navigationClick - quick-view / product-page
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {string} options - a json containing the options selected for the product
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} origin - add to cart button / gallery / product-widget
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddToCartWithOptionsSfParams>} LogObject<clickAddToCartWithOptionsSfParams>
 */
export function clickAddToCartWithOptionsSf(params) {
    return {
        evid: 248,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promotionalAssetClickToClose' event (evid: 249)
 *
 * Event description: generic event for promotional assets shown to user, when users click to close. (dealer or in-house developed assets)
 *
 * @param {promotionalAssetClickToCloseParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name of the asset
 * @property {string} appName - app
 * @property {string} cta_type - link, button
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the page name
 * @property {string} content - content from dealer
 * @property {string} type - asset type (banner,light-box...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<promotionalAssetClickToCloseParams>} LogObject<promotionalAssetClickToCloseParams>
 */
export function promotionalAssetClickToClose(params) {
    return {
        evid: 249,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddOptionClickOa' event (evid: 25)
 *
 * Event description: when user click to add option to a product
 *
 * @param {productAddOptionClickOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - empty state / product options list
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productAddOptionClickOaParams>} LogObject<productAddOptionClickOaParams>
 */
export function productAddOptionClickOa(params) {
    return {
        evid: 25,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'promotionalAssetClickOnCtaSrc10Evid250' event (evid: 250)
 *
 * Event description: generic event forpromotional assets shown to user, when users click on cta (except close) (dealer or in-house developed assets)
 *
 * @param {promotionalAssetClickOnCtaSrc10Evid250Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name of the asset
 * @property {string} appName - app
 * @property {string} cta_type - name of the cta (link, button, open fb ads)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the page name
 * @property {string} content - content from dealer
 * @property {string} type - asset type (banner,light-box...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<promotionalAssetClickOnCtaSrc10Evid250Params>} LogObject<promotionalAssetClickOnCtaSrc10Evid250Params>
 */
export function promotionalAssetClickOnCtaSrc10Evid250(params) {
    return {
        evid: 250,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickEditContentSrc10Evid251' event (evid: 251)
 *
 * Event description: in settings tab - when click "edit content" to customize email
 *
 * @param {emailSettingsClickEditContentSrc10Evid251Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickEditContentSrc10Evid251Params>} LogObject<emailSettingsClickEditContentSrc10Evid251Params>
 */
export function emailSettingsClickEditContentSrc10Evid251(params) {
    return {
        evid: 251,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickPreviewSrc10Evid252' event (evid: 252)
 *
 * Event description: in settings tab - when click "preview" in email notifications section
 *
 * @param {emailSettingsClickPreviewSrc10Evid252Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickPreviewSrc10Evid252Params>} LogObject<emailSettingsClickPreviewSrc10Evid252Params>
 */
export function emailSettingsClickPreviewSrc10Evid252(params) {
    return {
        evid: 252,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickResetInEditModalSrc10Evid253' event (evid: 253)
 *
 * Event description: in edit email modal  - when click "reset"  to revert to default texts in email
 *
 * @param {emailSettingsClickResetInEditModalSrc10Evid253Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickResetInEditModalSrc10Evid253Params>} LogObject<emailSettingsClickResetInEditModalSrc10Evid253Params>
 */
export function emailSettingsClickResetInEditModalSrc10Evid253(params) {
    return {
        evid: 253,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickCancelInEditModalSrc10Evid254' event (evid: 254)
 *
 * Event description: in edit email modal  - when click "cancel "/closes the modal
 *
 * @param {emailSettingsClickCancelInEditModalSrc10Evid254Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickCancelInEditModalSrc10Evid254Params>} LogObject<emailSettingsClickCancelInEditModalSrc10Evid254Params>
 */
export function emailSettingsClickCancelInEditModalSrc10Evid254(params) {
    return {
        evid: 254,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickSaveAndPreviewInEditModalSrc10Evid255' event (evid: 255)
 *
 * Event description: in edit email modal  - when click "ave and preview" to open Preview
 *
 * @param {emailSettingsClickSaveAndPreviewInEditModalSrc10Evid255Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} footerSubtitle - deafult / changed
 * @property {string} subtitle - deafult / changed
 * @property {string} footerTitle - deafult / changed
 * @property {string} showEmail - deafult / changed
 * @property {string} email - deafult / changed
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} phoneChecked - true - if show phone checked in
 * @property {boolean} isMerchant - is_merchant
 * @property {string} showPhone - deafult / changed
 * @property {boolean} emailChecked - true - if show email checked in
 * @property {string} title - deafult / changed
 * @property {boolean} isDefault - if user is saving default settings
 * @property {string} phone - deafult / changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickSaveAndPreviewInEditModalSrc10Evid255Params>} LogObject<emailSettingsClickSaveAndPreviewInEditModalSrc10Evid255Params>
 */
export function emailSettingsClickSaveAndPreviewInEditModalSrc10Evid255(params) {
    return {
        evid: 255,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickCloseInPreviewSrc10Evid256' event (evid: 256)
 *
 * Event description: in Preview  - when user clicks "close" - the email customization is set,
 *
 * @param {emailSettingsClickCloseInPreviewSrc10Evid256Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickCloseInPreviewSrc10Evid256Params>} LogObject<emailSettingsClickCloseInPreviewSrc10Evid256Params>
 */
export function emailSettingsClickCloseInPreviewSrc10Evid256(params) {
    return {
        evid: 256,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickEditInPreviewSrc10Evid257' event (evid: 257)
 *
 * Event description: in Preview  - when user clicks "edit" and goes back to edit modal
 *
 * @param {emailSettingsClickEditInPreviewSrc10Evid257Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickEditInPreviewSrc10Evid257Params>} LogObject<emailSettingsClickEditInPreviewSrc10Evid257Params>
 */
export function emailSettingsClickEditInPreviewSrc10Evid257(params) {
    return {
        evid: 257,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickLearnMoreInEditModalSrc10Evid258' event (evid: 258)
 *
 * Event description: in Preview  - when user clicks "edit" and goes back to edit modal
 *
 * @param {emailSettingsClickLearnMoreInEditModalSrc10Evid258Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailSettingsClickLearnMoreInEditModalSrc10Evid258Params>} LogObject<emailSettingsClickLearnMoreInEditModalSrc10Evid258Params>
 */
export function emailSettingsClickLearnMoreInEditModalSrc10Evid258(params) {
    return {
        evid: 258,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productClickToAddNewOptionToCatalogOa' event (evid: 26)
 *
 * Event description: when user click to add new option to the catalog
 *
 * @param {productClickToAddNewOptionToCatalogOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productClickToAddNewOptionToCatalogOaParams>} LogObject<productClickToAddNewOptionToCatalogOaParams>
 */
export function productClickToAddNewOptionToCatalogOa(params) {
    return {
        evid: 26,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddToWishlistSf' event (evid: 260)
 *
 * Event description: buyer clicks on to add product to wishlist
 *
 * @param {clickAddToWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddToWishlistSfParams>} LogObject<clickAddToWishlistSfParams>
 */
export function clickAddToWishlistSf(params) {
    return {
        evid: 260,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickRemoveFromWishlistSf' event (evid: 261)
 *
 * Event description: buyer clicks on to remove product feom wishlist
 *
 * @param {clickRemoveFromWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / wishlist-gallery
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickRemoveFromWishlistSfParams>} LogObject<clickRemoveFromWishlistSfParams>
 */
export function clickRemoveFromWishlistSf(params) {
    return {
        evid: 261,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddAppToOpenAppMarketOnSpecificApp' event (evid: 262)
 *
 * Event description: when the user click on 'Add app' button on any of the suggested application (while it's not installed yet)
 * From any place in the BM
 *
 * @param {clickAddAppToOpenAppMarketOnSpecificAppParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid - Modalyst/printify
 * @property {string} tpaName - the tpa name - Modalyst/printify
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Find Products to sell
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddAppToOpenAppMarketOnSpecificAppParams>} LogObject<clickAddAppToOpenAppMarketOnSpecificAppParams>
 */
export function clickAddAppToOpenAppMarketOnSpecificApp(params) {
    return {
        evid: 262,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOpenAppToOpenExternalAppDashboard' event (evid: 263)
 *
 * Event description: when the user click on 'Open app' button on any of the installed application
 * From any place in the BM
 *
 * @param {clickOpenAppToOpenExternalAppDashboardParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid - Modalyst/printify
 * @property {string} tpaName - the tpa name - Modalyst/printify
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Find Products to sell
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOpenAppToOpenExternalAppDashboardParams>} LogObject<clickOpenAppToOpenExternalAppDashboardParams>
 */
export function clickOpenAppToOpenExternalAppDashboard(params) {
    return {
        evid: 263,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToOpenAppMarketOnSpecificSearch' event (evid: 264)
 *
 * Event description: when the user click on 'view more' button From any place in the BM in order to open the app market with a specific search
 *
 * @param {clickToOpenAppMarketOnSpecificSearchParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} searchTerm - the search term for the app market
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Find Products to sell
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenAppMarketOnSpecificSearchParams>} LogObject<clickToOpenAppMarketOnSpecificSearchParams>
 */
export function clickToOpenAppMarketOnSpecificSearch(params) {
    return {
        evid: 264,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToViewWishlistSf' event (evid: 265)
 *
 * Event description: buyer clicks to view wishlist in the Members area / login menu
 *
 * @param {clickToViewWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - members-menu / login-menu
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewWishlistSfParams>} LogObject<clickToViewWishlistSfParams>
 */
export function clickToViewWishlistSf(params) {
    return {
        evid: 265,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLinkInMembersWishlistSf' event (evid: 266)
 *
 * Event description: buyer clicks on the 'add products to wishlist' link in the  wishlist in the Members area
 *
 * @param {clickLinkInMembersWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickLinkInMembersWishlistSfParams>} LogObject<clickLinkInMembersWishlistSfParams>
 */
export function clickLinkInMembersWishlistSf(params) {
    return {
        evid: 266,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToWishlistSf' event (evid: 267)
 *
 * Event description: when a product was successfully added to wishlist after the buyer clicks on button
 *
 * @param {productAddedToWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<productAddedToWishlistSfParams>} LogObject<productAddedToWishlistSfParams>
 */
export function productAddedToWishlistSf(params) {
    return {
        evid: 267,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productRemovedFromWishlistSf' event (evid: 268)
 *
 * Event description: when a product was successfully removed from wishlist after the buyer clicks on button
 *
 * @param {productRemovedFromWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<productRemovedFromWishlistSfParams>} LogObject<productRemovedFromWishlistSfParams>
 */
export function productRemovedFromWishlistSf(params) {
    return {
        evid: 268,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInDropdownInShippingSm' event (evid: 269)
 *
 * Event description: user clicks opened dropdown  of shipping methods in Shipping rule page SM
 *
 * @param {clickInDropdownInShippingSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - deprecated
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInDropdownInShippingSmParams>} LogObject<clickInDropdownInShippingSmParams>
 */
export function clickInDropdownInShippingSm(params) {
    return {
        evid: 269,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productSaveOptionToAddToProductOa' event (evid: 27)
 *
 * Event description: when user click to save new option to product, after adding choices
 *
 * @param {productSaveOptionToAddToProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productSaveOptionToAddToProductOaParams>} LogObject<productSaveOptionToAddToProductOaParams>
 */
export function productSaveOptionToAddToProductOa(params) {
    return {
        evid: 27,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInWarningScreenOaStoreFront' event (evid: 270)
 *
 * Event description: click in unable to accept payment screen (not now / contact)/ 2nd level invitation (when user is redirected from 2nd level invitation to a hidden or deleted product) screen
 *
 * @param {clickInWarningScreenOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true
 * @property {string} type - payments / view_store
 * @property {string} value - close / not now / contact
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInWarningScreenOaStoreFrontParams>} LogObject<clickInWarningScreenOaStoreFrontParams>
 */
export function clickInWarningScreenOaStoreFront(params) {
    return {
        evid: 270,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceLearnMoreClickedSrc10Evid271' event (evid: 271)
 *
 * Event description: Fired when user clicked “lear more” button in change price / cog modal in bulk action
 *
 * @param {bulkActionCogChangePriceLearnMoreClickedSrc10Evid271Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceLearnMoreClickedSrc10Evid271Params>} LogObject<bulkActionCogChangePriceLearnMoreClickedSrc10Evid271Params>
 */
export function bulkActionCogChangePriceLearnMoreClickedSrc10Evid271(params) {
    return {
        evid: 271,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionsClickOnLearnMore' event (evid: 272)
 *
 * Event description: when the user clicks on "learn more" option
 *
 * @param {subscriptionsClickOnLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - pop-up window, product page, High ARPU banner
 * @property {GUID} bi_token - msid
 * @return {LogObject<subscriptionsClickOnLearnMoreParams>} LogObject<subscriptionsClickOnLearnMoreParams>
 */
export function subscriptionsClickOnLearnMore(params) {
    return {
        evid: 272,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewCheckoutInLiveSitePopupSf' event (evid: 273)
 *
 * Event description: Modal opens when the user tries to view checkout in preview mode.
 *
 * @param {viewCheckoutInLiveSitePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewCheckoutInLiveSitePopupSfParams>} LogObject<viewCheckoutInLiveSitePopupSfParams>
 */
export function viewCheckoutInLiveSitePopupSf(params) {
    return {
        evid: 273,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingAddressOa' event (evid: 274)
 *
 * Event description: User clicks on shipping address  in Order's page in OneApp to expand/ collapse it
 *
 * @param {clickOnShippingAddressOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - shipping / pickup
 * @property {string} value - expand / collapse
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnShippingAddressOaParams>} LogObject<clickOnShippingAddressOaParams>
 */
export function clickOnShippingAddressOa(params) {
    return {
        evid: 274,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOn3DotsInFulfillerSMenu' event (evid: 275)
 *
 * Event description: User clicks on 3 dots in fulfiller's menu (selffulfil/TPA)
 *
 * @param {clickOn3DotsInFulfillerSMenuParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} sectionType - SelfFulfillment / CustomFulfiller / Dropshipper / Digital / Pos / Pickup / Invoice / GiftCard
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill  )
 * @property {string} appName - app_name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfil/TPA
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOn3DotsInFulfillerSMenuParams>} LogObject<clickOn3DotsInFulfillerSMenuParams>
 */
export function clickOn3DotsInFulfillerSMenu(params) {
    return {
        evid: 275,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeMethodOfAddingTrackingNumberOaSrc10Evid277' event (evid: 277)
 *
 * Event description: User clicks on  scan barcode in adding tracking number manually screen or "enter code manually" / back in scan barcode screen
 *
 * @param {changeMethodOfAddingTrackingNumberOaSrc10Evid277Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} method - manually / scan
 * @property {string} fulfillerName - selffulfill,  Modalyst/Printful/Printify
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - button / close
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeMethodOfAddingTrackingNumberOaSrc10Evid277Params>} LogObject<changeMethodOfAddingTrackingNumberOaSrc10Evid277Params>
 */
export function changeMethodOfAddingTrackingNumberOaSrc10Evid277(params) {
    return {
        evid: 277,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddCarrierOaSrc10Evid278' event (evid: 278)
 *
 * Event description: User clicks add Carrier in Shipping Carrier Screen OA
 *
 * @param {clickAddCarrierOaSrc10Evid278Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddCarrierOaSrc10Evid278Params>} LogObject<clickAddCarrierOaSrc10Evid278Params>
 */
export function clickAddCarrierOaSrc10Evid278(params) {
    return {
        evid: 278,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'newCarrierAddedOaSrc10Evid279' event (evid: 279)
 *
 * Event description: User successfully added carrier in Add Carrier Screen OA
 *
 * @param {newCarrierAddedOaSrc10Evid279Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} carrierName - carrier_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<newCarrierAddedOaSrc10Evid279Params>} LogObject<newCarrierAddedOaSrc10Evid279Params>
 */
export function newCarrierAddedOaSrc10Evid279(params) {
    return {
        evid: 279,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productSaveOptionToAddToProductOaSrc10Evid28' event (evid: 28)
 *
 * Event description: when user click 'Done' after choosing a color
 *
 * @param {productSaveOptionToAddToProductOaSrc10Evid28Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productSaveOptionToAddToProductOaSrc10Evid28Params>} LogObject<productSaveOptionToAddToProductOaSrc10Evid28Params>
 */
export function productSaveOptionToAddToProductOaSrc10Evid28(params) {
    return {
        evid: 28,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDropDownToChangeCarrierOaSrc10Evid280' event (evid: 280)
 *
 * Event description: User clicks clicks on drop-down in add tracking number screen  to change carrier OA
 *
 * @param {clickOnDropDownToChangeCarrierOaSrc10Evid280Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill,  Modalyst/Printful/Printify
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnDropDownToChangeCarrierOaSrc10Evid280Params>} LogObject<clickOnDropDownToChangeCarrierOaSrc10Evid280Params>
 */
export function clickOnDropDownToChangeCarrierOaSrc10Evid280(params) {
    return {
        evid: 280,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'closeAddTrackingNumberScreenOaSrc10Evid281' event (evid: 281)
 *
 * Event description: User clicks clicks on "x" in add/edit tracking number screen (did not save)
 *
 * @param {closeAddTrackingNumberScreenOaSrc10Evid281Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill,  Modalyst/Printful/Printify
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<closeAddTrackingNumberScreenOaSrc10Evid281Params>} LogObject<closeAddTrackingNumberScreenOaSrc10Evid281Params>
 */
export function closeAddTrackingNumberScreenOaSrc10Evid281(params) {
    return {
        evid: 281,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceSuccessToastLoaded' event (evid: 282)
 *
 * Event description: Fired when success toast loaded
 *
 * @param {bulkActionCogChangePriceSuccessToastLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceSuccessToastLoadedParams>} LogObject<bulkActionCogChangePriceSuccessToastLoadedParams>
 */
export function bulkActionCogChangePriceSuccessToastLoaded(params) {
    return {
        evid: 282,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'notAcceptPaymentsVisitorPopupSf' event (evid: 283)
 *
 * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules).
 *
 * @param {notAcceptPaymentsVisitorPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / live / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<notAcceptPaymentsVisitorPopupSfParams>} LogObject<notAcceptPaymentsVisitorPopupSfParams>
 */
export function notAcceptPaymentsVisitorPopupSf(params) {
    return {
        evid: 283,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pdfOfOrderLoadedOaSrc10Evid284' event (evid: 284)
 *
 * Event description: after user  clicked on "print packing slip" of order in OA pdf successfully loaded
 *
 * @param {pdfOfOrderLoadedOaSrc10Evid284Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - order / packing_slip
 * @property {GUID} bi_token - msid
 * @return {LogObject<pdfOfOrderLoadedOaSrc10Evid284Params>} LogObject<pdfOfOrderLoadedOaSrc10Evid284Params>
 */
export function pdfOfOrderLoadedOaSrc10Evid284(params) {
    return {
        evid: 284,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'actionWithPdfOfOrderOa' event (evid: 285)
 *
 * Event description: after of order in OA pdf successfully loaded, user sends it to print
 *
 * @param {actionWithPdfOfOrderOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - order / packing_slip
 * @property {GUID} bi_token - msid
 * @return {LogObject<actionWithPdfOfOrderOaParams>} LogObject<actionWithPdfOfOrderOaParams>
 */
export function actionWithPdfOfOrderOa(params) {
    return {
        evid: 285,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionCogChangePriceFailedToastLoaded' event (evid: 286)
 *
 * Event description: Fired when failed toast loaded
 *
 * @param {bulkActionCogChangePriceFailedToastLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {string} type - what is bulk action preformed. cog / change price
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionCogChangePriceFailedToastLoadedParams>} LogObject<bulkActionCogChangePriceFailedToastLoadedParams>
 */
export function bulkActionCogChangePriceFailedToastLoaded(params) {
    return {
        evid: 286,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInDiscardChangesTrackingNumberPopupOaSrc10Evid287' event (evid: 287)
 *
 * Event description: user clicks "discard" / cancel" in discard changes popup,  after he clicked on "x" in add/edit tracking number screen (did not save) and warning popup appeared
 *
 * @param {clickInDiscardChangesTrackingNumberPopupOaSrc10Evid287Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - selffulfill,  Modalyst/Printful/Printify
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - discard / cancel
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInDiscardChangesTrackingNumberPopupOaSrc10Evid287Params>} LogObject<clickInDiscardChangesTrackingNumberPopupOaSrc10Evid287Params>
 */
export function clickInDiscardChangesTrackingNumberPopupOaSrc10Evid287(params) {
    return {
        evid: 287,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCameraIconOfImageOa' event (evid: 288)
 *
 * Event description: When user clicks on product (old flow) or View all media (new flow) to view all media gallery
 *
 * @param {clickOnCameraIconOfImageOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - empty / with_pic (for collections only)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - product_id / collectionId
 * @property {string} origin - product/collection
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCameraIconOfImageOaParams>} LogObject<clickOnCameraIconOfImageOaParams>
 */
export function clickOnCameraIconOfImageOa(params) {
    return {
        evid: 288,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnImageOfProductOa' event (evid: 289)
 *
 * Event description: When user clicks on image of ptoduct (to open full size)
 *
 * @param {clickOnImageOfProductOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnImageOfProductOaParams>} LogObject<clickOnImageOfProductOaParams>
 */
export function clickOnImageOfProductOa(params) {
    return {
        evid: 289,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productClickUnlinkImageToChoiceOa' event (evid: 29)
 *
 * Event description: when user click to save new option to product, after adding choices
 *
 * @param {productClickUnlinkImageToChoiceOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {string} type - all images / 1 image
 * @property {GUID} bi_token - msid
 * @return {LogObject<productClickUnlinkImageToChoiceOaParams>} LogObject<productClickUnlinkImageToChoiceOaParams>
 */
export function productClickUnlinkImageToChoiceOa(params) {
    return {
        evid: 29,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCollectionInChooseProductsScreenOa' event (evid: 290)
 *
 * Event description: user click "Add" after selected products in "Choose products" screen in Add product to collection flow in OneApp
 *
 * @param {clickOnAddToCollectionInChooseProductsScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} productCount - number of products selected
 * @property {string} categoryId - category_id
 * @property {string} productsList - list of product_guids user chose
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - new/ edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddToCollectionInChooseProductsScreenOaParams>} LogObject<clickOnAddToCollectionInChooseProductsScreenOaParams>
 */
export function clickOnAddToCollectionInChooseProductsScreenOa(params) {
    return {
        evid: 290,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInSuccessCreatedCollectionPopupOa' event (evid: 291)
 *
 * Event description: user click Got it / Learn more / close/ Add Products / Not Now in Success Created Collection popup  in OneApp
 *
 * @param {clickInSuccessCreatedCollectionPopupOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - category_id
 * @property {string} state - empty / with_products
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - Got it / Learn more / close/ Add Products / Not Now
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInSuccessCreatedCollectionPopupOaParams>} LogObject<clickInSuccessCreatedCollectionPopupOaParams>
 */
export function clickInSuccessCreatedCollectionPopupOa(params) {
    return {
        evid: 291,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'click3DotsOfCollectionOa' event (evid: 292)
 *
 * Event description: user clicks 3dots of collection in collection list
 *
 * @param {click3DotsOfCollectionOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - Collection id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<click3DotsOfCollectionOaParams>} LogObject<click3DotsOfCollectionOaParams>
 */
export function click3DotsOfCollectionOa(params) {
    return {
        evid: 292,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCreateCollectionOa' event (evid: 293)
 *
 * Event description: user clicks "Create collection "  in collection list
 *
 * @param {clickCreateCollectionOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @property {string} origin - when click is from category list = NULL, if  click is from assign product to category in OA PP,  then 'assign product to category'
 * @return {LogObject<clickCreateCollectionOaParams>} LogObject<clickCreateCollectionOaParams>
 */
export function clickCreateCollectionOa(params) {
    return {
        evid: 293,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCollectionClickedSm' event (evid: 294)
 *
 * Event description: user clicked Delete collection in "Manage Collection" menu in OneApp (3dots) / click to close collection screen with unsaved changes - warning popup is shown. Before July 2020 was used only for delete (without type field)
 *
 * @param {deleteCollectionClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - Collection id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - delete / discard_changes
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteCollectionClickedSmParams>} LogObject<deleteCollectionClickedSmParams>
 */
export function deleteCollectionClickedSm(params) {
    return {
        evid: 294,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInDeleteCollectionPopupSm' event (evid: 295)
 *
 * Event description: After user clicked Delete collection in "Manage Collection" menu, he clicks Delete / Cancel in confirm popup in OneApp. Before July 2020 was used only for delete (without type field)
 *
 * @param {clickInDeleteCollectionPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - Collection id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - type
 * @property {string} value - delete / discard/ cancel
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInDeleteCollectionPopupSmParams>} LogObject<clickInDeleteCollectionPopupSmParams>
 */
export function clickInDeleteCollectionPopupSm(params) {
    return {
        evid: 295,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersFilterChange' event (evid: 296)
 *
 * Event description: When the user changes the orders filter
 *
 * @param {ordersFilterChangeParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} filterValue - true if filter added, false if filter removed
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the origin the filter was changed from ('orders list' / ''panel')
 * @property {string} filterSubcategory - the subcategory chosen (not all categories have BI for their sub-categories)
 * @property {string} filterCategory - 'Fulfillment' / 'Payment Status' / 'Dates' / 'Products' / 'Subscription' / 'Sales Channel' / 'Archive' / 'Clear All'
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersFilterChangeParams>} LogObject<ordersFilterChangeParams>
 */
export function ordersFilterChange(params) {
    return {
        evid: 296,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersFilterMoreFiltersClickedSrc10Evid297' event (evid: 297)
 *
 * Event description: When the user clicks on "More Filters"
 *
 * @param {ordersFilterMoreFiltersClickedSrc10Evid297Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersFilterMoreFiltersClickedSrc10Evid297Params>} LogObject<ordersFilterMoreFiltersClickedSrc10Evid297Params>
 */
export function ordersFilterMoreFiltersClickedSrc10Evid297(params) {
    return {
        evid: 297,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersFilterPanelOpenedSrc10Evid298' event (evid: 298)
 *
 * Event description: When the orders filter panel opens successfully
 *
 * @param {ordersFilterPanelOpenedSrc10Evid298Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersFilterPanelOpenedSrc10Evid298Params>} LogObject<ordersFilterPanelOpenedSrc10Evid298Params>
 */
export function ordersFilterPanelOpenedSrc10Evid298(params) {
    return {
        evid: 298,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'hideProductToggleOa' event (evid: 299)
 *
 * Event description: toggle "hide product" in product page / product list in OneApp
 *
 * @param {hideProductToggleOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page / product list
 * @property {string} productId - product_guid
 * @property {string} type - toggle on / toggle off
 * @property {GUID} bi_token - msid
 * @return {LogObject<hideProductToggleOaParams>} LogObject<hideProductToggleOaParams>
 */
export function hideProductToggleOa(params) {
    return {
        evid: 299,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'logicError' event (evid: 30)
 *
 * Event description: error event that is fired on specific cases (details in the fields)
 *
 * @param {logicErrorParams} params - The parameters for this event
 * @property {string} dsc - dsc
 * @property {number} response_time - ts
 * @property {string} vsi - vsi
 * @property {number} time - ts
 * @property {string} server - server
 * @property {string} builderType - builder_type
 * @property {string} errscp - errscp
 * @property {string} errn - errn
 * @property {string} p4 - p4
 * @property {string} description - extra description (stacktrace>
 * @property {string} majorver - majorver
 * @property {string} trgt - trgt
 * @property {boolean} isLiveEditor - is_live_editor
 * @property {string} errorMsg - error msg
 * @property {number} ts - ts
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewmode - viewmode
 * @property {string} error_description_short - error_description_short
 * @property {string} p3 - p3
 * @property {GUID} did - site_id
 * @property {number} errorCode - error code
 * @property {GUID} cid - client_id
 * @property {boolean} isSg - is_sg
 * @property {string} p2 - p2
 * @property {string} ver - ver
 * @property {number} errc - errc
 * @property {string} stack - stacktrace
 * @property {GUID} metasiteid - metasiteid
 * @property {GUID} app_id - app_id
 * @property {number} sev - sev
 * @property {string} type - type
 * @property {GUID} esi - esi
 * @property {number} cat - cat
 * @property {string} errormsg - dsc
 * @property {string} p1 - p1
 * @property {GUID} msid - msid
 * @property {number} iss - iss
 * @return {LogObject<logicErrorParams>} LogObject<logicErrorParams>
 */
export function logicError(params) {
    return {
        evid: 30,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverIsCallingConductOnWixstoresVisitorsScope' event (evid: 3000)
 *
 * Event description: When the server call to conduct an experiment
 *
 * @param {serverIsCallingConductOnWixstoresVisitorsScopeParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitorId - visitor_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<serverIsCallingConductOnWixstoresVisitorsScopeParams>} LogObject<serverIsCallingConductOnWixstoresVisitorsScopeParams>
 */
export function serverIsCallingConductOnWixstoresVisitorsScope(params) {
    return {
        evid: 3000,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeInStockStatusManuallyOa' event (evid: 303)
 *
 * Event description: user selected in stock / out of stock in product screen in OneApp
 *
 * @param {changeInStockStatusManuallyOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page / product  options
 * @property {string} productId - product_guid
 * @property {string} type - in stock / out of stock
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeInStockStatusManuallyOaParams>} LogObject<changeInStockStatusManuallyOaParams>
 */
export function changeInStockStatusManuallyOa(params) {
    return {
        evid: 303,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleClickConnectAccount' event (evid: 305)
 *
 * Event description: Click to connect the iZettla Account
 *
 * @param {iZettleClickConnectAccountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleClickConnectAccountParams>} LogObject<iZettleClickConnectAccountParams>
 */
export function iZettleClickConnectAccount(params) {
    return {
        evid: 305,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInWarningPopupMerchantOa' event (evid: 306)
 *
 * Event description: merchant did some action after wich not revertable changes will happen, got warning popup and clicked "yes / cancel" in it. Since July 2020 replaced by 10:243 value = reset/cancel , type = reset_inventory
 *
 * @param {clickInWarningPopupMerchantOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - product_guid (for reset inventory)
 * @property {string} type - reset inventory
 * @property {string} value - yes / cancel
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInWarningPopupMerchantOaParams>} LogObject<clickInWarningPopupMerchantOaParams>
 */
export function clickInWarningPopupMerchantOa(params) {
    return {
        evid: 306,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleClickImportProducts' event (evid: 307)
 *
 * Event description: Click to  import products from iZettla Account
 *
 * @param {iZettleClickImportProductsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageState - First Import / While Importing / All Products imported / Import more / No Additional Products / Fail to import
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleClickImportProductsParams>} LogObject<iZettleClickImportProductsParams>
 */
export function iZettleClickImportProducts(params) {
    return {
        evid: 307,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleClickToManageProducts' event (evid: 308)
 *
 * Event description: Click to manage products (view our products list) from the iZettle Page
 *
 * @param {iZettleClickToManageProductsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageState - First Import / While Importing / All Products imported / Import more / No Additional Products / Fail to import
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleClickToManageProductsParams>} LogObject<iZettleClickToManageProductsParams>
 */
export function iZettleClickToManageProducts(params) {
    return {
        evid: 308,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'htmlStartLoad' event (evid: 309)
 *
 * Event description: html start load
 *
 * @param {htmlStartLoadParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} referralInfo - Side_bar, bread_crumbs, home....
 * @property {string} appName - SM/biz managet
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - editor/ my account
 * @property {GUID} bi_token - msid
 * @return {LogObject<htmlStartLoadParams>} LogObject<htmlStartLoadParams>
 */
export function htmlStartLoad(params) {
    return {
        evid: 309,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsDeleteOptionFromProductOa' event (evid: 31)
 *
 * Event description: when user click to delete an option
 *
 * @param {productOptionsDeleteOptionFromProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productOptionsDeleteOptionFromProductOaParams>} LogObject<productOptionsDeleteOptionFromProductOaParams>
 */
export function productOptionsDeleteOptionFromProductOa(params) {
    return {
        evid: 31,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'smRendered' event (evid: 310)
 *
 * Event description: SM rendered
 *
 * @param {smRenderedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} referralInfo - Side_bar, bread_crumbs, home....
 * @property {string} appName - SM/biz managet
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor/ my account
 * @property {number} loadTime - load_time
 * @property {GUID} bi_token - msid
 * @return {LogObject<smRenderedParams>} LogObject<smRenderedParams>
 */
export function smRendered(params) {
    return {
        evid: 310,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'openSmPageClicked' event (evid: 311)
 *
 * Event description: Open SM page clicked.
 *
 * @param {openSmPageClickedParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} tabName - tab_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - breadcrumbs / tab/home/ stores logo
 * @property {GUID} bi_token - msid
 * @return {LogObject<openSmPageClickedParams>} LogObject<openSmPageClickedParams>
 */
export function openSmPageClicked(params) {
    return {
        evid: 311,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeManagerClosed' event (evid: 312)
 *
 * Event description: store manager closed.
 *
 * @param {storeManagerClosedParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeManagerClosedParams>} LogObject<storeManagerClosedParams>
 */
export function storeManagerClosed(params) {
    return {
        evid: 312,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoadSm' event (evid: 313)
 *
 * Event description: SM page load
 *
 * @param {pageLoadSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} referralInfo - Side_bar, bread_crumbs, home....
 * @property {string} flowType - empty/avalara/ avalaraAuto/ avalaraManual / manual
 * @property {boolean} withProductTaxGroups - true if page was loaded with productTaxGroups enabled (only for Tax tb and product page)
 * @property {string} listView - this field contains the data about the list view, if the page contain a list that can be edited
 * @property {string} appName - app_name
 * @property {string} orderId - relevant only for orders page
 * @property {string} tagid - tag_id that we send to app market
 * @property {string} paidStatus - relevant only for orders page: paid, notPaid, partiallyRefunded , refunded
 * @property {string} user_agent - user_agent
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} previousPage - last page seen by the user(product_page,products_catalog, editor...)
 * @property {string} shippingStatus - relevant only for orders page:    fulfilled, notFulfilled, partiallyFulfilled, cancelled
 * @property {string} origin - editor/ my account/onboarding
 * @property {string} pageState - can be different for each page, e.g. empty state, with orders...
 * @property {string} category - relevant for App in Context Page. what tab was loaded.  orders/inventory/marketing...
 * @property {number} loadTime - load_time
 * @property {boolean} isPremium - true if site is business premium false if otherwise
 * @property {string} pageName - product_page, products_catalog, payments_page...
 * @property {GUID} bi_token - msid
 * @return {LogObject<pageLoadSmParams>} LogObject<pageLoadSmParams>
 */
export function pageLoadSm(params) {
    return {
        evid: 313,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoadStartedSm' event (evid: 314)
 *
 * Event description: SM page load started
 *
 * @param {pageLoadStartedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} referralInfo - Side_bar, bread_crumbs, home....
 * @property {string} appName - SM/biz managet
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} previousPage - last page seen by the user(product_page,products_catalog, editor...)
 * @property {string} origin - editor/ my account
 * @property {string} pageName - product_page, products_catalog, payments_page...
 * @property {GUID} bi_token - msid
 * @return {LogObject<pageLoadStartedSmParams>} LogObject<pageLoadStartedSmParams>
 */
export function pageLoadStartedSm(params) {
    return {
        evid: 314,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeCheckoutSettingInSm' event (evid: 315)
 *
 * Event description: in store settings - when toggling on/off the SF visibility toggle or mark the mandatory checkbox
 *
 * @param {changeCheckoutSettingInSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} field - company_name/address/phone/policy_agreement/subscription/ custom
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - visibility / mandatory / default_state/ title (for custom)
 * @property {string} value - on/off  (for type =visibility ) | checked / unchecked (for type = mandatory / default_state) | user's string value (for title)
 * @property {GUID} bi_token - bi_token
 * @return {LogObject<changeCheckoutSettingInSmParams>} LogObject<changeCheckoutSettingInSmParams>
 */
export function changeCheckoutSettingInSm(params) {
    return {
        evid: 315,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeManagerStartLoadingFromSettings' event (evid: 316)
 *
 * Event description: store manager start loading from settings.
 *
 * @param {storeManagerStartLoadingFromSettingsParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeManagerStartLoadingFromSettingsParams>} LogObject<storeManagerStartLoadingFromSettingsParams>
 */
export function storeManagerStartLoadingFromSettings(params) {
    return {
        evid: 316,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeManagerLoaded' event (evid: 317)
 *
 * Event description: store manager loaded.
 *
 * @param {storeManagerLoadedParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {number} screen_width - screen_width resolution
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {number} screen_height - screen_height resolution
 * @property {boolean} isPremium - is the user a premium user when opening store manager
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeManagerLoadedParams>} LogObject<storeManagerLoadedParams>
 */
export function storeManagerLoaded(params) {
    return {
        evid: 317,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStoreSettingsFieldSm' event (evid: 319)
 *
 * Event description: in settings tab - when changing one of the text fields or the store's logo
 *
 * @param {changeStoreSettingsFieldSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - logo, busines name, phone, email address, address, email to buyer, mandatory cpf/cnpj tax (BR), minimum order
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - home/ bisiness info tab
 * @property {string} type - currently only in minimum order enable / input
 * @property {GUID} bi_token - msid
 * @property {string} newValue - only for relevant fields
 * @return {LogObject<changeStoreSettingsFieldSmParams>} LogObject<changeStoreSettingsFieldSmParams>
 */
export function changeStoreSettingsFieldSm(params) {
    return {
        evid: 319,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsDeleteOptionFromCatalog' event (evid: 32)
 *
 * Event description: when user click to delete an option from the catalog (in manage all product options menu)
 *
 * @param {productOptionsDeleteOptionFromCatalogParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productOptionsDeleteOptionFromCatalogParams>} LogObject<productOptionsDeleteOptionFromCatalogParams>
 */
export function productOptionsDeleteOptionFromCatalog(params) {
    return {
        evid: 32,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStorePoliciesSm' event (evid: 320)
 *
 * Event description: in settings tab - when checking / unchecking a store policy
 *
 * @param {changeStorePoliciesSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} policyType - policy type
 * @property {string} oldValue - checked / unchecked
 * @property {GUID} bi_token - msid
 * @property {string} newValue - checked / unchecked
 * @return {LogObject<changeStorePoliciesSmParams>} LogObject<changeStorePoliciesSmParams>
 */
export function changeStorePoliciesSm(params) {
    return {
        evid: 320,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAttachedToFulfiller' event (evid: 3200)
 *
 * Event description: Product iported from dropshipper TPA (Modalyst, Printful, Printify)
 *
 * @param {productAttachedToFulfillerParams} params - The parameters for this event
 * @property {string} fulfillerName - deprecated
 * @property {string} fulfillerId - fulfiller ID
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store ID
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} productId - product ID
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<productAttachedToFulfillerParams>} LogObject<productAttachedToFulfillerParams>
 */
export function productAttachedToFulfiller(params) {
    return {
        evid: 3200,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillerRegistered' event (evid: 3201)
 *
 * Event description: Fulfiller registered
 *
 * @param {fulfillerRegisteredParams} params - The parameters for this event
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} fulfillerId - who will fulfill orders
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store ID
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - who is caller
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} settings - OFF / ON_ORDER_CREATED / ON_ORDER_PAID
 * @return {LogObject<fulfillerRegisteredParams>} LogObject<fulfillerRegisteredParams>
 */
export function fulfillerRegistered(params) {
    return {
        evid: 3201,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillerRemoved' event (evid: 3202)
 *
 * Event description: Fulfiller removed
 *
 * @param {fulfillerRemovedParams} params - The parameters for this event
 * @property {string} fulfillerId - fulfiller_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store ID
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - who is caller
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @return {LogObject<fulfillerRemovedParams>} LogObject<fulfillerRemovedParams>
 */
export function fulfillerRemoved(params) {
    return {
        evid: 3202,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillerEdited' event (evid: 3203)
 *
 * Event description: Fulfiller redited
 *
 * @param {fulfillerEditedParams} params - The parameters for this event
 * @property {string} fulfillerId - fulfiller_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store ID
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - who is caller
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {string} settings - OFF / ON_ORDER_CREATED / ON_ORDER_PAID
 * @return {LogObject<fulfillerEditedParams>} LogObject<fulfillerEditedParams>
 */
export function fulfillerEdited(params) {
    return {
        evid: 3203,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStorePoliciesTitleSm' event (evid: 321)
 *
 * Event description: in settings tab - when checking / unchecking / changing text / changing title for a store policy
 *
 * @param {changeStorePoliciesTitleSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} policyType - policy type
 * @property {string} title - policy title
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeStorePoliciesTitleSmParams>} LogObject<changeStorePoliciesTitleSmParams>
 */
export function changeStorePoliciesTitleSm(params) {
    return {
        evid: 321,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStorePoliciesTextSm' event (evid: 322)
 *
 * Event description: in settings tab - when changing text in a store policy
 *
 * @param {changeStorePoliciesTextSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} text - text
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} policyType - policy type
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeStorePoliciesTextSmParams>} LogObject<changeStorePoliciesTextSmParams>
 */
export function changeStorePoliciesTextSm(params) {
    return {
        evid: 322,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'chargeTaxesOnShippingRatesSm' event (evid: 324)
 *
 * Event description: in settings tab - when checking / unchecking the charge taxes toggle
 *
 * @param {chargeTaxesOnShippingRatesSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} newValue - checked / unchecked
 * @return {LogObject<chargeTaxesOnShippingRatesSmParams>} LogObject<chargeTaxesOnShippingRatesSmParams>
 */
export function chargeTaxesOnShippingRatesSm(params) {
    return {
        evid: 324,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnPreviewCheckoutSm' event (evid: 325)
 *
 * Event description: in settings tab - click on preview checkout. Not relevant in new checkout since ~Nov 2017
 *
 * @param {clickOnPreviewCheckoutSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - store name / policies
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnPreviewCheckoutSmParams>} LogObject<clickOnPreviewCheckoutSmParams>
 */
export function clickOnPreviewCheckoutSm(params) {
    return {
        evid: 325,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnButtonInCurrChangePopUpSm' event (evid: 326)
 *
 * Event description: click on button in curr change pop up
 *
 * @param {clickOnButtonInCurrChangePopUpSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} button_type - button_type (save / cancel)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnButtonInCurrChangePopUpSmParams>} LogObject<clickOnButtonInCurrChangePopUpSmParams>
 */
export function clickOnButtonInCurrChangePopUpSm(params) {
    return {
        evid: 326,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStoreFrontLanguageSm' event (evid: 328)
 *
 * Event description: in settings tab - when changing the language in which the visitors see the store
 *
 * @param {changeStoreFrontLanguageSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} newValue - new currency value
 * @return {LogObject<changeStoreFrontLanguageSmParams>} LogObject<changeStoreFrontLanguageSmParams>
 */
export function changeStoreFrontLanguageSm(params) {
    return {
        evid: 328,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnLeftBarTabsOnComponentSettingsSfe' event (evid: 33)
 *
 * Event description: click to view tab in the settings component (left bar)
 *
 * @param {clickOnLeftBarTabsOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} tab - design / text / Manage
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnLeftBarTabsOnComponentSettingsSfeParams>} LogObject<clickOnLeftBarTabsOnComponentSettingsSfeParams>
 */
export function clickOnLeftBarTabsOnComponentSettingsSfe(params) {
    return {
        evid: 33,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeCurrencyFormatSm' event (evid: 330)
 *
 * Event description: in settings tab - when changing the currency format
 *
 * @param {changeCurrencyFormatSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} newValue - new currency value
 * @return {LogObject<changeCurrencyFormatSmParams>} LogObject<changeCurrencyFormatSmParams>
 */
export function changeCurrencyFormatSm(params) {
    return {
        evid: 330,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'customFulfillerEmailTriggered' event (evid: 3301)
 *
 * Event description: when email to custom fulfiller was triggered to be sent. correct artifact is com.wixpress.serverless.serverless-wixstores-email-fulfiller
 *
 * @param {customFulfillerEmailTriggeredParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} itemsCount - number of products fulfilled
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - store manager / place order / order paid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<customFulfillerEmailTriggeredParams>} LogObject<customFulfillerEmailTriggeredParams>
 */
export function customFulfillerEmailTriggered(params) {
    return {
        evid: 3301,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'customFulfillerEmailSent' event (evid: 3302)
 *
 * Event description: when email to custom fulfiller was successfully sent. correct artifact is com.wixpress.serverless.serverless-wixstores-email-fulfiller
 *
 * @param {customFulfillerEmailSentParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} itemsCount - number of products fulfilled
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - store manager / place order / order paid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<customFulfillerEmailSentParams>} LogObject<customFulfillerEmailSentParams>
 */
export function customFulfillerEmailSent(params) {
    return {
        evid: 3302,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeCurrencySymbolLocationSm' event (evid: 331)
 *
 * Event description: in settings tab - when changing the currecy symbol location (left/right)
 *
 * @param {changeCurrencySymbolLocationSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @property {string} newValue - new currency value
 * @return {LogObject<changeCurrencySymbolLocationSmParams>} LogObject<changeCurrencySymbolLocationSmParams>
 */
export function changeCurrencySymbolLocationSm(params) {
    return {
        evid: 331,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStoreWeightFormatSm' event (evid: 332)
 *
 * Event description: in settings tab - merchant changes the weight format in settings tab
 *
 * @param {changeStoreWeightFormatSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @property {string} newValue - kg,lb...
 * @return {LogObject<changeStoreWeightFormatSmParams>} LogObject<changeStoreWeightFormatSmParams>
 */
export function changeStoreWeightFormatSm(params) {
    return {
        evid: 332,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cantAcceptOrdersAlertEmailTriggered' event (evid: 3321)
 *
 * Event description: When an email alerting the store owner that they are missing orders is triggered. The email is triggered when a buyer tries to purchase in a store that doesn't have shipping rules / payment connected (for now only to stores with ecom premium).
 *
 * @param {cantAcceptOrdersAlertEmailTriggeredParams} params - The parameters for this event
 * @property {boolean} isShipping - does the store have shipping rules
 * @property {string} email_id - email id
 * @property {GUID} storeId - store_id
 * @property {boolean} isPayment - does the store have a payment connected
 * @property {boolean} isPremium - does the store have eCom premium
 * @property {string} type - mail type (shipping/payment)
 * @return {LogObject<cantAcceptOrdersAlertEmailTriggeredParams>} LogObject<cantAcceptOrdersAlertEmailTriggeredParams>
 */
export function cantAcceptOrdersAlertEmailTriggered(params) {
    return {
        evid: 3321,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cantAcceptOrdersAlertEmailSent' event (evid: 3322)
 *
 * Event description: When an email alerting the store owner that they are missing orders is sent successfully. We can't really know if it was sent successfully, but we know it was transferred to the service that sends the mails.
 *
 * @param {cantAcceptOrdersAlertEmailSentParams} params - The parameters for this event
 * @property {string} email_id - email id
 * @property {GUID} storeId - store_id
 * @property {string} type - mail type (shipping/payment)
 * @return {LogObject<cantAcceptOrdersAlertEmailSentParams>} LogObject<cantAcceptOrdersAlertEmailSentParams>
 */
export function cantAcceptOrdersAlertEmailSent(params) {
    return {
        evid: 3322,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cantAcceptOrdersAlertEmailFaild' event (evid: 3323)
 *
 * Event description: When an email alerting the store owner that they are missing orders has failed and wasn't sent. We can't really know if it was sent successfully, but we know it was transferred to the service that sends the mails.
 *
 * @param {cantAcceptOrdersAlertEmailFaildParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} email_id - email id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - mail type (shipping/payment)
 * @property {GUID} bi_token - msid
 * @return {LogObject<cantAcceptOrdersAlertEmailFaildParams>} LogObject<cantAcceptOrdersAlertEmailFaildParams>
 */
export function cantAcceptOrdersAlertEmailFaild(params) {
    return {
        evid: 3323,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addTableInTextEditorSm' event (evid: 333)
 *
 * Event description: click on add table icon in text editor to add table to text
 *
 * @param {addTableInTextEditorSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product form / offline payment instructions
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<addTableInTextEditorSmParams>} LogObject<addTableInTextEditorSmParams>
 */
export function addTableInTextEditorSm(params) {
    return {
        evid: 333,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnWixTouchLinkSm' event (evid: 334)
 *
 * Event description: merchant clicks on wix touch link in store manager
 *
 * @param {clickOnWixTouchLinkSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnWixTouchLinkSmParams>} LogObject<clickOnWixTouchLinkSmParams>
 */
export function clickOnWixTouchLinkSm(params) {
    return {
        evid: 334,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnBackInWixTouchScreenSm' event (evid: 335)
 *
 * Event description: merchant clicks on back link in wix touch link in store manager
 *
 * @param {clickOnBackInWixTouchScreenSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBackInWixTouchScreenSmParams>} LogObject<clickOnBackInWixTouchScreenSmParams>
 */
export function clickOnBackInWixTouchScreenSm(params) {
    return {
        evid: 335,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reviewsShowModalSm' event (evid: 336)
 *
 * Event description: show review wixstores modal in store manager
 *
 * @param {reviewsShowModalSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} step - the step who made the modal to pop-up (add product / add payment )
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - modal type (reviews / thank you)
 * @property {GUID} bi_token - msid
 * @return {LogObject<reviewsShowModalSmParams>} LogObject<reviewsShowModalSmParams>
 */
export function reviewsShowModalSm(params) {
    return {
        evid: 336,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reviewsClickOnCtaInModalSm' event (evid: 337)
 *
 * Event description: click on CTA in review wixstores modal in store manager
 *
 * @param {reviewsClickOnCtaInModalSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} button_type - add review / no thanks / X...
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - modal type (reviews / thank you)
 * @property {GUID} bi_token - msid
 * @return {LogObject<reviewsClickOnCtaInModalSmParams>} LogObject<reviewsClickOnCtaInModalSmParams>
 */
export function reviewsClickOnCtaInModalSm(params) {
    return {
        evid: 337,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reviewsSaveReviewSm' event (evid: 338)
 *
 * Event description: user filled the review form and clicked 'add review' -> review was saved
 *
 * @param {reviewsSaveReviewSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} count - number of stars in review (1-5)
 * @property {string} appName - app_name
 * @property {string} text - free text in review
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<reviewsSaveReviewSmParams>} LogObject<reviewsSaveReviewSmParams>
 */
export function reviewsSaveReviewSm(params) {
    return {
        evid: 338,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStoreCategoryIndestrySm' event (evid: 339)
 *
 * Event description: change store  category/indestry
 *
 * @param {changeStoreCategoryIndestrySmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} oldValue - value
 * @property {GUID} bi_token - msid
 * @property {string} newValue - value
 * @return {LogObject<changeStoreCategoryIndestrySmParams>} LogObject<changeStoreCategoryIndestrySmParams>
 */
export function changeStoreCategoryIndestrySm(params) {
    return {
        evid: 339,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSettingsTopBarDesignTab' event (evid: 34)
 *
 * Event description: click on the top bar in the settings menu under design tab
 * (For members components)
 *
 * @param {clickOnSettingsTopBarDesignTabParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} tab - with orders / without orders
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSettingsTopBarDesignTabParams>} LogObject<clickOnSettingsTopBarDesignTabParams>
 */
export function clickOnSettingsTopBarDesignTab(params) {
    return {
        evid: 34,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleClickToDisconnectAccount' event (evid: 340)
 *
 * Event description: Click to disconnect the iZettla Account
 *
 * @param {iZettleClickToDisconnectAccountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleClickToDisconnectAccountParams>} LogObject<iZettleClickToDisconnectAccountParams>
 */
export function iZettleClickToDisconnectAccount(params) {
    return {
        evid: 340,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showPaypalNonSupportedCurrencyModalSm' event (evid: 341)
 *
 * Event description: show paypal non-supported currency modal
 *
 * @param {showPaypalNonSupportedCurrencyModalSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - setting/payments
 * @property {GUID} bi_token - msid
 * @return {LogObject<showPaypalNonSupportedCurrencyModalSmParams>} LogObject<showPaypalNonSupportedCurrencyModalSmParams>
 */
export function showPaypalNonSupportedCurrencyModalSm(params) {
    return {
        evid: 341,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paypalCurrncyModalClickOnCtaInModalSm' event (evid: 342)
 *
 * Event description: click on CTA in non-supported currency modal in store manager
 *
 * @param {paypalCurrncyModalClickOnCtaInModalSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} button_type - ok / cancel / link / X
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - setting/payments
 * @property {GUID} bi_token - msid
 * @return {LogObject<paypalCurrncyModalClickOnCtaInModalSmParams>} LogObject<paypalCurrncyModalClickOnCtaInModalSmParams>
 */
export function paypalCurrncyModalClickOnCtaInModalSm(params) {
    return {
        evid: 342,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnUpgradeSm' event (evid: 343)
 *
 * Event description: Click on upgrade from SM
 *
 * @param {clickOnUpgradeSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - breadcrumbs / tab/ left navigation/ home...
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnUpgradeSmParams>} LogObject<clickOnUpgradeSmParams>
 */
export function clickOnUpgradeSm(params) {
    return {
        evid: 343,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStoreUnitsFormatSm' event (evid: 344)
 *
 * Event description: Metric/ Imperial
 *
 * @param {changeStoreUnitsFormatSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} newValue - Metric/ Imperial
 * @return {LogObject<changeStoreUnitsFormatSmParams>} LogObject<changeStoreUnitsFormatSmParams>
 */
export function changeStoreUnitsFormatSm(params) {
    return {
        evid: 344,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonsRibbonModalLoaded' event (evid: 345)
 *
 * Event description: Ribbon modal loaded
 *
 * @param {bulkActionRibbonsRibbonModalLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numProducts - number of product shown in the modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionRibbonsRibbonModalLoadedParams>} LogObject<bulkActionRibbonsRibbonModalLoadedParams>
 */
export function bulkActionRibbonsRibbonModalLoaded(params) {
    return {
        evid: 345,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettlePageLoad' event (evid: 346)
 *
 * Event description: When the app page load with any of the messages
 * Connect account / First Import / While Importing / All Products imported / Import more / No Additional Products / Fail to import
 *
 * @param {iZettlePageLoadParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageState - First Import / While Importing / All Products imported / Import more / No Additional Products / Fail to import
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettlePageLoadParams>} LogObject<iZettlePageLoadParams>
 */
export function iZettlePageLoad(params) {
    return {
        evid: 346,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleClickLearnMore' event (evid: 347)
 *
 * Event description: Click learn more in iZettle
 *
 * @param {iZettleClickLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - 'subTitle' or 'Note'
 * @property {string} pageState - page_state
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleClickLearnMoreParams>} LogObject<iZettleClickLearnMoreParams>
 */
export function iZettleClickLearnMore(params) {
    return {
        evid: 347,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'iZettleAccountConnectedSuccessfully' event (evid: 348)
 *
 * Event description: When account connected successfully
 *
 * @param {iZettleAccountConnectedSuccessfullyParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<iZettleAccountConnectedSuccessfullyParams>} LogObject<iZettleAccountConnectedSuccessfullyParams>
 */
export function iZettleAccountConnectedSuccessfully(params) {
    return {
        evid: 348,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonsClickSeeHowRibbonsLook' event (evid: 349)
 *
 * Event description: Click See how Ribbons look in bulk action ribbon modal
 *
 * @param {bulkActionRibbonsClickSeeHowRibbonsLookParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of product shown in the modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionRibbonsClickSeeHowRibbonsLookParams>} LogObject<bulkActionRibbonsClickSeeHowRibbonsLookParams>
 */
export function bulkActionRibbonsClickSeeHowRibbonsLook(params) {
    return {
        evid: 349,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCustomizeButtonInTheSettingsMenu' event (evid: 35)
 *
 * Event description: click on customize button in the main tab on the new settings menu
 * (For members components)
 *
 * @param {clickOnCustomizeButtonInTheSettingsMenuParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetTab - the target tab this buton reffer to
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCustomizeButtonInTheSettingsMenuParams>} LogObject<clickOnCustomizeButtonInTheSettingsMenuParams>
 */
export function clickOnCustomizeButtonInTheSettingsMenu(params) {
    return {
        evid: 35,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsDelayPopupShowSm' event (evid: 350)
 *
 * Event description: A popup is presented when the import process takes more than 5 sec
 *
 * @param {importProductsDelayPopupShowSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - appname
 * @property {number} total - total items imported
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsDelayPopupShowSmParams>} LogObject<importProductsDelayPopupShowSmParams>
 */
export function importProductsDelayPopupShowSm(params) {
    return {
        evid: 350,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'actionTooltipsInSm' event (evid: 351)
 *
 * Event description: when the funnel tooltip is presented to the user  (on hover/step completion )
 *
 * @param {actionTooltipsInSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - connect payment / ...name of action
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isHover - true if tooltip showed upon hover
 * @property {string} place - sidebar
 * @property {string} hosting - MA / editor
 * @property {GUID} bi_token - msid
 * @return {LogObject<actionTooltipsInSmParams>} LogObject<actionTooltipsInSmParams>
 */
export function actionTooltipsInSm(params) {
    return {
        evid: 351,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickAddCustomFulfiller' event (evid: 352)
 *
 * Event description: User clicks on "Add fulfiller"  in Custom fulfiller section of  fulfilment services page (lead to open a popup)
 *
 * @param {fulfillmentClickAddCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - empty / full
 * @property {string} appName - appName
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickAddCustomFulfillerParams>} LogObject<fulfillmentClickAddCustomFulfillerParams>
 */
export function fulfillmentClickAddCustomFulfiller(params) {
    return {
        evid: 352,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickInAssignProductsToFulfillerPopup' event (evid: 353)
 *
 * Event description: user clicked "done" in assign products popup
 *
 * @param {fulfillmentClickInAssignProductsToFulfillerPopupParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentClickInAssignProductsToFulfillerPopupParams>} LogObject<fulfillmentClickInAssignProductsToFulfillerPopupParams>
 */
export function fulfillmentClickInAssignProductsToFulfillerPopup(params) {
    return {
        evid: 353,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentErrorInAddEditCustomFulfiller' event (evid: 354)
 *
 * Event description: user clicked on Add/save in  "add/edit custom fulfiller" popup but failed validation (Name or/and email) and got error
 *
 * @param {fulfillmentErrorInAddEditCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name (e.g. wixstores-client-cart)
 * @property {string} fulfillerId - fulfiller_id (only for edit)
 * @property {string} errorEmail - not valid / already exists
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} errorName - empty / already exists
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentErrorInAddEditCustomFulfillerParams>} LogObject<fulfillmentErrorInAddEditCustomFulfillerParams>
 */
export function fulfillmentErrorInAddEditCustomFulfiller(params) {
    return {
        evid: 354,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentAddEditCustomFulfiller' event (evid: 355)
 *
 * Event description: user clicked on Add/save in  "add/edit custom fulfiller" popup (will not show when there is an error 10:354)
 *
 * @param {fulfillmentAddEditCustomFulfillerParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - users input name
 * @property {string} appName - app name (e.g. wixstores-client-cart)
 * @property {string} fulfillerId - fulfiller_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - add / edit
 * @property {string} settings - OFF / ON_ORDER_CREATED / ON_ORDER_PAID
 * @property {GUID} bi_token - msid
 * @return {LogObject<fulfillmentAddEditCustomFulfillerParams>} LogObject<fulfillmentAddEditCustomFulfillerParams>
 */
export function fulfillmentAddEditCustomFulfiller(params) {
    return {
        evid: 355,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickBackInOaMerchantView' event (evid: 356)
 *
 * Event description: user clicks Back/close button in OA
 *
 * @param {clickBackInOaMerchantViewParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} cartId - cart_id
 * @property {string} screenName - collections / posCash / posPayment / posCart
 * @property {string} appName - app_name
 * @property {GUID} orderId - for POS screens
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickBackInOaMerchantViewParams>} LogObject<clickBackInOaMerchantViewParams>
 */
export function clickBackInOaMerchantView(params) {
    return {
        evid: 356,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickManageCollectionsInOa' event (evid: 357)
 *
 * Event description: user clicks  "Manage collections" in Products screen OA
 *
 * @param {clickManageCollectionsInOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickManageCollectionsInOaParams>} LogObject<clickManageCollectionsInOaParams>
 */
export function clickManageCollectionsInOa(params) {
    return {
        evid: 357,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'requestToAddEditTrackingNumber' event (evid: 358)
 *
 * Event description: After user clicked Save on Add edit tracking info screen, OneApp sends request to server with info
 *
 * @param {requestToAddEditTrackingNumberParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} trackingInfo - what is sent to server with request (relevant for OA)
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<requestToAddEditTrackingNumberParams>} LogObject<requestToAddEditTrackingNumberParams>
 */
export function requestToAddEditTrackingNumber(params) {
    return {
        evid: 358,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageManageOptionsClickedOa' event (evid: 359)
 *
 * Event description: When user clicks on manage options from Manage Additional Details menu and when clicking on an options area in a product view
 *
 * @param {productPageManageOptionsClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - options area / additional details menu
 * @property {string} productId - product_id
 * @property {string} type - add /edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageManageOptionsClickedOaParams>} LogObject<productPageManageOptionsClickedOaParams>
 */
export function productPageManageOptionsClickedOa(params) {
    return {
        evid: 359,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutPageLoadSf' event (evid: 36)
 *
 * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full
 *
 * @param {checkoutPageLoadSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} originType - origin type
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isPolicy - is_policy
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {string} first_stage - first_stage_open in checkout page
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart' / 'product page' / 'product widget' / 'quick view'
 * @property {string} checkoutType - checkout_type
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} numOfPickup - num_of_pickup
 * @property {boolean} hasMembers - has_members_area
 * @property {string} paymentProviders - payment_providers
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<checkoutPageLoadSfParams>} LogObject<checkoutPageLoadSfParams>
 */
export function checkoutPageLoadSf(params) {
    return {
        evid: 36,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageAdditionalDetailsChangesSavedAfterProductIsSavedOa' event (evid: 360)
 *
 * Event description: This event is sent in the moment of clicking on save Product (367) in case if something was changed in one of managing additional details (MAD) items.
 *
 * @param {manageAdditionalDetailsChangesSavedAfterProductIsSavedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - add / edit / no_change
 * @property {string} sku - add / edit / no_change
 * @property {string} productPrice - add / edit / no_change
 * @property {string} photo - add / edit / no_change
 * @property {string} description - add / edit / no_change
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} additionalSection - add / edit / no_change
 * @property {boolean} trackInventory - true  - if toggle on
 * @property {string} customTextFields - add / edit / no_change
 * @property {string} product_id - product_id
 * @property {string} ribbon - add / edit / no_change
 * @property {string} media - add / edit
 * @property {string} type - possible values: description,discount,ribbon,collection,inventory or set of these values
 * @property {string} discount - add / edit / no_change
 * @property {string} inventoryStatus - changed_in / changed_out / no_change
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageAdditionalDetailsChangesSavedAfterProductIsSavedOaParams>} LogObject<manageAdditionalDetailsChangesSavedAfterProductIsSavedOaParams>
 */
export function manageAdditionalDetailsChangesSavedAfterProductIsSavedOa(params) {
    return {
        evid: 360,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewProductClickedSm' event (evid: 361)
 *
 * Event description: Add new product clicked SM.
 *
 * @param {addNewProductClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that come from the script and not from the context/aspects/cookies
 * @return {LogObject<addNewProductClickedSmParams>} LogObject<addNewProductClickedSmParams>
 */
export function addNewProductClickedSm(params) {
    return {
        evid: 361,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editProductClickedSm' event (evid: 362)
 *
 * Event description: Edit product clicked.
 *
 * @param {editProductClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that comes from the script and not from the context/aspects/cookies
 * @return {LogObject<editProductClickedSmParams>} LogObject<editProductClickedSmParams>
 */
export function editProductClickedSm(params) {
    return {
        evid: 362,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'duplicateProductClickedSm' event (evid: 363)
 *
 * Event description: Duplicate product clicked SM.
 *
 * @param {duplicateProductClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<duplicateProductClickedSmParams>} LogObject<duplicateProductClickedSmParams>
 */
export function duplicateProductClickedSm(params) {
    return {
        evid: 363,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersBulkActionAppliedSm' event (evid: 364)
 *
 * Event description: merchant applies bulk action on selected orders (clicked Apply)
 *
 * @param {ordersBulkActionAppliedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} readyForPickupChecked - is ":ready for pickup" checked on bulk action
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} markedAsPaidChecked - is "mark as paid" checked on bulk action
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} num_items - number of items bulk action was applied on
 * @property {string} orderIds - array of order guids
 * @property {string} type - bulk action type (fulfilled / not fulfilled / paid / archive...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersBulkActionAppliedSmParams>} LogObject<ordersBulkActionAppliedSmParams>
 */
export function ordersBulkActionAppliedSm(params) {
    return {
        evid: 364,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionAppliedSm' event (evid: 365)
 *
 * Event description: merchant applies bulk action on selected products (clicked Apply)
 *
 * @param {bulkActionAppliedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} appliesToNum - Number of info sections that removed/added
 * @property {string} productids - array of product guids
 * @property {number} num_items - number of items bulk action was applied on
 * @property {string} type - bulk action type (add to collection / remove from collection / delete products / discount / add info section / visibility)
 * @property {string} visibility - relevant for visibility
 * @property {string} action - contain the possible action for each type
 * @property {number} discount_long - contains the numerical values of cog/change price/set discount
 * @property {GUID} bi_token - msid
 * @property {boolean} isRoundNumber - true if the user set the new price/value to be rounded to the nearest integer
 * @property {boolean} isChangeSalePrice - true if the user set to change the sale price accordingly to the new price
 * @return {LogObject<bulkActionAppliedSmParams>} LogObject<bulkActionAppliedSmParams>
 */
export function bulkActionAppliedSm(params) {
    return {
        evid: 365,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createProductSm' event (evid: 366)
 *
 * Event description: Create product SM.
 *
 * @param {createProductSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {number} price_long - price_long
 * @property {number} weight - product weight
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} discount_long - discount_long
 * @property {string} name - product_name
 * @property {number} numberOfImages - number_of_images
 * @property {boolean} preOrderMessage - true- if a message was added to pre order. false is no message was added
 * @property {boolean} customTextMandatory - check box - is mandatory (true / false)
 * @property {string} sku - sku
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill / notApplicable )
 * @property {boolean} showUnitPrice - is the "show price per unit" toggle on/off
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} vmFileId - VM file id's if user add videos to product page
 * @property {number} price - price_long
 * @property {boolean} hasPlans - if the product has subscriptions plans
 * @property {number} numberOfVmVideos - number of video maker videos in product
 * @property {number} item_cost_long - The actual item cost multiple by 100000
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill/notApplicable (for digital product)
 * @property {number} numberOfInfoSection - number_of_info_section
 * @property {string} productType - product_type
 * @property {string} brand - the brand value that was added to product
 * @property {string} user_agent - user_agent
 * @property {string} unitType - weight, volume, length, area
 * @property {boolean} preOrder - ​​true- if pre order toggle is on. false- if pre order toggle is off
 * @property {number} weight_long - product weight
 * @property {number} preOrderLimit - the pre order limit (optional, if pre order is true)
 * @property {boolean} isDuplicate - true if product was created as duplicate
 * @property {string} options - options
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} id - product_guid
 * @property {boolean} customText - use custom text (true / false)
 * @property {string} useDescription - use_description
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {number} limitCharCustomText - characters limit value
 * @property {string} productTaxGroupId - if tax groups are turned on
 * @property {boolean} isOptionImageLinked - did the user linked options to images
 * @property {string} origin - origin
 * @property {boolean} hasCostOfGoodsVariants - If the product has cost of goods on the variants level (bool)
 * @property {string} ribbon - ribbon
 * @property {string} manageVariance - manage_variance
 * @property {string} requireQuantity - require_quantity
 * @property {boolean} posVisibility - true - visible false - hidden
 * @property {boolean} hasCostOfGoodsProduct - If the product has cost of goods on the product level (bool)
 * @property {string} type - discount type
 * @property {string} inventoryPolicy - inventory_policy
 * @property {number} discount - discount_long
 * @property {string} visibility - visibility
 * @property {number} numberOfVideos - number_of_videos
 * @property {number} numberOfAltText - number_of_alt_text out of all product images
 * @property {GUID} bi_token - msid
 * @property {string} fileFormat - the file type that was attached in case of digital
 * @property {string} fileName - the name of the digital file
 * @property {string} filetype - the digital file type
 * @return {LogObject<createProductSmParams>} LogObject<createProductSmParams>
 */
export function createProductSm(params) {
    return {
        evid: 366,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateProductSm' event (evid: 367)
 *
 * Event description: Update product SM.
 *
 * @param {updateProductSmParams} params - The parameters for this event
 * @property {number} price_long - price_long
 * @property {number} weight - weight
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} discount_long - discount_long
 * @property {string} name - product_name
 * @property {number} numberOfImages - number_of_images
 * @property {boolean} preOrderMessage - true- if a message was added to pre order. false is no message was added
 * @property {boolean} customTextMandatory - check box - is mandatory (true / false)
 * @property {string} sku - sku
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill / notApplicable )
 * @property {boolean} showUnitPrice - is the "show price per unit" toggle on/off
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} vmFileId - VM file id's if user add videos to product page
 * @property {number} price - price_long
 * @property {boolean} hasPlans - if the product has subscriptions plans
 * @property {number} numberOfVmVideos - number of video maker videos in product
 * @property {number} item_cost_long - The actual item cost multiple by 100000
 * @property {string} fulfillerType - selffulfill/TPA/customFulfiller/notApplicable (for digital product)
 * @property {number} numberOfInfoSection - number_of_info_section
 * @property {string} productType - digital/physical
 * @property {string} brand - the brand value that was added to product
 * @property {string} user_agent - user_agent
 * @property {string} unitType - weight, volume, length, area
 * @property {boolean} preOrder - true- if pre order toggle is on. false- if pre order toggle is off
 * @property {number} weight_long - weight
 * @property {number} preOrderLimit - pre_order_limit
 * @property {string} options - options
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} id - Ignore this filed. wrong data type
 * @property {boolean} customText - use custom text (true / false)
 * @property {string} useDescription - use_description
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {number} limitCharCustomText - characters limit value
 * @property {string} productTaxGroupId - if Tax Groups are turned on
 * @property {boolean} isOptionImageLinked - did the user linked options to images
 * @property {string} origin - origin
 * @property {boolean} hasCostOfGoodsVariants - If the product has cost of goods on the variants level (bool)
 * @property {string} ribbon - ribbon
 * @property {string} manageVariance - manage_variance
 * @property {string} requireQuantity - require_quantity
 * @property {boolean} posVisibility - true - visible false - hidden
 * @property {boolean} hasCostOfGoodsProduct - If the product has cost of goods on the product level (bool)
 * @property {string} type - discount type
 * @property {string} inventoryPolicy - inventory_policy
 * @property {number} discount - discount_long
 * @property {string} visibility - visibility
 * @property {number} numberOfVideos - number_of_videos
 * @property {number} numberOfAltText - number_of_alt_text out of all product images
 * @property {GUID} bi_token - msid
 * @property {string} fileFormat - the file format that was attached in case of digital
 * @property {string} fileName - the name of  the digital file
 * @property {string} fileType - The file type
 * @property {GUID} userId - UUID that comes from the script and not from the context/aspects/cookies
 * @return {LogObject<updateProductSmParams>} LogObject<updateProductSmParams>
 */
export function updateProductSm(params) {
    return {
        evid: 367,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exceededProductOptionLimitSm' event (evid: 368)
 *
 * Event description: Merchant defined too many options and exceeded the limit for manage variants
 *
 * @param {exceededProductOptionLimitSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<exceededProductOptionLimitSmParams>} LogObject<exceededProductOptionLimitSmParams>
 */
export function exceededProductOptionLimitSm(params) {
    return {
        evid: 368,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editProductClickedMobileSm' event (evid: 369)
 *
 * Event description: Edit product clicked SM mobile  this is for WixOne app SM only. there is 2 parts for edit product in mobile, this is for the second part. the event for the first one is shared with web 362
 *
 * @param {editProductClickedMobileSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - name / price / description / sku / weight
 * @property {string} productId - product_guid
 * @property {string} type - add/ edit
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that come from the script and not from the context/aspects/cookies
 * @return {LogObject<editProductClickedMobileSmParams>} LogObject<editProductClickedMobileSmParams>
 */
export function editProductClickedMobileSm(params) {
    return {
        evid: 369,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutPageSpecificStageExpandedSf' event (evid: 37)
 *
 * Event description: when a new stage is expanded and another collapse.
 * When all data is visible. since june 2019 is sent also from OneApp
 *
 * @param {checkoutPageSpecificStageExpandedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - the edited stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
 * @property {boolean} isGiftCardApplied - is_gift_card_applied
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 * @property {boolean} isCartPaidOnlyWithGiftCard - is_gift_card_only
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} shippingStatus - shipping_status
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} hasGiftCard - has_gift_card
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<checkoutPageSpecificStageExpandedSfParams>} LogObject<checkoutPageSpecificStageExpandedSfParams>
 */
export function checkoutPageSpecificStageExpandedSf(params) {
    return {
        evid: 37,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reorderProductsClickedSm' event (evid: 370)
 *
 * Event description: Reorder of products in a collection clicked.
 * for now available only from products tab
 *
 * @param {reorderProductsClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - Products tab...
 * @property {GUID} bi_token - msid
 * @return {LogObject<reorderProductsClickedSmParams>} LogObject<reorderProductsClickedSmParams>
 */
export function reorderProductsClickedSm(params) {
    return {
        evid: 370,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'localDeliveryCreated' event (evid: 3700)
 *
 * Event description: When a new local delivery is created
 *
 * @param {localDeliveryCreatedParams} params - The parameters for this event
 * @property {number} rate - rate (multiple by 100,000!!)
 * @property {string} areaName - the area name the user input
 * @property {string} externalId - at the moment = shipping_rule_guid
 * @property {number} minimumOrder - minimum order for free delivery (if null then it's not offered) (multiple by 100,000!!)
 * @property {number} numTimeSlots - General number of time slots
 * @property {GUID} storeId - store_id
 * @property {string} scheduledDeliveryConfig - Days config which contain days when delivery is enabled with it's time slots
 * @property {number} numDays - How many days were checked
 * @property {number} radius - The size of the radius - multiple by 100,000
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} cutOffHours - Hours in format 0-23
 * @property {number} cutOffMinutes - Minutes in format 0-59
 * @property {number} handlingDays - handling_days
 * @property {string} localDeliveryId - local_delivery_id
 * @property {string} deliveryTime - The estimated delivery time
 * @property {string} identityType - identity_type
 * @property {number} zipCodesAmount - The amount of zip codes
 * @return {LogObject<localDeliveryCreatedParams>} LogObject<localDeliveryCreatedParams>
 */
export function localDeliveryCreated(params) {
    return {
        evid: 3700,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'localDeliveryUpdated' event (evid: 3701)
 *
 * Event description: When a new local delivery is updated
 *
 * @param {localDeliveryUpdatedParams} params - The parameters for this event
 * @property {number} rate - rate (multiple by 100,000!!)
 * @property {string} areaName - the area name the user input
 * @property {string} externalId - at the moment = shipping_rule_guid
 * @property {number} minimumOrder - minimum order for free delivery (if null then it's not offered) (multiple by 100,000!!)
 * @property {number} numTimeSlots - General number of time slots
 * @property {GUID} storeId - store_id
 * @property {string} scheduledDeliveryConfig - Days config which contain days when delivery is enabled with it's time slots
 * @property {number} numDays - How many days were checked
 * @property {number} radius - The size of the radius - multiple by 100,000
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} cutOffHours - Hours in format 0-23
 * @property {number} cutOffMinutes - Minutes in format 0-59
 * @property {number} handlingDays - Amount of days before the first delivery option date.
 * @property {string} localDeliveryId - local_delivery_id
 * @property {string} deliveryTime - The estimated delivery time
 * @property {string} identityType - identity_type
 * @property {number} zipCodesAmount - The amount of zip codes
 * @return {LogObject<localDeliveryUpdatedParams>} LogObject<localDeliveryUpdatedParams>
 */
export function localDeliveryUpdated(params) {
    return {
        evid: 3701,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'localDeliveryDeleted' event (evid: 3702)
 *
 * Event description: When a new local delivery is deleted
 *
 * @param {localDeliveryDeletedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} localDeliveryId - local_delivery_id
 * @property {string} identityType - identity_type
 * @return {LogObject<localDeliveryDeletedParams>} LogObject<localDeliveryDeletedParams>
 */
export function localDeliveryDeleted(params) {
    return {
        evid: 3702,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageAddPhotoOa' event (evid: 372)
 *
 * Event description: When user clicks on add photo from add product  screen
 *
 * @param {productPageAddPhotoOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} categoryId - id of collection
 * @property {string} state - empty / with_pic
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product_screen / media_manager / collection_screen
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageAddPhotoOaParams>} LogObject<productPageAddPhotoOaParams>
 */
export function productPageAddPhotoOa(params) {
    return {
        evid: 372,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageAddDescriptionClickedOa' event (evid: 373)
 *
 * Event description: When user clicks on add description from add product / edit product screen
 *
 * @param {productPageAddDescriptionClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageAddDescriptionClickedOaParams>} LogObject<productPageAddDescriptionClickedOaParams>
 */
export function productPageAddDescriptionClickedOa(params) {
    return {
        evid: 373,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportOrdersClickedSm' event (evid: 374)
 *
 * Event description: Export orders in orders tab clicked.
 *
 * @param {exportOrdersClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportOrdersClickedSmParams>} LogObject<exportOrdersClickedSmParams>
 */
export function exportOrdersClickedSm(params) {
    return {
        evid: 374,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageAddToCollectionClickedOa' event (evid: 375)
 *
 * Event description: When user clicks on add collections from add product / edit product screen
 *
 * @param {productPageAddToCollectionClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product screen / additional details menu
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageAddToCollectionClickedOaParams>} LogObject<productPageAddToCollectionClickedOaParams>
 */
export function productPageAddToCollectionClickedOa(params) {
    return {
        evid: 375,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageAddDiscountClickedOa' event (evid: 376)
 *
 * Event description: When user clicks on add discount from add product / edit product screen
 *
 * @param {productPageAddDiscountClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} hasPrice - true - if product has price, leads to open discount modal / push
 * @property {string} product_id - product_id
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageAddDiscountClickedOaParams>} LogObject<productPageAddDiscountClickedOaParams>
 */
export function productPageAddDiscountClickedOa(params) {
    return {
        evid: 376,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageProductVisabilityChangeOa' event (evid: 377)
 *
 * Event description: When user change the products visability
 *
 * @param {productPageProductVisabilityChangeOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productId - product's id
 * @property {string} visibility - visibility
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageProductVisabilityChangeOaParams>} LogObject<productPageProductVisabilityChangeOaParams>
 */
export function productPageProductVisabilityChangeOa(params) {
    return {
        evid: 377,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'chooseProductTypeClickedSm' event (evid: 378)
 *
 * Event description: the user is prompt to choose product type digital/physical after clicking on add new product
 *
 * @param {chooseProductTypeClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product list/home...
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseProductTypeClickedSmParams>} LogObject<chooseProductTypeClickedSmParams>
 */
export function chooseProductTypeClickedSm(params) {
    return {
        evid: 378,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorOnSaveProductSmOldEvent' event (evid: 379)
 *
 * Event description: error appears when user try to save product without a name, price (and file for digital goods).
 *
 * @param {errorOnSaveProductSmOldEventParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} fileAttached - is file attached for digital goods
 * @property {boolean} name_empty - name_empty
 * @property {string} productId - productId
 * @property {boolean} price_empty - price_empty
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorOnSaveProductSmOldEventParams>} LogObject<errorOnSaveProductSmOldEventParams>
 */
export function errorOnSaveProductSmOldEvent(params) {
    return {
        evid: 379,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddOptionsSm' event (evid: 38)
 *
 * Event description: when clicking 'Add Option' in Empty state or not
 *
 * @param {clickAddOptionsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - 'empty state' / 'options list'
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddOptionsSmParams>} LogObject<clickAddOptionsSmParams>
 */
export function clickAddOptionsSm(params) {
    return {
        evid: 38,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'filterProductListByProductTypeClickedSm' event (evid: 380)
 *
 * Event description: merchant filtered his product list by product type / inventory status / visibility/ collection name
 *
 * @param {filterProductListByProductTypeClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} filterStatus - json of the status of all fields that affect the list currently
 * @property {string} productType - Digital/ Physical
 * @property {string} filter_value - visible/ not visible/all//Digital/ Physical/all/in stock/out of stock/partial stock/collection name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} filterState - ‘true’ if filter added, ‘false’ if filter removed
 * @property {string} origin - the origin the filter was changed from ('list' / ''panel')
 * @property {string} filterSubcategory - When category is visibility: all/hidden pos/hidden online/shown pos/shown online When category is Inventory: all / in stock/partially out of stock/out of stock/last imported When category is collections: collections When category is product type: all/digital/physical When category is date created: from_date/ to_date When category is price: price_from / price_to/1 if on sale 0 if not
 * @property {string} filter_type - collection/ visibility/status/type
 * @property {string} filterCategory - ’price’, ‘inventory’, ‘collections’, ‘product type’, ‘visability, ‘clear all’, ‘search’,’date created’
 * @property {GUID} bi_token - msid
 * @return {LogObject<filterProductListByProductTypeClickedSmParams>} LogObject<filterProductListByProductTypeClickedSmParams>
 */
export function filterProductListByProductTypeClickedSm(params) {
    return {
        evid: 380,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductSocialShare' event (evid: 381)
 *
 * Event description: when user click on social share for product
 *
 * @param {clickOnProductSocialShareParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - storeManagerApp,businessManagerStores,StoresMobile
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - promote card,product page
 * @property {string} share_type - facebook,pinterest,twitter
 * @property {number} product_id - ignor
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductSocialShareParams>} LogObject<clickOnProductSocialShareParams>
 */
export function clickOnProductSocialShare(params) {
    return {
        evid: 381,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportProductsClickedSm' event (evid: 382)
 *
 * Event description: Export products in a products page clicked.
 * for now available only from products tab (origin field = products)
 *
 * @param {exportProductsClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - bulk / productsList
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportProductsClickedSmParams>} LogObject<exportProductsClickedSmParams>
 */
export function exportProductsClickedSm(params) {
    return {
        evid: 382,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportProductsCreateCsvClickedSm' event (evid: 383)
 *
 * Event description: Export create csv file is clicked.
 *
 * @param {exportProductsCreateCsvClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product list / import products modal
 * @property {number} products_count - Number of product exported
 * @property {GUID} userId - userId
 * @property {string} type - all products / bulk action
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportProductsCreateCsvClickedSmParams>} LogObject<exportProductsCreateCsvClickedSmParams>
 */
export function exportProductsCreateCsvClickedSm(params) {
    return {
        evid: 383,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonsClickNewRibbon' event (evid: 384)
 *
 * Event description: Click New ribbon in bulk action ribbon modal
 *
 * @param {bulkActionRibbonsClickNewRibbonParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numProducts - number of product shown in the modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionRibbonsClickNewRibbonParams>} LogObject<bulkActionRibbonsClickNewRibbonParams>
 */
export function bulkActionRibbonsClickNewRibbon(params) {
    return {
        evid: 384,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSeoSm' event (evid: 385)
 *
 * Event description: when user click on Edit SEO from product page promote card
 *
 * @param {clickOnSeoSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - promote card
 * @property {number} product_id - Prod id
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSeoSmParams>} LogObject<clickOnSeoSmParams>
 */
export function clickOnSeoSm(params) {
    return {
        evid: 385,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveProductSeoSettingsSm' event (evid: 386)
 *
 * Event description: save product SEO setting
 *
 * @param {saveProductSeoSettingsSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} seoDescriptionChanged - has SEO description changed
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} seoJsonChanged - has SEO json changed
 * @property {number} product_id - Prod id
 * @property {string} productId - product_guid
 * @property {boolean} seoTitleChanges - has the SEO title changed
 * @property {boolean} seoUrlChanged - true/false
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveProductSeoSettingsSmParams>} LogObject<saveProductSeoSettingsSmParams>
 */
export function saveProductSeoSettingsSm(params) {
    return {
        evid: 386,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cancelEditProductClickedMobileOa' event (evid: 387)
 *
 * Event description: Event is sent when users clicks on "cancel"  in edit product (closes edit product page with out saving) Since July 2020 replaced by 10:243 value = discard type = discard_changes
 *
 * @param {cancelEditProductClickedMobileOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelEditProductClickedMobileOaParams>} LogObject<cancelEditProductClickedMobileOaParams>
 */
export function cancelEditProductClickedMobileOa(params) {
    return {
        evid: 387,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageManageRibbonClickedOa' event (evid: 388)
 *
 * Event description: When user clicks on manage ribbon from Manage Additional Details menu
 *
 * @param {productPageManageRibbonClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} product_id - product_id
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageManageRibbonClickedOaParams>} LogObject<productPageManageRibbonClickedOaParams>
 */
export function productPageManageRibbonClickedOa(params) {
    return {
        evid: 388,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorOnSaveProductSm' event (evid: 389)
 *
 * Event description: error appears when user try to save product without a name, price (and file for digital goods).
 *
 * @param {errorOnSaveProductSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - digital/physical
 * @property {boolean} fileError - is file not attached for digital goods
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} priceError - price_error
 * @property {boolean} nameError - name_error
 * @property {string} productId - productId
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorOnSaveProductSmParams>} LogObject<errorOnSaveProductSmParams>
 */
export function errorOnSaveProductSm(params) {
    return {
        evid: 389,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveTempProductOptionSm' event (evid: 39)
 *
 * Event description: when Add the product option to the product (click save on the pop up)
 *
 * @param {saveTempProductOptionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - edit option / add option
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveTempProductOptionSmParams>} LogObject<saveTempProductOptionSmParams>
 */
export function saveTempProductOptionSm(params) {
    return {
        evid: 39,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsClickedSm' event (evid: 390)
 *
 * Event description: Import products in a products page clicked. for now available only from products tab
 *
 * @param {importProductsClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - empty state / products list
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsClickedSmParams>} LogObject<importProductsClickedSmParams>
 */
export function importProductsClickedSm(params) {
    return {
        evid: 390,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'startAProcessInReadyToSellFunnel' event (evid: 3901)
 *
 * Event description: Ready to sell funnel - Sent in the beginning of a process
 *
 * @param {startAProcessInReadyToSellFunnelParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} processName - process name that started
 * @property {string} details - more details
 * @property {GUID} msid - msid, can be null for processes that msid wasn't created yet
 * @return {LogObject<startAProcessInReadyToSellFunnelParams>} LogObject<startAProcessInReadyToSellFunnelParams>
 */
export function startAProcessInReadyToSellFunnel(params) {
    return {
        evid: 3901,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorOnAProcessInReadyToSellFunnel' event (evid: 3902)
 *
 * Event description: Ready to sell funnel - Sent when an error occurred
 *
 * @param {errorOnAProcessInReadyToSellFunnelParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} processName - process name of error
 * @property {string} details - more details
 * @property {GUID} msid - msid, can be null for processes that msid wasn't created yet
 * @return {LogObject<errorOnAProcessInReadyToSellFunnelParams>} LogObject<errorOnAProcessInReadyToSellFunnelParams>
 */
export function errorOnAProcessInReadyToSellFunnel(params) {
    return {
        evid: 3902,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'successOnAProcessInReadyToSellFunnel' event (evid: 3903)
 *
 * Event description: Ready to sell funnel - Sent when a process was done successfully
 *
 * @param {successOnAProcessInReadyToSellFunnelParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} processName - process name that was ended
 * @property {string} details - more details
 * @property {GUID} msid - msid, can be null for processes that msid wasn't created yet
 * @return {LogObject<successOnAProcessInReadyToSellFunnelParams>} LogObject<successOnAProcessInReadyToSellFunnelParams>
 */
export function successOnAProcessInReadyToSellFunnel(params) {
    return {
        evid: 3903,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsWelcomCtaClickedSm' event (evid: 391)
 *
 * Event description: Import products first page welcome  - user clicked on 'skip' button. no longer exist on the new import product flow
 *
 * @param {importProductsWelcomCtaClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} button - x / skip
 * @property {string} choice - depracated
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsWelcomCtaClickedSmParams>} LogObject<importProductsWelcomCtaClickedSmParams>
 */
export function importProductsWelcomCtaClickedSm(params) {
    return {
        evid: 391,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsAnalyzeCsvClickedSm' event (evid: 392)
 *
 * Event description: Import products -> click next (analyze) after uploading a csv file
 *
 * @param {importProductsAnalyzeCsvClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsAnalyzeCsvClickedSmParams>} LogObject<importProductsAnalyzeCsvClickedSmParams>
 */
export function importProductsAnalyzeCsvClickedSm(params) {
    return {
        evid: 392,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsAddToCatalogClickedSm' event (evid: 393)
 *
 * Event description: Clicking on 'add to catalog' button in the import file analysis report. click on 'Import Product' at the end of the flow
 *
 * @param {importProductsAddToCatalogClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} items - Not in use
 * @property {number} total - total items to import
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} categories - categories
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsAddToCatalogClickedSmParams>} LogObject<importProductsAddToCatalogClickedSmParams>
 */
export function importProductsAddToCatalogClickedSm(params) {
    return {
        evid: 393,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsCompletedShowSm' event (evid: 394)
 *
 * Event description: Green line indicator/popup presented when importing is completed
 *
 * @param {importProductsCompletedShowSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} items - {item_status : item_count, ... }
 * @property {number} total - total items imported
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} categories - categories
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsCompletedShowSmParams>} LogObject<importProductsCompletedShowSmParams>
 */
export function importProductsCompletedShowSm(params) {
    return {
        evid: 394,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsItemStatusClickedSm' event (evid: 395)
 *
 * Event description: Clicking on Item status button in the import file analysis report. In the new import flow the user can click only on the 'products with errors' and not all of the rows. category = 'error'
 *
 * @param {importProductsItemStatusClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} count - count
 * @property {string} appName - app_name
 * @property {string} items - number of items
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} category - the name of the row
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsItemStatusClickedSmParams>} LogObject<importProductsItemStatusClickedSmParams>
 */
export function importProductsItemStatusClickedSm(params) {
    return {
        evid: 395,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exitImportProductsInProgressClickedSm' event (evid: 396)
 *
 * Event description: When user click 'review' on the upload image error banner
 *
 * @param {exitImportProductsInProgressClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {number} total - num products to import (no errors)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} time_spent - time in sec from screen loaded to click
 * @property {GUID} bi_token - msid
 * @return {LogObject<exitImportProductsInProgressClickedSmParams>} LogObject<exitImportProductsInProgressClickedSmParams>
 */
export function exitImportProductsInProgressClickedSm(params) {
    return {
        evid: 396,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cancelImportProductsScreenCtaClickedSm' event (evid: 397)
 *
 * Event description: When user clicked on one of the buttons in the 'Are you sure you want to cancel.." screen
 *
 * @param {cancelImportProductsScreenCtaClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} step - step name in the wizard
 * @property {string} appName - app_name
 * @property {number} total - num products to import (no errors)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} button - x/cancel_import/return
 * @property {number} time_spent - time(sec) from import in progress screen loaded to click
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelImportProductsScreenCtaClickedSmParams>} LogObject<cancelImportProductsScreenCtaClickedSmParams>
 */
export function cancelImportProductsScreenCtaClickedSm(params) {
    return {
        evid: 397,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'doneClickedLinkOptionToProductMediaSm' event (evid: 398)
 *
 * Event description: When clicking on done in the link option media popup
 *
 * @param {doneClickedLinkOptionToProductMediaSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<doneClickedLinkOptionToProductMediaSmParams>} LogObject<doneClickedLinkOptionToProductMediaSmParams>
 */
export function doneClickedLinkOptionToProductMediaSm(params) {
    return {
        evid: 398,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageAdditionalDetailsApplySaveClickedOa' event (evid: 399)
 *
 * Event description: When managing additional details (MAD) from product view in OA, user clicks save (apply).
 * To keep this change user needs to press Save in Product View Page (367), otherwise the change will be lost.
 * This event is sent in the moment of clicking apply/save in MAD window and does not tell anything about if the whole product was saved or not.
 *
 * @param {manageAdditionalDetailsApplySaveClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} product_id - product_id
 * @property {string} type - possible values, one of: description,discount,ribbon,collection,inventory,inventory_option
 * @property {string} value - e.g. productTaxGroupId for productTaxGroups
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageAdditionalDetailsApplySaveClickedOaParams>} LogObject<manageAdditionalDetailsApplySaveClickedOaParams>
 */
export function manageAdditionalDetailsApplySaveClickedOa(params) {
    return {
        evid: 399,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickedOnLinkOptionToProductMediaSm' event (evid: 40)
 *
 * Event description: When clicking on link option media to open the popup
 *
 * @param {clickedOnLinkOptionToProductMediaSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickedOnLinkOptionToProductMediaSmParams>} LogObject<clickedOnLinkOptionToProductMediaSmParams>
 */
export function clickedOnLinkOptionToProductMediaSm(params) {
    return {
        evid: 40,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCardInSmHome' event (evid: 400)
 *
 * Event description: when user click on card placed in the SM home
 *
 * @param {clickOnCardInSmHomeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} location - up/down
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - asset campaign id in case of a dealer pos/facebook/oneApp/add_filters...
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCardInSmHomeParams>} LogObject<clickOnCardInSmHomeParams>
 */
export function clickOnCardInSmHome(params) {
    return {
        evid: 400,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewCardInSmHome' event (evid: 401)
 *
 * Event description: when user view card placed in the SM home (the card is 100% shown)
 *
 * @param {viewCardInSmHomeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} location - up/down
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - asset campaign id in case of a dealer pos/facebook/oneApp/add_filters...
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewCardInSmHomeParams>} LogObject<viewCardInSmHomeParams>
 */
export function viewCardInSmHome(params) {
    return {
        evid: 401,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'readyForSmDealer' event (evid: 402)
 *
 * Event description: right before we are sending a request to the banner dealer
 *
 * @param {readyForSmDealerParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} location - up/down (up for active, down for not active)
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<readyForSmDealerParams>} LogObject<readyForSmDealerParams>
 */
export function readyForSmDealer(params) {
    return {
        evid: 402,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dealerSmComplete' event (evid: 403)
 *
 * Event description: when we are receiving a response from dealer
 *
 * @param {dealerSmCompleteParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} location - up/down (up for active, down for not active)
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<dealerSmCompleteParams>} LogObject<dealerSmCompleteParams>
 */
export function dealerSmComplete(params) {
    return {
        evid: 403,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsImageCouldnTBeUploadBannerClickReview' event (evid: 404)
 *
 * Event description: Import products -> after the products successfully imported but some of the images couldn't be upload -> a banner is shown on the top of the products list page -> user click review
 *
 * @param {importProductsImageCouldnTBeUploadBannerClickReviewParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsImageCouldnTBeUploadBannerClickReviewParams>} LogObject<importProductsImageCouldnTBeUploadBannerClickReviewParams>
 */
export function importProductsImageCouldnTBeUploadBannerClickReview(params) {
    return {
        evid: 404,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productShareOnSocialNetworkSm' event (evid: 405)
 *
 * Event description: when user clicks on cancel or share in social network window.
 * cancel or share is defined by field 'action'. relevant for iOS only
 *
 * @param {productShareOnSocialNetworkSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_guid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - StoresMobile
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - true/false
 * @property {string} origin - product page
 * @property {string} share_type - facebook,pinterest,twitter
 * @property {string} productId - product guid
 * @property {string} action - cancel,share
 * @property {GUID} bi_token - msid
 * @return {LogObject<productShareOnSocialNetworkSmParams>} LogObject<productShareOnSocialNetworkSmParams>
 */
export function productShareOnSocialNetworkSm(params) {
    return {
        evid: 405,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsCsvFileReportShownToUser' event (evid: 406)
 *
 * Event description: Import products -> when file report is shown to the user
 *
 * @param {importProductsCsvFileReportShownToUserParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} numEdited - the number of existing products edited
 * @property {string} appName - app
 * @property {number} errorCount - the number of "need attention" products
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numAdded - the number of new created products
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsCsvFileReportShownToUserParams>} LogObject<importProductsCsvFileReportShownToUserParams>
 */
export function importProductsCsvFileReportShownToUser(params) {
    return {
        evid: 406,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnLinkImagesInPopUpDisconnectImagesSm' event (evid: 41)
 *
 * Event description: click on 'Link Images' in pop up (disconnect images on current options)
 *
 * @param {clickOnLinkImagesInPopUpDisconnectImagesSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnLinkImagesInPopUpDisconnectImagesSmParams>} LogObject<clickOnLinkImagesInPopUpDisconnectImagesSmParams>
 */
export function clickOnLinkImagesInPopUpDisconnectImagesSm(params) {
    return {
        evid: 41,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addTrackingNumberSm' event (evid: 410)
 *
 * Event description: User add tracking number of carrier to the order info
 *
 * @param {addTrackingNumberSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} method - manually / scan (for OA)
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill  )
 * @property {boolean} emailDefined - true if tracking number was added with "send email" checked
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} trackingInfo - what is sent to server with request (relevant for OA)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (not sent from OneApp)
 * @property {string} carrierName - carrier name..
 * @property {string} origin - add_tracking / fulfill / manage order / manage tracking number
 * @property {GUID} userId - userid
 * @property {string} type - code/link (for OA)
 * @property {GUID} bi_token - msid
 * @return {LogObject<addTrackingNumberSmParams>} LogObject<addTrackingNumberSmParams>
 */
export function addTrackingNumberSm(params) {
    return {
        evid: 410,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportCsvApprovedSm' event (evid: 4100)
 *
 * Event description: When the user approve the export in the modal and the modal is being downloaded.
 *
 * @param {exportCsvApprovedSmParams} params - The parameters for this event
 * @property {number} numberOfOrders - Number of orders the user exported
 * @property {number} numberOfLineItems - Number of line items the user exported
 * @property {string} storeId - store_id
 * @property {string} columns - A list with the columns the user selected to download
 * @property {string} type - Exporting by orders or by line item
 * @return {LogObject<exportCsvApprovedSmParams>} LogObject<exportCsvApprovedSmParams>
 */
export function exportCsvApprovedSm(params) {
    return {
        evid: 4100,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateTrackingSm' event (evid: 411)
 *
 * Event description: User change/update tracking number of an order
 *
 * @param {updateTrackingSmParams} params - The parameters for this event
 * @property {GUID} userId - userid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} method - manual / scan (for OA)
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill )
 * @property {boolean} emailDefined - true if tracking number was edited with "send email" checked
 * @property {string} appName - app_name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} trackingInfo - what is sent to server with request (relevant for OA
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (not sent from OneApp)
 * @property {string} carrierName - carrier name..
 * @property {string} origin - add_tracking, fulfill_order...
 * @property {string} type - code/link (for OA)
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateTrackingSmParams>} LogObject<updateTrackingSmParams>
 */
export function updateTrackingSm(params) {
    return {
        evid: 411,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'trackingNumberLinkClickedSm' event (evid: 412)
 *
 * Event description: User clicked on tracking number link (on the sidebar) that leads to carrier website (or clicked on "Track package" in Manage tracking number popup in OneApp that leads to carrier website )
 *
 * @param {trackingNumberLinkClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill / notApplicable )
 * @property {string} appName - app_name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} applyToPartItems - true when tracking number is applied not to all items (not sent from OneApp)
 * @property {string} origin - manage order / manage tracking number
 * @property {GUID} bi_token - msid
 * @return {LogObject<trackingNumberLinkClickedSmParams>} LogObject<trackingNumberLinkClickedSmParams>
 */
export function trackingNumberLinkClickedSm(params) {
    return {
        evid: 412,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'printOrderSm' event (evid: 413)
 *
 * Event description: when a user clicks on print order in SM. In new Order page also sent from orders list (bulk action). since 03.2020 also sent from OneApp for click on "export" in 3dots menu of order
 *
 * @param {printOrderSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page, orders tab, order OneApp
 * @property {GUID} bi_token - msid
 * @return {LogObject<printOrderSmParams>} LogObject<printOrderSmParams>
 */
export function printOrderSm(params) {
    return {
        evid: 413,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderStatusChangedSm' event (evid: 414)
 *
 * Event description: Order status changed SM.
 *
 * @param {orderStatusChangedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} newStatus - new_status
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} statustype - payment / shipping
 * @property {string} origin - order page / order page manage / order page bottom panel / orders list
 * @property {string} oldStatus - old_status
 * @property {GUID} bi_token - msid
 * @return {LogObject<orderStatusChangedSmParams>} LogObject<orderStatusChangedSmParams>
 */
export function orderStatusChangedSm(params) {
    return {
        evid: 414,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderContactBuyerOa' event (evid: 415)
 *
 * Event description: when a users click on email/call from order view (right now only available in mobile)
 *
 * @param {orderContactBuyerOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} flowType - ‘Migration’
 * @property {string} appName - wixstore
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page/engage
 * @property {GUID} userId - userId
 * @property {string} action - email/call
 * @property {GUID} bi_token - msid
 * @return {LogObject<orderContactBuyerOaParams>} LogObject<orderContactBuyerOaParams>
 */
export function orderContactBuyerOa(params) {
    return {
        evid: 415,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageActivitySm' event (evid: 416)
 *
 * Event description: when a user adds/edits/deletes   a comment in activity & comments section of the order
 *
 * @param {orderPageActivitySmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} productType - not in use
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} orderType - not in use
 * @property {GUID} userId - userId
 * @property {string} action - delete/edit/create
 * @property {GUID} bi_token - msid
 * @return {LogObject<orderPageActivitySmParams>} LogObject<orderPageActivitySmParams>
 */
export function orderPageActivitySm(params) {
    return {
        evid: 416,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnViewMapOrderPageSm' event (evid: 417)
 *
 * Event description: Click on view map from order page. since december 2020 also sent from WixApp
 *
 * @param {clickOnViewMapOrderPageSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnViewMapOrderPageSmParams>} LogObject<clickOnViewMapOrderPageSmParams>
 */
export function clickOnViewMapOrderPageSm(params) {
    return {
        evid: 417,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewOrderClickedSm' event (evid: 418)
 *
 * Event description: View order clicked SM
 *
 * @param {viewOrderClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstore (for oneApp); storeManagerApp / businessManagerStores for web
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - 'orders prev/next', 'orders_list','card_feed' (for oneApp).
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewOrderClickedSmParams>} LogObject<viewOrderClickedSmParams>
 */
export function viewOrderClickedSm(params) {
    return {
        evid: 418,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCardClickOnOrderHistoryOa' event (evid: 419)
 *
 * Event description: Clicking on view history at the buttom of the order screen.
 *
 * @param {ordersCardClickOnOrderHistoryOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - the order's id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersCardClickOnOrderHistoryOaParams>} LogObject<ordersCardClickOnOrderHistoryOaParams>
 */
export function ordersCardClickOnOrderHistoryOa(params) {
    return {
        evid: 419,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsManagePricingAndInventoryForVariantsSm' event (evid: 42)
 *
 * Event description: This event in the new catalog will indicate that user clicked to open variant list
 * toggle manage pricing and inventory for variants.
 *
 *
 * @param {productOptionsManagePricingAndInventoryForVariantsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - toggle on / toggle off / variants list
 * @property {GUID} bi_token - msid
 * @property {string} origin - from where the user clicked to open variants list
 * editVariants / inventoryCard / shippingCard
 *
 * @return {LogObject<productOptionsManagePricingAndInventoryForVariantsSmParams>} LogObject<productOptionsManagePricingAndInventoryForVariantsSmParams>
 */
export function productOptionsManagePricingAndInventoryForVariantsSm(params) {
    return {
        evid: 42,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyName' event (evid: 4200)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameParams} params - The parameters for this event
 * @return {LogObject<dummyNameParams>} LogObject<dummyNameParams>
 */
export function dummyName(params) {
    return {
        evid: 4200,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sendPickupReadyEmailClickedSm' event (evid: 421)
 *
 * Event description: event happens when the merchant sends pickup ready email to the buyer
 *
 * @param {sendPickupReadyEmailClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - Order page/ fulfill modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<sendPickupReadyEmailClickedSmParams>} LogObject<sendPickupReadyEmailClickedSmParams>
 */
export function sendPickupReadyEmailClickedSm(params) {
    return {
        evid: 421,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageSendDownloadLinkSm' event (evid: 422)
 *
 * Event description: merchant sends download link to buyer, from order page
 *
 * @param {orderPageSendDownloadLinkSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - not in use
 * @property {GUID} cartId - not in use
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - marked_as_paid/action_button
 * @property {GUID} bi_token - msid
 * @return {LogObject<orderPageSendDownloadLinkSmParams>} LogObject<orderPageSendDownloadLinkSmParams>
 */
export function orderPageSendDownloadLinkSm(params) {
    return {
        evid: 422,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sendEmailShippingConfirmationToBuyerSm' event (evid: 423)
 *
 * Event description: User send email shipping confirmation to buyer (can holds the tracking information if has one)
 *
 * @param {sendEmailShippingConfirmationToBuyerSmParams} params - The parameters for this event
 * @property {GUID} userId - userid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - app_name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - fulfill,bulk_fulfill,add_tracking (also for edit tracking) ,side_bar (in oneApp action_button)
 * @property {boolean} isTruckingNumber - if the email holds the tracking number
 * @property {GUID} bi_token - msid
 * @return {LogObject<sendEmailShippingConfirmationToBuyerSmParams>} LogObject<sendEmailShippingConfirmationToBuyerSmParams>
 */
export function sendEmailShippingConfirmationToBuyerSm(params) {
    return {
        evid: 423,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickManageInProductScreenOa' event (evid: 424)
 *
 * Event description: Clicking on manage next to "no in stock" in the edit product screen
 *
 * @param {clickManageInProductScreenOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} id - product id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product screen / additional details menu
 * @property {GUID} productId - product id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickManageInProductScreenOaParams>} LogObject<clickManageInProductScreenOaParams>
 */
export function clickManageInProductScreenOa(params) {
    return {
        evid: 424,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageOaClickAddModifiersOptionToProductSrc10Evid425' event (evid: 425)
 *
 * Event description: Fired when the user clicks to add modifiers/options to the product. It can be a new modifier/option or assign an existing one
 *
 *
 * @param {productPageOaClickAddModifiersOptionToProductSrc10Evid425Params} params - The parameters for this event
 * @property {string} productName - Name of the product .  If new product send null
 * @property {GUID} productGuid - The id of the relevant product.  If new product send null
 * @property {string} entity - modifier / option
 * @property {GUID} id - modifier/option id. If creating new then null
 * @property {string} name - modifier / option  name
 * @property {string} fieldType - Type of the modifier/option
 * @property {string} choices - List of all choices
 * @property {string} text_box_title - Not null  when  field type = text box
 * @property {number} chracterLimit - Not null  when  field type = text box
 * @property {boolean} isRequiredField - For options send false
 * @property {boolean} isNew - True if it is creating a new entity. false for assigning existing one
 * @return {LogObject<productPageOaClickAddModifiersOptionToProductSrc10Evid425Params>} LogObject<productPageOaClickAddModifiersOptionToProductSrc10Evid425Params>
 */
export function productPageOaClickAddModifiersOptionToProductSrc10Evid425(params) {
    return {
        evid: 425,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonsSetActionForNewRibbon' event (evid: 426)
 *
 * Event description: when user click on X or V button in create new ribbon section
 *
 * @param {bulkActionRibbonsSetActionForNewRibbonParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name of the new ribbon. Null if user clicked X
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isCreated - TRUE if user clicked V, False if user clicked X
 * @property {number} numProducts - number of product shown in the modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionRibbonsSetActionForNewRibbonParams>} LogObject<bulkActionRibbonsSetActionForNewRibbonParams>
 */
export function bulkActionRibbonsSetActionForNewRibbon(params) {
    return {
        evid: 426,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCreateInvoiceSm' event (evid: 427)
 *
 * Event description: Click on create store invoice
 *
 * @param {clickOnCreateInvoiceSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} paymentStatus - paid/unpaid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page / order list page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCreateInvoiceSmParams>} LogObject<clickOnCreateInvoiceSmParams>
 */
export function clickOnCreateInvoiceSm(params) {
    return {
        evid: 427,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnViewInvoiceSm' event (evid: 428)
 *
 * Event description: Click on view store invoice
 *
 * @param {clickOnViewInvoiceSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} paymentStatus - paid/unpaid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page / order list page
 * @property {GUID} invoice_id - invoice id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnViewInvoiceSmParams>} LogObject<clickOnViewInvoiceSmParams>
 */
export function clickOnViewInvoiceSm(params) {
    return {
        evid: 428,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnInvoiceConfirmationPopupSm' event (evid: 429)
 *
 * Event description: Click on confirmation popup (after clicking on 'create invoice' , there is a pop up shown
 *
 * @param {clickOnInvoiceConfirmationPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} paymentStatus - paid/unpaid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId in case it is one order
 * @property {string} clickType - cancel / send_invoice..
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order page / order list page
 * @property {GUID} userId - uuid
 * @property {string} orderIds - array of order guids in case of more than one order
 * @property {string} type - popup type
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnInvoiceConfirmationPopupSmParams>} LogObject<clickOnInvoiceConfirmationPopupSmParams>
 */
export function clickOnInvoiceConfirmationPopupSm(params) {
    return {
        evid: 429,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsBulkActionsForVariantsSm' event (evid: 43)
 *
 * Event description: click 'V' on variants bulk actions
 *
 * @param {productOptionsBulkActionsForVariantsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} selection - all / option
 * @property {string} productId - product_guid
 * @property {string} type - charge / inventory / weight
 * @property {number} number_of_items - number of variants in the bulk
 * @property {GUID} bi_token - msid
 * @property {string} value - The value set for the bulk action (in visibility = null) if user set is_track_quantity = true, the quantity value will be sent here
 * @property {boolean} isVisible - Is the variant visibile
 *
 *
 * @property {boolean} isTrackQuantity - Is the user track inventory by quantity or by status (in/out of stock)
 *
 *
 * @return {LogObject<productOptionsBulkActionsForVariantsSmParams>} LogObject<productOptionsBulkActionsForVariantsSmParams>
 */
export function productOptionsBulkActionsForVariantsSm(params) {
    return {
        evid: 43,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyNameSrc10Evid4300' event (evid: 4300)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc10Evid4300Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc10Evid4300Params>} LogObject<dummyNameSrc10Evid4300Params>
 */
export function dummyNameSrc10Evid4300(params) {
    return {
        evid: 4300,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productRecommendationRecommendationSaved' event (evid: 4301)
 *
 * Event description: When the recommendation was saved successfully. server received Kafka event  with the recommendations and save it to the database
 *
 * @param {productRecommendationRecommendationSavedParams} params - The parameters for this event
 * @property {string} algorithmName - the name of the algorithm in the kafka event
 * @property {GUID} algorithmId - The ID of the Algorithm (Given in server side)
 * @property {string} productId - product guid
 * @return {LogObject<productRecommendationRecommendationSavedParams>} LogObject<productRecommendationRecommendationSavedParams>
 */
export function productRecommendationRecommendationSaved(params) {
    return {
        evid: 4301,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productRecommendationsAlgorithmSelected' event (evid: 4302)
 *
 * Event description: When algorithm was selected in slider gallery
 *
 * @param {productRecommendationsAlgorithmSelectedParams} params - The parameters for this event
 * @property {string} algorithmName - the key name of the algorithm
 * @property {string} algorithmId - the ID of the algorithm
 * @property {string} algorithmProviderId - the providerId of the algorithm
 * @property {GUID} storeId - .
 * @return {LogObject<productRecommendationsAlgorithmSelectedParams>} LogObject<productRecommendationsAlgorithmSelectedParams>
 */
export function productRecommendationsAlgorithmSelected(params) {
    return {
        evid: 4302,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickApplyManageVariants' event (evid: 44)
 *
 * Event description: When user click apply in manage variants
 *
 * @param {clickApplyManageVariantsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} is_edited - if the user edited at least one variant
 * @property {string} appName - storeManagerApp
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {number} number_of_items - number of variants that were edited
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickApplyManageVariantsParams>} LogObject<clickApplyManageVariantsParams>
 */
export function clickApplyManageVariants(params) {
    return {
        evid: 44,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'setCatalogVersionSrc10Evid4401' event (evid: 4401)
 *
 * Event description: Due to the rollout of Catalog V3, we want to track catalog versions and the reasons for changes.
 * Whenever the catalog is updated - whether through installation or active migration - an event will be triggered with the relevant fields
 *
 * @param {setCatalogVersionSrc10Evid4401Params} params - The parameters for this event
 * @property {string} Catalog_Version - The new version of the catalog (v1/v3)
 * @property {string} Reason - the reason for the catalog change (installation/migration)
 * @return {LogObject<setCatalogVersionSrc10Evid4401Params>} LogObject<setCatalogVersionSrc10Evid4401Params>
 */
export function setCatalogVersionSrc10Evid4401(params) {
    return {
        evid: 4401,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exposureEventForTests' event (evid: 45)
 *
 * Event description: generic event fired on an exposure moment for tests. is_eligible data is: gallery -> true if filters enable in gallery;  ExpressCheckout - true if checkout is in viewer
 *
 * @param {exposureEventForTestsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} testName - test name
 * @property {GUID} visitorId - visitor_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} appState - what are the apps that currently on state
 * @property {boolean} isMobileFriendly - is_mobile_friendly
 * @property {string} type - type of exposure point
 * @property {boolean} is_eligible - true if the feature eligible, false otherwise
 * @property {GUID} bi_token - msid
 * @return {LogObject<exposureEventForTestsParams>} LogObject<exposureEventForTestsParams>
 */
export function exposureEventForTests(params) {
    return {
        evid: 45,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'seeAllProductsKeyboardClicked' event (evid: 450)
 *
 * Event description: when clicking all 'see all' in products keyboard crazy chat (OA) or from chat in web
 *
 * @param {seeAllProductsKeyboardClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<seeAllProductsKeyboardClickedParams>} LogObject<seeAllProductsKeyboardClickedParams>
 */
export function seeAllProductsKeyboardClicked(params) {
    return {
        evid: 450,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductInKeyboard' event (evid: 451)
 *
 * Event description: when clicking on one of the products in crazy chat keyboard (OA) or in chat in web
 *
 * @param {clickOnProductInKeyboardParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} view - all_products/keyboard
 * @return {LogObject<clickOnProductInKeyboardParams>} LogObject<clickOnProductInKeyboardParams>
 */
export function clickOnProductInKeyboard(params) {
    return {
        evid: 451,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sendProductToBuyerInChatClicked' event (evid: 452)
 *
 * Event description: when clicking on 'send'  from product view after choosing a product to send to a buyer via chat in OA or web
 *
 * @param {sendProductToBuyerInChatClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<sendProductToBuyerInChatClickedParams>} LogObject<sendProductToBuyerInChatClickedParams>
 */
export function sendProductToBuyerInChatClicked(params) {
    return {
        evid: 452,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageOaModifiersOptionUpdatedSrc10Evid455' event (evid: 455)
 *
 * Event description: Fired when the user clicks to save/apply in order to edit  modifiers/options.
 *
 *
 * @param {productPageOaModifiersOptionUpdatedSrc10Evid455Params} params - The parameters for this event
 * @property {string} entity - modifier / option
 * @property {GUID} id - modifier/option id. If creating new then null
 * @property {string} name - modifier / option  name
 * @property {string} fieldType - Type of the modifier/option
 * @property {string} choices - List of all choices
 * @property {string} text_box_title - Not null  when  field type = text box
 * @property {number} chracterLimit - Not null  when  field type = text box
 * @property {boolean} isRequiredField - For options send false
 * @property {string} updatedFields - List of all the fields that were changed
 * @property {string} productName - Name of the product .  If new product send null
 * @property {string} productGuid - The id of the relevant product.  If new product send null
 * @return {LogObject<productPageOaModifiersOptionUpdatedSrc10Evid455Params>} LogObject<productPageOaModifiersOptionUpdatedSrc10Evid455Params>
 */
export function productPageOaModifiersOptionUpdatedSrc10Evid455(params) {
    return {
        evid: 455,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'subscriptionsAreComingSoonVisitorPopupSf' event (evid: 457)
 *
 * Event description: When a "subscriptions are coming soon" pop-up opens to the buyer. It happens when the user put on his store a subscription product, but doesn't have a premium.
 *
 * @param {subscriptionsAreComingSoonVisitorPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / live / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - where the modal pops up (product page, product widget, gallery...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<subscriptionsAreComingSoonVisitorPopupSfParams>} LogObject<subscriptionsAreComingSoonVisitorPopupSfParams>
 */
export function subscriptionsAreComingSoonVisitorPopupSf(params) {
    return {
        evid: 457,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oaDebugCorruptedOrderFetched' event (evid: 458)
 *
 * Event description: event for debuging
 *
 * @param {oaDebugCorruptedOrderFetchedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - what for event is sent
 * @property {string} appName - app_name
 * @property {string} info - debug info
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - optional (orderId, productId,...)
 * @property {string} orderInfo - what did we get from server
 * @property {GUID} bi_token - msid
 * @return {LogObject<oaDebugCorruptedOrderFetchedParams>} LogObject<oaDebugCorruptedOrderFetchedParams>
 */
export function oaDebugCorruptedOrderFetched(params) {
    return {
        evid: 458,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonsClickSetRibbon' event (evid: 459)
 *
 * Event description: when user click Set Ribbon  in the bulk action ribbon nodal
 *
 * @param {bulkActionRibbonsClickSetRibbonParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name of the new ribbon. Null if user clicked X
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isCreated - TRUE if user clicked V, False if user clicked X
 * @property {number} numProducts - number of product shown in the modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionRibbonsClickSetRibbonParams>} LogObject<bulkActionRibbonsClickSetRibbonParams>
 */
export function bulkActionRibbonsClickSetRibbon(params) {
    return {
        evid: 459,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAiTextCreatorInProductPage' event (evid: 46)
 *
 * Event description: When user click to open  'AI text' generator in product page settings.
 *
 * @param {clickOnAiTextCreatorInProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - true/false
 * @property {string} origin - currently- only product description
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAiTextCreatorInProductPageParams>} LogObject<clickOnAiTextCreatorInProductPageParams>
 */
export function clickOnAiTextCreatorInProductPage(params) {
    return {
        evid: 46,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reorderProductsInCollectionSm' event (evid: 461)
 *
 * Event description: Reorder products in collection SM.
 *
 * @param {reorderProductsInCollectionSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} categoryId - category_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<reorderProductsInCollectionSmParams>} LogObject<reorderProductsInCollectionSmParams>
 */
export function reorderProductsInCollectionSm(params) {
    return {
        evid: 461,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddProductsToCollectionInCollectionTabSm' event (evid: 462)
 *
 * Event description: Click on add 'products to collection' in collection tab SM.
 *
 * @param {clickOnAddProductsToCollectionInCollectionTabSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category_id
 * @property {string} state - empty / with_products
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - ignore
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that come from the script and not from the context/aspects/cookies
 * @return {LogObject<clickOnAddProductsToCollectionInCollectionTabSmParams>} LogObject<clickOnAddProductsToCollectionInCollectionTabSmParams>
 */
export function clickOnAddProductsToCollectionInCollectionTabSm(params) {
    return {
        evid: 462,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createNewCollectionSm' event (evid: 463)
 *
 * Event description: Create new collection SM.
 *
 * @param {createNewCollectionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {number} number_of_products - # of assigned products
 * @property {string} appName - app_name
 * @property {string} categoryName - category name (collection by legacy)
 * @property {string} category_name - category name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {number} number_of_images - # of added images
 * @property {GUID} userId - uuid
 * @property {boolean} headerDescriptionEdited - has header description edited
 * @property {GUID} bi_token - msid
 * @return {LogObject<createNewCollectionSmParams>} LogObject<createNewCollectionSmParams>
 */
export function createNewCollectionSm(params) {
    return {
        evid: 463,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editCollectionClickedSm' event (evid: 464)
 *
 * Event description: Edit collection in SM
 *
 * @param {editCollectionClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - prevnext/collection
 * @property {boolean} categoryNameEdited - category_name_edited
 * @property {boolean} headerDescriptionEdited - header_description_edited
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that come from the script and not from the context/aspects/cookies
 * @return {LogObject<editCollectionClickedSmParams>} LogObject<editCollectionClickedSmParams>
 */
export function editCollectionClickedSm(params) {
    return {
        evid: 464,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inlineEditCollectionNameSm' event (evid: 465)
 *
 * Event description: Edit collection name inline in SM in collection tab
 *
 * @param {inlineEditCollectionNameSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} categoryId - Collection id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<inlineEditCollectionNameSmParams>} LogObject<inlineEditCollectionNameSmParams>
 */
export function inlineEditCollectionNameSm(params) {
    return {
        evid: 465,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addReplaceImageCollectionSm' event (evid: 466)
 *
 * Event description: Change collection image (from collection tab)
 *
 * @param {addReplaceImageCollectionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - Collection id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - userId
 * @property {GUID} bi_token - msid
 * @return {LogObject<addReplaceImageCollectionSmParams>} LogObject<addReplaceImageCollectionSmParams>
 */
export function addReplaceImageCollectionSm(params) {
    return {
        evid: 466,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateCollectionClickedSm' event (evid: 467)
 *
 * Event description: update collection
 *
 * @param {updateCollectionClickedSmParams} params - The parameters for this event
 * @property {string} name - category name (collection by legacy)
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {number} number_of_products - number_of_products
 * @property {string} appName - app_name
 * @property {string} categoryName - category name (collection by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {boolean} categoryNameEdited - category_name_edited
 * @property {number} number_of_images - number_of_images
 * @property {boolean} headerDescriptionEdited - has header description edited
 * @property {GUID} bi_token - msid
 * @property {GUID} userId - UUID that come from the script and not from the context/aspects/cookies
 * @return {LogObject<updateCollectionClickedSmParams>} LogObject<updateCollectionClickedSmParams>
 */
export function updateCollectionClickedSm(params) {
    return {
        evid: 467,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'trackingNumberCopiedOaSrc10Evid468' event (evid: 468)
 *
 * Event description: When to tracing number is copied from OneApp
 *
 * @param {trackingNumberCopiedOaSrc10Evid468Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - orderId
 * @property {string} fulfillerType - fulfiller_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - order/action_button
 * @property {GUID} bi_token - msid
 * @return {LogObject<trackingNumberCopiedOaSrc10Evid468Params>} LogObject<trackingNumberCopiedOaSrc10Evid468Params>
 */
export function trackingNumberCopiedOaSrc10Evid468(params) {
    return {
        evid: 468,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCollectionToSiteClikedSm' event (evid: 469)
 *
 * Event description: in the SM, clicking on CTA - add collection to page.
 *
 * @param {addCollectionToSiteClikedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - yellow strip/ Add Collection To Site link
 * @property {GUID} bi_token - msid
 * @return {LogObject<addCollectionToSiteClikedSmParams>} LogObject<addCollectionToSiteClikedSmParams>
 */
export function addCollectionToSiteClikedSm(params) {
    return {
        evid: 469,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'relatedProductsTestExposureProductPageLoad' event (evid: 47)
 *
 * Event description: BI sent from Velo for related products test - is sent when product page is loaded and we call to petri to know which gallery to show
 *
 * @param {relatedProductsTestExposureProductPageLoadParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} label - The test label from petri - true is with the new logic and false is original component
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<relatedProductsTestExposureProductPageLoadParams>} LogObject<relatedProductsTestExposureProductPageLoadParams>
 */
export function relatedProductsTestExposureProductPageLoad(params) {
    return {
        evid: 47,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCollectionToSitePopupCliked' event (evid: 470)
 *
 * Event description: in the SM, clicking on the pop up after clicking on the CTA  add collection to page.
 *
 * @param {addCollectionToSitePopupClikedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app_name
 * @property {string} button_name - cancel/save and go to editor/ go to editor
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - yellow strip/ Add Collection To Site link
 * @property {GUID} bi_token - msid
 * @return {LogObject<addCollectionToSitePopupClikedParams>} LogObject<addCollectionToSitePopupClikedParams>
 */
export function addCollectionToSitePopupCliked(params) {
    return {
        evid: 470,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'chooseAPageToDisplayThisCollectionOnClicked' event (evid: 471)
 *
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page.
 *
 * @param {chooseAPageToDisplayThisCollectionOnClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app_name
 * @property {string} button_name - Add collection/ cancel
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageType - new/existing
 * @property {string} pageName - page_name if available
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseAPageToDisplayThisCollectionOnClickedParams>} LogObject<chooseAPageToDisplayThisCollectionOnClickedParams>
 */
export function chooseAPageToDisplayThisCollectionOnClicked(params) {
    return {
        evid: 471,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsClickToDownloadCsvTemplateSm' event (evid: 472)
 *
 * Event description: click to download csv template
 *
 * @param {importProductsClickToDownloadCsvTemplateSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - oops screen /import welcome screen
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsClickToDownloadCsvTemplateSmParams>} LogObject<importProductsClickToDownloadCsvTemplateSmParams>
 */
export function importProductsClickToDownloadCsvTemplateSm(params) {
    return {
        evid: 472,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsChooseFileClickedSm' event (evid: 473)
 *
 * Event description: Choose file clicked in the import products flow
 *
 * @param {importProductsChooseFileClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Screen name in the flow (in the new version it can be done only from the main upload your file screen)
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsChooseFileClickedSmParams>} LogObject<importProductsChooseFileClickedSmParams>
 */
export function importProductsChooseFileClickedSm(params) {
    return {
        evid: 473,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsNeedMoreHelpClickedSm' event (evid: 474)
 *
 * Event description: 'Need more help' clicked in the import products flow
 *
 * @param {importProductsNeedMoreHelpClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Choose file popup / import review modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsNeedMoreHelpClickedSmParams>} LogObject<importProductsNeedMoreHelpClickedSmParams>
 */
export function importProductsNeedMoreHelpClickedSm(params) {
    return {
        evid: 474,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsImportAgainClickedSm' event (evid: 475)
 *
 * Event description: Import products -> when the initial file has global error
 *
 * @param {importProductsImportAgainClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - unsupported format / something went wrong / too many collections / too many lines
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsImportAgainClickedSmParams>} LogObject<importProductsImportAgainClickedSmParams>
 */
export function importProductsImportAgainClickedSm(params) {
    return {
        evid: 475,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsOopsScreenIsShownSm' event (evid: 476)
 *
 * Event description: Import products -> after the products successfully imported but some of the images couldn't be upload -> a banner is shown on the top of the products list page
 *
 * @param {importProductsOopsScreenIsShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsOopsScreenIsShownSmParams>} LogObject<importProductsOopsScreenIsShownSmParams>
 */
export function importProductsOopsScreenIsShownSm(params) {
    return {
        evid: 476,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsItemStatusHoverSm' event (evid: 477)
 *
 * Event description: Hover on Item status tool tip in the import file analysis report. in the old import flow there were 3 different tool tips for each row in the report, but In the new import flow there is a tool tip only on the existing products row ( category = 'edited_products')
 *
 * @param {importProductsItemStatusHoverSmParams} params - The parameters for this event
 * @property {GUID} storeId - store
 * @property {number} count - number of items
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} category - 'new products' / 'edited products' / .....
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsItemStatusHoverSmParams>} LogObject<importProductsItemStatusHoverSmParams>
 */
export function importProductsItemStatusHoverSm(params) {
    return {
        evid: 477,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsBackToUploadFileClickedSm' event (evid: 478)
 *
 * Event description: Import products -> click 'back to upload file' after the analyzing
 *
 * @param {importProductsBackToUploadFileClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - file report / general error screen - lines / general error screen - wrong delimiter/ general error screen - general / errors report
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsBackToUploadFileClickedSmParams>} LogObject<importProductsBackToUploadFileClickedSmParams>
 */
export function importProductsBackToUploadFileClickedSm(params) {
    return {
        evid: 478,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsClickOnErrorToSeeMoreDetailsSm' event (evid: 479)
 *
 * Event description: Import products -> click on error to see more details. not exist in the new import flow
 *
 * @param {importProductsClickOnErrorToSeeMoreDetailsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} status - true = expand / false = collapse
 * @property {string} fields - fields with error
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsClickOnErrorToSeeMoreDetailsSmParams>} LogObject<importProductsClickOnErrorToSeeMoreDetailsSmParams>
 */
export function importProductsClickOnErrorToSeeMoreDetailsSm(params) {
    return {
        evid: 479,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'membersAddressInCheckoutWasChanged' event (evid: 48)
 *
 * Event description: when address was changed in the checkout
 *
 * @param {membersAddressInCheckoutWasChangedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - page in checkout (delivery, payment...)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - addresses list / add address / edit address
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<membersAddressInCheckoutWasChangedParams>} LogObject<membersAddressInCheckoutWasChangedParams>
 */
export function membersAddressInCheckoutWasChanged(params) {
    return {
        evid: 48,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportProductsNeedMoreHelpClickedSm' event (evid: 480)
 *
 * Event description: 'Need more help' clicked in the export products flow
 *
 * @param {exportProductsNeedMoreHelpClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportProductsNeedMoreHelpClickedSmParams>} LogObject<exportProductsNeedMoreHelpClickedSmParams>
 */
export function exportProductsNeedMoreHelpClickedSm(params) {
    return {
        evid: 480,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageBuyerProfileClickedOaSrc10Evid481' event (evid: 481)
 *
 * Event description: when a users click on buyer profile from order view in OA
 *
 * @param {orderPageBuyerProfileClickedOaSrc10Evid481Params} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstore
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} contactId - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<orderPageBuyerProfileClickedOaSrc10Evid481Params>} LogObject<orderPageBuyerProfileClickedOaSrc10Evid481Params>
 */
export function orderPageBuyerProfileClickedOaSrc10Evid481(params) {
    return {
        evid: 481,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addTrackingNumberClickedOa' event (evid: 482)
 *
 * Event description: User clicks on add tracking number in OA. old event, is not sent since 2.22373 version
 *
 * @param {addTrackingNumberClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - wixstore
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - fulfill / manage tracking number / manage order
 * @property {GUID} bi_token - msid
 * @return {LogObject<addTrackingNumberClickedOaParams>} LogObject<addTrackingNumberClickedOaParams>
 */
export function addTrackingNumberClickedOa(params) {
    return {
        evid: 482,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'applyTrackingNumberOa' event (evid: 483)
 *
 * Event description: User clicks Add after inputting tracking number manually or by scanning (old) . Since June 2020 sent when user scans tracking number (not sent for manual adding tracking number)
 *
 * @param {applyTrackingNumberOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} method - manually / scan
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - wixstore
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - fulfill / manage tracking number / manage order
 * @property {string} type - code / link
 * @property {GUID} bi_token - msid
 * @return {LogObject<applyTrackingNumberOaParams>} LogObject<applyTrackingNumberOaParams>
 */
export function applyTrackingNumberOa(params) {
    return {
        evid: 483,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectCarrierClickedOa' event (evid: 484)
 *
 * Event description: User clicks Save after selecting Carrier
 *
 * @param {selectCarrierClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - wixstore
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} carrierName - carrier name / ‘custom’
 * @property {string} origin - fulfill / manage tracking number / manage order
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectCarrierClickedOaParams>} LogObject<selectCarrierClickedOaParams>
 */
export function selectCarrierClickedOa(params) {
    return {
        evid: 484,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addTrackingLinkClickedOa' event (evid: 485)
 *
 * Event description: User saves tracking link
 *
 * @param {addTrackingLinkClickedOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} appName - wixstore
 * @property {string} fulfillerId - fulfillerId
 * @property {string} orderId - order_id
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - fulfill / manage tracking number / manage order
 * @property {GUID} bi_token - msid
 * @return {LogObject<addTrackingLinkClickedOaParams>} LogObject<addTrackingLinkClickedOaParams>
 */
export function addTrackingLinkClickedOa(params) {
    return {
        evid: 485,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductOptionSf' event (evid: 486)
 *
 * Event description: buyer clicks to choose a product option (color / list) on product page, gallery or quickView
 *
 * @param {clickOnProductOptionSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} inStock - is the product option in/ out of stock
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product-page / gallery-page / slider-gallery / quick-view
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {string} optiontype - list / color
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductOptionSfParams>} LogObject<clickOnProductOptionSfParams>
 */
export function clickOnProductOptionSf(params) {
    return {
        evid: 486,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerClickScanIconOa' event (evid: 487)
 *
 * Event description: when user clicks on scan icon in products list / prodcut screen / product option in OneApp
 *
 * @param {barCodeScannerClickScanIconOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productsList / productScreen / productOptions
 * @property {GUID} productId - for origin productScreen / productOptions
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerClickScanIconOaParams>} LogObject<barCodeScannerClickScanIconOaParams>
 */
export function barCodeScannerClickScanIconOa(params) {
    return {
        evid: 487,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerOpenScanScreenOa' event (evid: 488)
 *
 * Event description: after user clicks on scan icon scan screen opened in OneApp
 *
 * @param {barCodeScannerOpenScanScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productsList / productScreen / productOptions /pos
 * @property {GUID} productId - for origin productScreen / productOptions
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerOpenScanScreenOaParams>} LogObject<barCodeScannerOpenScanScreenOaParams>
 */
export function barCodeScannerOpenScanScreenOa(params) {
    return {
        evid: 488,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerBarcodeScannedOa' event (evid: 489)
 *
 * Event description: when the sku was scanned with barcode scanner in OneApp
 *
 * @param {barCodeScannerBarcodeScannedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} sku - the sku
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productsList / productScreen / productOptions / pos
 * @property {GUID} productId - if we have it
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerBarcodeScannedOaParams>} LogObject<barCodeScannerBarcodeScannedOaParams>
 */
export function barCodeScannerBarcodeScannedOa(params) {
    return {
        evid: 489,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCartIconToOpenMiniCartSf' event (evid: 49)
 *
 * Event description: click on cart icon to open the mini cart
 *
 * @param {clickOnCartIconToOpenMiniCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app
 * @property {boolean} isNavigateCart - hard coded false (for Anodot)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCartIconToOpenMiniCartSfParams>} LogObject<clickOnCartIconToOpenMiniCartSfParams>
 */
export function clickOnCartIconToOpenMiniCartSf(params) {
    return {
        evid: 49,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToOpenZoomModalSf' event (evid: 490)
 *
 * Event description: When a buyer clicks on product image in product page to open zoom modal
 *
 * @param {clickToOpenZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenZoomModalSfParams>} LogObject<clickToOpenZoomModalSfParams>
 */
export function clickToOpenZoomModalSf(params) {
    return {
        evid: 490,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewZoomModalSf' event (evid: 491)
 *
 * Event description: When the zoom modal in product page loads
 *
 * @param {viewZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewZoomModalSfParams>} LogObject<viewZoomModalSfParams>
 */
export function viewZoomModalSf(params) {
    return {
        evid: 491,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'zoomModalIsClosedSf' event (evid: 492)
 *
 * Event description: When the zoom modal in product page is closed by clicking on the X or swiping up / down
 *
 * @param {zoomModalIsClosedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<zoomModalIsClosedSfParams>} LogObject<zoomModalIsClosedSfParams>
 */
export function zoomModalIsClosedSf(params) {
    return {
        evid: 492,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pictureNavigationInZoomModalSf' event (evid: 493)
 *
 * Event description: When the buyer navigates between the product pictures in the zoom modal in product page
 *
 * @param {pictureNavigationInZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} value - previous / next
 * @property {GUID} bi_token - msid
 * @return {LogObject<pictureNavigationInZoomModalSfParams>} LogObject<pictureNavigationInZoomModalSfParams>
 */
export function pictureNavigationInZoomModalSf(params) {
    return {
        evid: 493,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerCloseScanScreenOa' event (evid: 494)
 *
 * Event description: in basrcode scanner screen in OneApp user clicks "Enter manually " (possible only for origin productScreen / productOptions) / "x"  and closes it
 *
 * @param {barCodeScannerCloseScanScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productsList / productScreen / productOptions / pos
 * @property {string} type - enter manually / close
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerCloseScanScreenOaParams>} LogObject<barCodeScannerCloseScanScreenOaParams>
 */
export function barCodeScannerCloseScanScreenOa(params) {
    return {
        evid: 494,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerSelectProductScreenShownOa' event (evid: 495)
 *
 * Event description: when user clicks on scan icon in products list in OneApp if there are several products with the same sku
 *
 * @param {barCodeScannerSelectProductScreenShownOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} count - number of products
 * @property {string} sku - sku
 * @property {string} productsList - lis of products shown (limit to 1000)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - pos / productsList
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerSelectProductScreenShownOaParams>} LogObject<barCodeScannerSelectProductScreenShownOaParams>
 */
export function barCodeScannerSelectProductScreenShownOa(params) {
    return {
        evid: 495,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'barCodeScannerClickInSelectProductScreenOa' event (evid: 496)
 *
 * Event description: when user clicks on scan icon in products list in OneApp if there are several products with the same sku
 *
 * @param {barCodeScannerClickInSelectProductScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} sku - sku
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} productId - for type  = select
 * @property {string} type - close  / select
 * @property {GUID} bi_token - msid
 * @return {LogObject<barCodeScannerClickInSelectProductScreenOaParams>} LogObject<barCodeScannerClickInSelectProductScreenOaParams>
 */
export function barCodeScannerClickInSelectProductScreenOa(params) {
    return {
        evid: 496,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editOrderInfoClicked' event (evid: 497)
 *
 * Event description: When the user clicks on “edit order info” to edit the order. since december 2020 also sent from WixApp
 *
 * @param {editOrderInfoClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - businessManagerStores
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - where the click was made from
 * @property {string} type - order type : shipping / pickup
 * @property {GUID} bi_token - msid
 * @return {LogObject<editOrderInfoClickedParams>} LogObject<editOrderInfoClickedParams>
 */
export function editOrderInfoClicked(params) {
    return {
        evid: 497,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editOrderOptionClicked' event (evid: 498)
 *
 * Event description: When the user clicks on one of the edit order options to edit the order.
 *
 * @param {editOrderOptionClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - businessManagerStores
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - email address / shipping address / billing address / delivery method
 * @property {GUID} bi_token - msid
 * @return {LogObject<editOrderOptionClickedParams>} LogObject<editOrderOptionClickedParams>
 */
export function editOrderOptionClicked(params) {
    return {
        evid: 498,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editOrderUpdateClicked' event (evid: 499)
 *
 * Event description: When the user clicks on “update” in the edit order popup. since december 2020 also sent from WixApp when user clicked Save in Edit Order screen
 *
 * @param {editOrderUpdateClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - businessManagerStores
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * @property {boolean} shippingAddressChanged - only for OneApp . true if shipping address was changed
 * @property {string} type - only for OneApp order type : shipping / pickup
 * @property {boolean} isEmail - if the user checks v in the “resend order confirmation email to the new email address” check box
 * @property {boolean} emailChanged - only for OneApp. true if email was changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<editOrderUpdateClickedParams>} LogObject<editOrderUpdateClickedParams>
 */
export function editOrderUpdateClicked(params) {
    return {
        evid: 499,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewMiniCart' event (evid: 50)
 *
 * Event description: view mini cart pop-up. Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 * This bi is being sent when there's an action on mini cart and its being presented to the UoU
 *
 * @param {viewMiniCartParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {GUID} visitorId - visitorId
 * @property {string} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {string} origin - cartIcon / addToCartButton
 * @property {string} type - The type of the cart that is shown (mini-cart ,tiny-cart ,mobile)
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - price_breakdown
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<viewMiniCartParams>} LogObject<viewMiniCartParams>
 */
export function viewMiniCart(params) {
    return {
        evid: 50,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInFilterScreenOa' event (evid: 500)
 *
 * Event description: When user clicks clear filter close (x) -
 *
 * @param {clickInFilterScreenOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} filterScreen - filter_screen
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - products / orders
 * @property {string} value - clear / close
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInFilterScreenOaParams>} LogObject<clickInFilterScreenOaParams>
 */
export function clickInFilterScreenOa(params) {
    return {
        evid: 500,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editOrderSuccessToastIsShown' event (evid: 502)
 *
 * Event description: When a toast is shown after updating an order. Can be a success toast or an error toast.
 *
 * @param {editOrderSuccessToastIsShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - businessManagerStores
 * @property {GUID} orderId - order_id
 * @property {boolean} isSuccess - is the toast a success toast or an error toast
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * @property {GUID} bi_token - msid
 * @return {LogObject<editOrderSuccessToastIsShownParams>} LogObject<editOrderSuccessToastIsShownParams>
 */
export function editOrderSuccessToastIsShown(params) {
    return {
        evid: 502,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterOa' event (evid: 506)
 *
 * Event description: Click on filter OA.
 *
 * @param {clickOnFilterOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - products / orders /pos
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFilterOaParams>} LogObject<clickOnFilterOaParams>
 */
export function clickOnFilterOa(params) {
    return {
        evid: 506,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'searchResultsShownOaSrc10Evid508' event (evid: 508)
 *
 * Event description: search results shown  OA.
 *
 * @param {searchResultsShownOaSrc10Evid508Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} searchQuery - what user searched for
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} results - an array on returned ids (limit to 1000)
 * @property {number} loadingTime - Milliseconds, time from start to search
 * @property {string} origin - pos / products / orders / StoreFront
 * @property {number} resultsCount - number of results
 * @property {GUID} bi_token - msid
 * @return {LogObject<searchResultsShownOaSrc10Evid508Params>} LogObject<searchResultsShownOaSrc10Evid508Params>
 */
export function searchResultsShownOaSrc10Evid508(params) {
    return {
        evid: 508,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInSearchResultsOaSrc10Evid509' event (evid: 509)
 *
 * Event description: When user clears search entry (in Owner App) or clicks cancel in Spaces App (closes search modal)
 *
 * @param {clickInSearchResultsOaSrc10Evid509Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} results - an array on returned ids (limit to 1000)
 * @property {string} origin - pos / products / orders / StoreFront
 * @property {string} value - cancel / close
 * @property {number} resultsCount - number of results
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInSearchResultsOaSrc10Evid509Params>} LogObject<clickInSearchResultsOaSrc10Evid509Params>
 */
export function clickInSearchResultsOaSrc10Evid509(params) {
    return {
        evid: 509,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'trackInventoryToggleSm' event (evid: 51)
 *
 * Event description: toggle track inventory in product page SM : both with Product Optins used  (in "Manage Variants" popup) and without it (in Inventory&Shipping section)
 *
 * @param {trackInventoryToggleSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - true if merchant
 * @property {string} origin - product options/product page
 * @property {string} productId - product_guid
 * @property {string} type - toggle on / toggle off
 * @property {GUID} bi_token - msid
 * @return {LogObject<trackInventoryToggleSmParams>} LogObject<trackInventoryToggleSmParams>
 */
export function trackInventoryToggleSm(params) {
    return {
        evid: 51,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addShippingRuleClickedSm' event (evid: 511)
 *
 * Event description: Add shipping rule clicked SM.
 *
 * @param {addShippingRuleClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<addShippingRuleClickedSmParams>} LogObject<addShippingRuleClickedSmParams>
 */
export function addShippingRuleClickedSm(params) {
    return {
        evid: 511,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'setShippingAndTaxRulesClickSm' event (evid: 514)
 *
 * Event description: Set shipping and tax rules click SM.
 *
 * @param {setShippingAndTaxRulesClickSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<setShippingAndTaxRulesClickSmParams>} LogObject<setShippingAndTaxRulesClickSmParams>
 */
export function setShippingAndTaxRulesClickSm(params) {
    return {
        evid: 514,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createShippingTaxRuleSm' event (evid: 515)
 *
 * Event description: merchant saved a new shipping&tax rule (click on save)
 *
 * @param {createShippingTaxRuleSmParams} params - The parameters for this event
 * @property {number} handlingFee - handling_fee_long
 * @property {number} defaultWeightLong - defaultWeight_long
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} handlingFeeLong - handling_fee_long
 * @property {number} defaultRateLong - default_rate_long
 * @property {string} services - services
 * @property {string} dest - dest
 * @property {number} numOfServices - num_of_services
 * @property {number} defaultRate - default_rate
 * @property {boolean} calcTaxAfterShipping - calc_tax_after_shipping
 * @property {string} appName - app_name
 * @property {string} appsServices - json of appId, isActive, rate and name
 * @property {boolean} allowStorePickUp - allow_store_pick_up
 * @property {number} defaultWeight - default_weight
 * @property {number} defaultWeight_long - defaultWeight_long
 * @property {GUID} shippingRuleId - shipping_rule_guid
 * @property {number} numOfSevices - num_of_sevices
 * @property {number} deafultRate - deafult_rate
 * @property {number} maxNumOfProducts - max_num_of_products
 * @property {string} customBoxDimensions - custom_box_dimensions
 * @property {string} user_agent - user_agent
 * @property {string} packageTypes - all package types  in the shipping rule- json
 * @property {string} selectedTaxOption - selected_tax_option
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxDescription - json of Tax country, tax state, tax rate  -  INTEGER!!!!!!! (multiply by 100000)
 * @property {string} methodType - method_type
 * @property {boolean} orderAvailability - order_availability
 * @property {number} handlingFee_long - handling_fee_long
 * @property {number} numberOfLocalDeliveries - The number of local deliveries in the shipping region
 * @property {number} defaultRate_long - default_rate_long
 * @property {string} destName - dest_name
 * @property {string} currency - currency
 * @property {boolean} calcTaxBeforeShipping - calc_tax_before_shipping
 * @property {boolean} noTaxOnDigital - no_tax_on_digital
 * @property {string} defaultPackageType - default_package_type
 * @property {GUID} userId - uuid
 * @property {string} methodTitle - method_title
 * @property {string} carrierType - carrier_type
 * @property {boolean} taxInProductPrice - tax_in_product_price
 * @property {GUID} bi_token - msid
 * @property {string} apps - a Json with the appDefId and the status of the app (toggle on/off)
 * @property {string} shippingRuleOptions - shipping_rule_options
 * @return {LogObject<createShippingTaxRuleSmParams>} LogObject<createShippingTaxRuleSmParams>
 */
export function createShippingTaxRuleSm(params) {
    return {
        evid: 515,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateShippingTaxRuleSm' event (evid: 516)
 *
 * Event description: merchant updated an existing shipping&tax rule (click on save). package types is updated across all shipping rules when updating a specific shipping rule. the only exception is main package type (can be diff between regions)
 *
 * @param {updateShippingTaxRuleSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {number} handlingFee - handling_fee_long
 * @property {number} defaultWeightLong - default_weight_long.in rtc under 'Backup settings'-the Backup weight per product
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} handlingFeeLong - handling_fee_long
 * @property {number} defaultRateLong - default_rate_long. in rtc under 'Backup settings'-the Backup shipping rate
 * @property {string} services - json of all services
 * @property {string} dest - dest
 * @property {number} numOfServices - num_of_services
 * @property {number} defaultRate - default_rate
 * @property {boolean} calcTaxAfterShipping - calc_tax_after_shipping
 * @property {string} appName - app_name
 * @property {string} appsServices - json of appId, isActive, rate and name
 * @property {boolean} allowStorePickUp - allow_store_pick_up
 * @property {number} defaultWeight - default_weight
 * @property {number} defaultWeight_long - default_weight_long.in rtc under 'Backup settings'-the Backup weight per product
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {number} numOfSevices - num_of_sevices
 * @property {number} deafultRate - deafult_rate
 * @property {number} maxNumOfProducts - in case shipping type is RTC and user chooses non custom box+ define it as the main package, The field will send the max num of products that he insert
 * @property {string} customBoxDimensions - in case shipping type is RTC this will be  the package custom_box_dimensions for the main package
 * @property {string} user_agent - user_agent
 * @property {string} packageTypes - all package types  in the shipping rule- json
 * @property {string} selectedTaxOption - selected_tax_option
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxDescription - json of Tax country, tax state, tax rate  -  INTEGER!!!!!!! (multiply by 100000)
 * @property {string} methodType - method_type
 * @property {boolean} orderAvailability - if there is pickup info in the shipping rule
 * @property {number} handlingFee_long - handling_fee_long
 * @property {number} numberOfLocalDeliveries - The number of local deliveries in the shipping region
 * @property {number} defaultRate_long - default_rate_long. in rtc under 'Backup settings'-the Backup shipping rate
 * @property {string} destName - dest_name
 * @property {string} currency - currency
 * @property {boolean} calcTaxBeforeShipping - calc_tax_before_shipping
 * @property {boolean} noTaxOnDigital - no_tax_on_digital
 * @property {number} defultWeight - defult_weight
 * @property {string} defaultPackageType - main package type
 * @property {string} methodTitle - method_title
 * @property {string} carrierType - carrier_type
 * @property {boolean} taxInProductPrice - taxinproductprice
 * @property {GUID} bi_token - msid
 * @property {string} apps - a Json with the appDefId and the status of the app (toggle on/off)
 * @property {string} shippingRuleOptions - used to be json of all services - starting July 2017 - the field moved to 'services' (the same meaning)
 * @return {LogObject<updateShippingTaxRuleSmParams>} LogObject<updateShippingTaxRuleSmParams>
 */
export function updateShippingTaxRuleSm(params) {
    return {
        evid: 516,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteShippingTaxRuleSm' event (evid: 517)
 *
 * Event description: merchant deletes an existing shipping&tax rule
 *
 * @param {deleteShippingTaxRuleSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteShippingTaxRuleSmParams>} LogObject<deleteShippingTaxRuleSmParams>
 */
export function deleteShippingTaxRuleSm(params) {
    return {
        evid: 517,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'enableDisableShippingTaxRuleSm' event (evid: 518)
 *
 * Event description: merchant enables/disables an existing shipping&tax rule
 *
 * @param {enableDisableShippingTaxRuleSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} status - true for activate false for deactivate
 * @property {GUID} bi_token - msid
 * @return {LogObject<enableDisableShippingTaxRuleSmParams>} LogObject<enableDisableShippingTaxRuleSmParams>
 */
export function enableDisableShippingTaxRuleSm(params) {
    return {
        evid: 518,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRtcPopupOpenedSm' event (evid: 519)
 *
 * Event description: pop up related to shipping real time calculator poped up
 *
 * @param {shippingRtcPopupOpenedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - popup name
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - popup origin
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingRtcPopupOpenedSmParams>} LogObject<shippingRtcPopupOpenedSmParams>
 */
export function shippingRtcPopupOpenedSm(params) {
    return {
        evid: 519,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectSameRateForEntireCountry' event (evid: 52)
 *
 * Event description: in country page - when user toggles on/off collect same rate (by default for countries with states its turned on)
 *
 * @param {collectSameRateForEntireCountryParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - shipping and tax / tax - send "shipping and tax" when shipping and tax are not separated (old flow)
 * @property {string} taxCountry - the country of the country page (Null for old flow)
 * @property {GUID} bi_token - msid
 * @property {string} newValue - true/false/no tax(for old flow)
 * @return {LogObject<collectSameRateForEntireCountryParams>} LogObject<collectSameRateForEntireCountryParams>
 */
export function collectSameRateForEntireCountry(params) {
    return {
        evid: 52,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'interactionWithShippingRctPopupSm' event (evid: 520)
 *
 * Event description: pop up related to shipping real time calculator poped up
 *
 * @param {interactionWithShippingRctPopupSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - popup name
 * @property {string} interaction - done/cancel/closed
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<interactionWithShippingRctPopupSmParams>} LogObject<interactionWithShippingRctPopupSmParams>
 */
export function interactionWithShippingRctPopupSm(params) {
    return {
        evid: 520,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnLearnMoreLinkInShippingRulePageSm' event (evid: 521)
 *
 * Event description: click on learn more link in shipping rule page SM
 *
 * @param {clickOnLearnMoreLinkInShippingRulePageSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - services main/ <service type> (first class mail...)/packages/main page/ inner page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnLearnMoreLinkInShippingRulePageSmParams>} LogObject<clickOnLearnMoreLinkInShippingRulePageSmParams>
 */
export function clickOnLearnMoreLinkInShippingRulePageSm(params) {
    return {
        evid: 521,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersListTotalGmvInteraction' event (evid: 523)
 *
 * Event description: When the user interacts with the total GMV presented in the orders list.
 *
 * @param {ordersListTotalGmvInteractionParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - hover/click
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersListTotalGmvInteractionParams>} LogObject<ordersListTotalGmvInteractionParams>
 */
export function ordersListTotalGmvInteraction(params) {
    return {
        evid: 523,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cameraPermissionScreenShownOa' event (evid: 524)
 *
 * Event description: when user didn't give OneApp permissions to access camera and want to scan barcode / tracking number
 *
 * @param {cameraPermissionScreenShownOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productsList / productScreen / productOptions /pos /trackingNumber
 * @property {GUID} bi_token - msid
 * @return {LogObject<cameraPermissionScreenShownOaParams>} LogObject<cameraPermissionScreenShownOaParams>
 */
export function cameraPermissionScreenShownOa(params) {
    return {
        evid: 524,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInCameraPermissionScreenOa' event (evid: 525)
 *
 * Event description: user clicks go to settings / closes Permission screen  in OneApp
 *
 * @param {clickInCameraPermissionScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - settings / close
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInCameraPermissionScreenOaParams>} LogObject<clickInCameraPermissionScreenOaParams>
 */
export function clickInCameraPermissionScreenOa(params) {
    return {
        evid: 525,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsCreatedFromIntroOnDashboardModal' event (evid: 526)
 *
 * Event description: When the user finishes the intro on the dashboard modal and added products during the intro
 *
 * @param {productsCreatedFromIntroOnDashboardModalParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - app_name
 * @property {string} productIds - list of product ids created in the intro
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<productsCreatedFromIntroOnDashboardModalParams>} LogObject<productsCreatedFromIntroOnDashboardModalParams>
 */
export function productsCreatedFromIntroOnDashboardModal(params) {
    return {
        evid: 526,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickOnCheckbox' event (evid: 527)
 *
 * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickOnCheckboxParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - checked / unchecked
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<giftCardCheckoutClickOnCheckboxParams>} LogObject<giftCardCheckoutClickOnCheckboxParams>
 */
export function giftCardCheckoutClickOnCheckbox(params) {
    return {
        evid: 527,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDeleteProductProductOa' event (evid: 528)
 *
 * Event description: user clicks to delete product in product page / product list
 *
 * @param {clickToDeleteProductProductOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page / product list
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToDeleteProductProductOaParams>} LogObject<clickToDeleteProductProductOaParams>
 */
export function clickToDeleteProductProductOa(params) {
    return {
        evid: 528,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickApply' event (evid: 529)
 *
 * Event description: when visitor clicks "Apply" after entering Gift Card Code in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickApplyParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<giftCardCheckoutClickApplyParams>} LogObject<giftCardCheckoutClickApplyParams>
 */
export function giftCardCheckoutClickApply(params) {
    return {
        evid: 529,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnRightBarTabsWithinComponentSfe' event (evid: 53)
 *
 * Event description: click to view tab in the component (right bar)
 *
 * @param {clickOnRightBarTabsWithinComponentSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - general/product info & Image/Image Slideshow/product Options & Quantity./Ribbons/Add to cart Button/Quick view Button/Load More Button
 * @property {string} tab - design / text / Manage
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnRightBarTabsWithinComponentSfeParams>} LogObject<clickOnRightBarTabsWithinComponentSfeParams>
 */
export function clickOnRightBarTabsWithinComponentSfe(params) {
    return {
        evid: 53,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickAddCurrencySfe' event (evid: 530)
 *
 * Event description: click ‘Add Currency’ in currency converter settings (under 'Currencies' panel) to open modal.
 *
 * @param {currencyConverterClickAddCurrencySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickAddCurrencySfeParams>} LogObject<currencyConverterClickAddCurrencySfeParams>
 */
export function currencyConverterClickAddCurrencySfe(params) {
    return {
        evid: 530,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickGeneralInfoSfe' event (evid: 531)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickGeneralInfoSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickGeneralInfoSfeParams>} LogObject<currencyConverterClickGeneralInfoSfeParams>
 */
export function currencyConverterClickGeneralInfoSfe(params) {
    return {
        evid: 531,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickAddCurrenciesListSfe' event (evid: 532)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickAddCurrenciesListSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickAddCurrenciesListSfeParams>} LogObject<currencyConverterClickAddCurrenciesListSfeParams>
 */
export function currencyConverterClickAddCurrenciesListSfe(params) {
    return {
        evid: 532,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickDeleteCurrencySfe' event (evid: 533)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickDeleteCurrencySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickDeleteCurrencySfeParams>} LogObject<currencyConverterClickDeleteCurrencySfeParams>
 */
export function currencyConverterClickDeleteCurrencySfe(params) {
    return {
        evid: 533,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'currencyConverterChooseSiteCurrencyDisplay' event (evid: 534)
 *
 * Event description: when a buyer chooses the site currency display in the currency converter dropdown
 *
 * @param {currencyConverterChooseSiteCurrencyDisplayParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} siteCurrency - original site currency
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @property {string} newValue - chosen display currency
 * @return {LogObject<currencyConverterChooseSiteCurrencyDisplayParams>} LogObject<currencyConverterChooseSiteCurrencyDisplayParams>
 */
export function currencyConverterChooseSiteCurrencyDisplay(params) {
    return {
        evid: 534,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutCodeApplied' event (evid: 535)
 *
 * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout
 *
 * @param {giftCardCheckoutCodeAppliedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<giftCardCheckoutCodeAppliedParams>} LogObject<giftCardCheckoutCodeAppliedParams>
 */
export function giftCardCheckoutCodeApplied(params) {
    return {
        evid: 535,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutRemoveCode' event (evid: 536)
 *
 * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout
 *
 * @param {giftCardCheckoutRemoveCodeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<giftCardCheckoutRemoveCodeParams>} LogObject<giftCardCheckoutRemoveCodeParams>
 */
export function giftCardCheckoutRemoveCode(params) {
    return {
        evid: 536,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardClickOnGoToGiftCardInOrder' event (evid: 537)
 *
 * Event description: User clicks on "Go to Dift Card" (with link to Gift App dashboard) inside order page
 *
 * @param {giftCardClickOnGoToGiftCardInOrderParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - purchase / redeem
 * @property {GUID} bi_token - msid
 * @return {LogObject<giftCardClickOnGoToGiftCardInOrderParams>} LogObject<giftCardClickOnGoToGiftCardInOrderParams>
 */
export function giftCardClickOnGoToGiftCardInOrder(params) {
    return {
        evid: 537,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardClickLearnMore' event (evid: 538)
 *
 * Event description: in store settings - when user cicks "learn more" (leads to open the App Market with Gifted App opened)
 *
 * @param {giftCardClickLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<giftCardClickLearnMoreParams>} LogObject<giftCardClickLearnMoreParams>
 */
export function giftCardClickLearnMore(params) {
    return {
        evid: 538,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickWatchNow' event (evid: 539)
 *
 * Event description: when the user click the 'watch now' link to view the 'how to' video
 *
 * @param {acClickWatchNowParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is merchant
 * @property {string} origin - empty state / full state / first-time pop-up?
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickWatchNowParams>} LogObject<acClickWatchNowParams>
 */
export function acClickWatchNow(params) {
    return {
        evid: 539,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToEditOptionSm' event (evid: 54)
 *
 * Event description: when clicking on existing option to edit it in product page
 *
 * @param {clickToEditOptionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToEditOptionSmParams>} LogObject<clickToEditOptionSmParams>
 */
export function clickToEditOptionSm(params) {
    return {
        evid: 54,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteProductClickedSm' event (evid: 540)
 *
 * Event description: Delete product clicked to open delete modal from SM
 * Delete product is 10:1353
 *
 * @param {deleteProductClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - appName
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page, bulk action, product list
 * @property {string} productGuid - product guid for single product deleting click, when bulk action is null
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteProductClickedSmParams>} LogObject<deleteProductClickedSmParams>
 */
export function deleteProductClickedSm(params) {
    return {
        evid: 540,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewProductPageSf' event (evid: 541)
 *
 * Event description: view product page in SF
 * (preview, Editor & live site)
 *
 * @param {viewProductPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} isDescriptionDisplayed - True/False
 * @property {boolean} buyNow - has buy now button
 * @property {boolean} isProductOptionsDisplayed - True/False
 * @property {boolean} isQuantityDisplayed - True/False
 * @property {boolean} isProductNameDisplayed - True/False
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} isBuyNowDisplayed - True/False
 * @property {boolean} isPictureDisplayed - True/False
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {boolean} isBackInStockDisplayed - True/False
 * @property {string} appName - app name
 * @property {boolean} isAddToCartDisplayed - True/False
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} isCustomTextFieldsDisplayed - True/False
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} preOrder - has pre order button
 * @property {string} socialButton - which social button appear on page
 * @property {boolean} preOrderNow - has pre order now button
 * @property {string} options - which options types the product has, no options = NULL
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isPricePerUnitDisplayed - True/False
 * @property {boolean} isShareButtonsDisplayed - True/False
 * @property {boolean} isPriceAndDiscountDisplayed - True/False
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {boolean} isSkuDisplayed - True/False
 * @property {boolean} isPriceRangeDisplayed - True/False
 * @property {boolean} isSubscriptionDisplayed - True/False
 * @property {boolean} hasPriceBreakdownWidget - has price breakdown widget (the banner you show for installments) -- not possible
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} isMorePaymentOptionsDispalyed - True/False
 * @property {boolean} isNavigationDisplayed - True/False
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {string} type - product page layout - - classic / sleek / stunning / spotlight / simple
 * @property {boolean} hasWishlist - has wishlist
 * @property {boolean} isInfoSectionDisplayed - True/False
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {boolean} hasDynamicPaymentMethods - does dynamic payment methods is on in pp settings (only relevant for editor))
 * @property {boolean} isTaxAndShippingInfoDisplayed - True/False
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {boolean} isGalleryDisplayed - True/False
 * @return {LogObject<viewProductPageSfParams>} LogObject<viewProductPageSfParams>
 */
export function viewProductPageSf(params) {
    return {
        evid: 541,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewGallerySf' event (evid: 542)
 *
 * Event description: view gallery (slider, grid ang gallery page) in SF
 * (preview, Editor & live site)
 *
 * @param {viewGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - is options in gallery shown
 * @property {string} algorithmId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the id of the algorithm
 * @property {boolean} isCategoryPage - Is category page  (collections by legacy)
 * @property {string} categoryId - presented category (if not relevant NULL) (collection by legacy)
 * @property {number} numOfColumns - Presented gallery columns
 * @property {boolean} hasProductCounter - Has product counter
 * @property {string} filterType - if has filters > list of displayed filters, if no filters > null
 * @property {string} productsList - array of the prdocutIds in the gallery  (only in slider)
 * @property {string} appName - app name
 * @property {boolean} hasAppliedFilters - Has applied filters
 * @property {GUID} algorithmProviderId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the provider  id of the algorithm
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {string} filterName - ONLY custom filters names (can be NULL)
 * @property {boolean} hasHeroImage - Has hero image
 * @property {string} loadType - pagination / load more button / infinite scroll
 * @property {boolean} hasCategoryTree - Has category tree  (collections by legacy)
 * @property {string} navigationClick - what happens when you click on add to cart (if no ATC button > NULL)
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} hasSorting - is sorting in gallery shown
 * @property {boolean} hasQuickView - has quick view
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) list -> when (other pages), when it shows all products -> null, Best Sellers -> null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} hasPrice - is price in gallery shown
 * @property {boolean} hasQuantity - is quantity in gallery shown
 * @property {boolean} hasImageCarousel - has image carousel
 * @property {string} hoverType - swap / zoom / border / nothing
 * @property {string} productsLogic - collection / related products / all products
 * @property {string} pageName - the website page of where the gallery exists in, e.g product page, home page, etc.
 * @property {string} type - slider gallery / grid gallery / gallery page
 * @property {boolean} hasHeroDescription - Has hero description
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {boolean} hasBreadcrumbs - has_breadcrumbs
 * @property {string} layoutSettings - array with any additional settings (From layout tab)
 * @property {string} displaySettings - array with any additional settings (From display tab) - array
 * @property {string} settings - array with any additional settings (From settings tab)
 * @property {string} component_id - component_id
 * @property {string} componentType - minigalley for slider or grid gallery
 * @return {LogObject<viewGallerySfParams>} LogObject<viewGallerySfParams>
 */
export function viewGallerySf(params) {
    return {
        evid: 542,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewQuickViewSf' event (evid: 543)
 *
 * Event description: view quick view in SF
 * (preview, Editor & live site)
 *
 * @param {viewQuickViewSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} buyNow - has buy now button
 * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} addToCart - has add to cart button
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - which social button appear on page
 * @property {string} options - which options types the product has, no options = NULL
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {string} productId - product_guid
 * @property {boolean} hasWishlist - has wishlist
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @return {LogObject<viewQuickViewSfParams>} LogObject<viewQuickViewSfParams>
 */
export function viewQuickViewSf(params) {
    return {
        evid: 543,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetLoadedSf' event (evid: 544)
 *
 * Event description: product widget loaded in SF
 * (preview, Editor & live site)
 *
 * @param {productWidgetLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - has_options
 * @property {string} buttonType - all the time / hover / never
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - add to cart / view details
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} productId - product_guid
 * @property {string} type - layout - left / close-up / outline / add to cart / center
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @return {LogObject<productWidgetLoadedSfParams>} LogObject<productWidgetLoadedSfParams>
 */
export function productWidgetLoadedSf(params) {
    return {
        evid: 544,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addToCartButtonLoadedSf' event (evid: 545)
 *
 * Event description: Add to Cart Button in SF
 * (preview, Editor & live site)
 *
 * @param {addToCartButtonLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<addToCartButtonLoadedSfParams>} LogObject<addToCartButtonLoadedSfParams>
 */
export function addToCartButtonLoadedSf(params) {
    return {
        evid: 545,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cartIconLoadedSf' event (evid: 546)
 *
 * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard
 *
 * @param {cartIconLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} navigationClick - navigation_click
 * @property {string} tabName - recentlyUpdated / OutOfStock /  hidden / topViewed
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - is_mobile_friendly
 * @property {string} origin - product_list_widget / order_list_widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartIconLoadedSfParams>} LogObject<cartIconLoadedSfParams>
 */
export function cartIconLoadedSf(params) {
    return {
        evid: 546,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewMoreInWidgetOaSrc10Evid547' event (evid: 547)
 *
 * Event description: when user clicks on View More in orders / products widget in OneApp dashboard
 *
 * @param {clickViewMoreInWidgetOaSrc10Evid547Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product_list_widget / order_list_widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickViewMoreInWidgetOaSrc10Evid547Params>} LogObject<clickViewMoreInWidgetOaSrc10Evid547Params>
 */
export function clickViewMoreInWidgetOaSrc10Evid547(params) {
    return {
        evid: 547,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnLearnMoreSrc10Evid55' event (evid: 55)
 *
 * Event description: When user clicks on "Learn more" or "i" to get more info about tax
 *
 * @param {taxClickOnLearnMoreSrc10Evid55Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - empty state / countries list / states list / tax on shipping / tax on digital / tax settings / tax calculation /avalara terms/avalara rates / productTaxGroupMain / productTaxGroupInner / productTaxGroupPopup/ avalaraBeta
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnLearnMoreSrc10Evid55Params>} LogObject<taxClickOnLearnMoreSrc10Evid55Params>
 */
export function taxClickOnLearnMoreSrc10Evid55(params) {
    return {
        evid: 55,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnPriceBreakdownWidgetInPpSf' event (evid: 550)
 *
 * Event description: buyer clicks on the price breakdown widget in the product page
 *
 * @param {clickOnPriceBreakdownWidgetInPpSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - type of installments app
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnPriceBreakdownWidgetInPpSfParams>} LogObject<clickOnPriceBreakdownWidgetInPpSfParams>
 */
export function clickOnPriceBreakdownWidgetInPpSf(params) {
    return {
        evid: 550,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'priceBreakdownModalOpenSf' event (evid: 551)
 *
 * Event description: price breakdown modal opened after clicking on the widget in the product page
 *
 * @param {priceBreakdownModalOpenSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - type of installments app
 * @property {GUID} bi_token - msid
 * @return {LogObject<priceBreakdownModalOpenSfParams>} LogObject<priceBreakdownModalOpenSfParams>
 */
export function priceBreakdownModalOpenSf(params) {
    return {
        evid: 551,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickedToOpenConnectProductsModal' event (evid: 552)
 *
 * Event description: ready to sell funnel - clicking on the banner that calls to connect products to the dropshipping app (printful). That action opens a modal with a flow to connect your product to the app.
 *
 * @param {clickedToOpenConnectProductsModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isInstalled - False = installation + connect product modal will be shown. True = connect product modal will be shown
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickedToOpenConnectProductsModalParams>} LogObject<clickedToOpenConnectProductsModalParams>
 */
export function clickedToOpenConnectProductsModal(params) {
    return {
        evid: 552,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInstallAppForDirectInstallationNoAppMarket' event (evid: 553)
 *
 * Event description: clicking on install app on the connecting product modal for a direct installation of the app (without going thru the app market)
 * After this stage it will open automaticly the external app sign-up flow
 *
 * @param {clickInstallAppForDirectInstallationNoAppMarketParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Printful banner on products list / Modalyst banner on products list
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInstallAppForDirectInstallationNoAppMarketParams>} LogObject<clickInstallAppForDirectInstallationNoAppMarketParams>
 */
export function clickInstallAppForDirectInstallationNoAppMarket(params) {
    return {
        evid: 553,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsConnectedToTpaSuccessfully' event (evid: 554)
 *
 * Event description: Ready to sell funnel - Is sent when the of connecting products to the TPA is ended successfully
 *
 * @param {productsConnectedToTpaSuccessfullyParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Printful banner on products list / Modalyst banner on products list
 * @property {GUID} bi_token - msid
 * @return {LogObject<productsConnectedToTpaSuccessfullyParams>} LogObject<productsConnectedToTpaSuccessfullyParams>
 */
export function productsConnectedToTpaSuccessfully(params) {
    return {
        evid: 554,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorOnConnectingProductsToTpa' event (evid: 555)
 *
 * Event description: Ready to sell funnel - Is sent when there is an error while connecting products to the TPA
 *
 * @param {errorOnConnectingProductsToTpaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Printful banner on products list/ Modalyst banner on products list
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorOnConnectingProductsToTpaParams>} LogObject<errorOnConnectingProductsToTpaParams>
 */
export function errorOnConnectingProductsToTpa(params) {
    return {
        evid: 555,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'retryToConnectProductsToTpaClicked' event (evid: 556)
 *
 * Event description: Ready to sell funnel - Is sent when user clicks connect product button in the error modal to retry.
 *
 * @param {retryToConnectProductsToTpaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Printful banner on products list/ Modalyst banner on products list
 * @property {GUID} bi_token - msid
 * @return {LogObject<retryToConnectProductsToTpaClickedParams>} LogObject<retryToConnectProductsToTpaClickedParams>
 */
export function retryToConnectProductsToTpaClicked(params) {
    return {
        evid: 556,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateInventory' event (evid: 557)
 *
 * Event description: Event of updating inventory from inventory management tab
 *
 * @param {updateInventoryParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} variantId - null when there are no variants
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} valueInt - when Untracked: out of stock = 0 in stock = 1 when tracked : current quantity number
 * @property {string} productId - product_guid
 * @property {string} type - variant/product
 * @property {string} inventoryPolicy - status (not tracking quantity, availability status)  / quantity (tracking quantity)
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateInventoryParams>} LogObject<updateInventoryParams>
 */
export function updateInventory(params) {
    return {
        evid: 557,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeInventoryPolicy' event (evid: 558)
 *
 * Event description: Event of changing inventory policy from inventory management tab
 *
 * @param {changeInventoryPolicyParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} inventoryPolicy - status (not tracking quantity, availability status)  / quantity (tracking quantity)
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeInventoryPolicyParams>} LogObject<changeInventoryPolicyParams>
 */
export function changeInventoryPolicy(params) {
    return {
        evid: 558,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickedToOpenEditInventoryInBulkModal' event (evid: 559)
 *
 * Event description: Clicked to open edit inventory in bulk modal
 *
 * @param {clickedToOpenEditInventoryInBulkModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} num_items - number of items selected for bulk editing (variants and products)
 * @property {string} type - full modal (when there are only products selected) / limited modal  (when there are variants and products or only variants selected
 * @property {string} inventoryPolicy - status (not tracking quantity, availability status)  / quantity (tracking quantity) / mixed (when there are two tracking method selected)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickedToOpenEditInventoryInBulkModalParams>} LogObject<clickedToOpenEditInventoryInBulkModalParams>
 */
export function clickedToOpenEditInventoryInBulkModal(params) {
    return {
        evid: 559,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChooseRegionModalStartedToRenderSm' event (evid: 56)
 *
 * Event description: When choose country or choose state Modal started to render
 *
 * @param {taxChooseRegionModalStartedToRenderSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - country / state
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxChooseRegionModalStartedToRenderSmParams>} LogObject<taxChooseRegionModalStartedToRenderSmParams>
 */
export function taxChooseRegionModalStartedToRenderSm(params) {
    return {
        evid: 56,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxIsIncludedInMyProductsPricesSm' event (evid: 560)
 *
 * Event description: in tax tab - when toggle tax included
 *
 * @param {taxIsIncludedInMyProductsPricesSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} newValue - true/false
 * @return {LogObject<taxIsIncludedInMyProductsPricesSmParams>} LogObject<taxIsIncludedInMyProductsPricesSmParams>
 */
export function taxIsIncludedInMyProductsPricesSm(params) {
    return {
        evid: 560,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addTaxRuleClickedSm' event (evid: 561)
 *
 * Event description: When user click to add new tax country or state
 *
 * @param {addTaxRuleClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - empty state / countries list / states list
 * @property {GUID} bi_token - msid
 * @return {LogObject<addTaxRuleClickedSmParams>} LogObject<addTaxRuleClickedSmParams>
 */
export function addTaxRuleClickedSm(params) {
    return {
        evid: 561,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChooseRegionModalRenderedSm' event (evid: 562)
 *
 * Event description: When choose country or choose state Modal rendered. These event is not sent from OA (no modal - separate screen)
 *
 * @param {taxChooseRegionModalRenderedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - country / state
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxChooseRegionModalRenderedSmParams>} LogObject<taxChooseRegionModalRenderedSmParams>
 */
export function taxChooseRegionModalRenderedSm(params) {
    return {
        evid: 562,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickAddOnTheChooseRegionModal' event (evid: 563)
 *
 * Event description: When the user click add on the choose country or choose state modal
 *
 * @param {taxClickAddOnTheChooseRegionModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} taxState - state chosen in modal
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - country chosen in modal
 * @property {string} type - country / state
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickAddOnTheChooseRegionModalParams>} LogObject<taxClickAddOnTheChooseRegionModalParams>
 */
export function taxClickAddOnTheChooseRegionModal(params) {
    return {
        evid: 563,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryBulkActionAppliedSm' event (evid: 564)
 *
 * Event description: Inventory Bulk Action Applied in inventory management tab.
 * is sent when applying the bulk action
 *
 * @param {inventoryBulkActionAppliedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} editQuantityMethod - add / set
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} valueInt - status: out of stock = 0 in stock = 1  quantity : value inserted
 * @property {number} num_items - number of items selected for bulk editing (variants and products)
 * @property {number} products_count - the number of products that are effected by the bulk action
 * @property {string} oldInventoryPolicy - status (not tracking quantity, availability status)  / quantity (tracking quantity) / mixed (when there are two tracking method selected)
 * @property {string} type - full modal (when there are only products selected) / limited modal  (when there are variants and products or only variants selected
 * @property {string} inventoryPolicy - status (not tracking quantity, availability status)  / quantity (tracking quantity)
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventoryBulkActionAppliedSmParams>} LogObject<inventoryBulkActionAppliedSmParams>
 */
export function inventoryBulkActionAppliedSm(params) {
    return {
        evid: 564,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleCreatedSm' event (evid: 565)
 *
 * Event description: merchant  saved a new tax rule (with all the info that client sent to server). origin since 11/03/2019
 *
 * @param {taxTaxRuleCreatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} calcTaxAfterShipping - true or false
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {number} taxRate - the tax rate INTEGER!!!!!!! (multiply by 100000)
 * @property {string} taxState - the state in the rule
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - onboarding/user/auto. starts since 11/03/2019 (onboarding/user since 25/02/2019)
 * @property {string} taxCountry - the country of the rule
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} sameTaxToggle - same tax for entire country - true / false / not applicable
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleCreatedSmParams>} LogObject<taxTaxRuleCreatedSmParams>
 */
export function taxTaxRuleCreatedSm(params) {
    return {
        evid: 565,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxDeleteTaxRuleSm' event (evid: 566)
 *
 * Event description: merchant deletes an existing tax rule from  the 3 dots menu for whole country or deleting tax rule for state
 *
 * @param {taxDeleteTaxRuleSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - user / auto
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxDeleteTaxRuleSmParams>} LogObject<taxDeleteTaxRuleSmParams>
 */
export function taxDeleteTaxRuleSm(params) {
    return {
        evid: 566,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleUpdatedSm' event (evid: 567)
 *
 * Event description: merchant updated a tax rule (with indicators of success)
 *
 * @param {taxTaxRuleUpdatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isValid - send TRUE if all the fields were updated successfully
 * @property {boolean} calcTaxAfterShipping - true or false
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {number} taxRate - the tax rate INTEGER!!!!!!! (multiply by 100000)
 * @property {string} errorReason - list of fields with errors
 * @property {string} taxState - the state in the rule
 * @property {boolean} isMerchant - is_merchant
 * @property {string} taxCountry - the country in the rule
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} sameTaxToggle - same tax for entire country - true / false / not applicable
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleUpdatedSmParams>} LogObject<taxTaxRuleUpdatedSmParams>
 */
export function taxTaxRuleUpdatedSm(params) {
    return {
        evid: 567,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryBulkModalDisabled' event (evid: 568)
 *
 * Event description: sent in two terms:
 * - everytime that user check a box of an item and it cause invalid selection (product+variant or variant+variant in mixed methods)
 * - more than 500 items selected (or in select all clicking, or in the action of checking a box)
 *
 * @param {inventoryBulkModalDisabledParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} errorType - More than 500 /  Invalid selection
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventoryBulkModalDisabledParams>} LogObject<inventoryBulkModalDisabledParams>
 */
export function inventoryBulkModalDisabled(params) {
    return {
        evid: 568,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventroyFilterPanelOpened' event (evid: 569)
 *
 * Event description: When the inventory  filter panel opens successfully
 *
 * @param {inventroyFilterPanelOpenedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventroyFilterPanelOpenedParams>} LogObject<inventroyFilterPanelOpenedParams>
 */
export function inventroyFilterPanelOpened(params) {
    return {
        evid: 569,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRemoveRegionModalStartedToRenderSm' event (evid: 57)
 *
 * Event description: when modal started to render because user deletes the country or state / saves the country or state with 0% tax rate
 *
 * @param {taxRemoveRegionModalStartedToRenderSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {string} taxIdList - the list of tax_rule_id that can be removed after this
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - remove country / remove last state / zero tax country / zero tax rate / remove state
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxRemoveRegionModalStartedToRenderSmParams>} LogObject<taxRemoveRegionModalStartedToRenderSmParams>
 */
export function taxRemoveRegionModalStartedToRenderSm(params) {
    return {
        evid: 57,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRemoveRegionModalLoadedSm' event (evid: 570)
 *
 * Event description: when modal is shown to user because user deletes the country or state / saves the country or state with 0% tax rate
 *
 * @param {taxRemoveRegionModalLoadedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - remove country / remove last state  / zero tax country / zero tax rate / remove state
 * @property {GUID} bi_token - msid
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxRemoveRegionModalLoadedSmParams>} LogObject<taxRemoveRegionModalLoadedSmParams>
 */
export function taxRemoveRegionModalLoadedSm(params) {
    return {
        evid: 570,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventroyFilterPanelClosed' event (evid: 571)
 *
 * Event description: When the inventory  filter panel opens successfully
 *
 * @param {inventroyFilterPanelClosedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventroyFilterPanelClosedParams>} LogObject<inventroyFilterPanelClosedParams>
 */
export function inventroyFilterPanelClosed(params) {
    return {
        evid: 571,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryTabFilterChange' event (evid: 572)
 *
 * Event description: When the user changes the Inventory tab filter
 *
 * @param {inventoryTabFilterChangeParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} filterValue - true if filter added, false if filter removed
 * @property {string} appName - app_name
 * @property {string} filterStatus - json that shows snapshot of all the filter that applied on the list
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the origin the filter was changed from ("list"/ ''panel')
 * @property {string} filterSubcategory - the subcategory chosen (not all categories have BI for their sub-categories) When category is stock status: in stock, out of stock. When category is Inventory tracking: quantity / status. When category is collections: collections. When category is products: products .When category is inventory quantity: quantity_from / quantity_to
 * @property {string} filterCategory - ’stock_status’, ‘inventory tracking’, ‘collections’, ‘products’, ‘quantity’, ‘clear all’, ‘search’
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventoryTabFilterChangeParams>} LogObject<inventoryTabFilterChangeParams>
 */
export function inventoryTabFilterChange(params) {
    return {
        evid: 572,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpClickToAddEditRuleSm' event (evid: 573)
 *
 * Event description: when the user clicks on add/edit SDP rule (at the moment only local delivery)
 *
 * @param {sdpClickToAddEditRuleSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - empty / full
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} status - create / update
 * @property {string} type - shipping / local delivery / pickup
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpClickToAddEditRuleSmParams>} LogObject<sdpClickToAddEditRuleSmParams>
 */
export function sdpClickToAddEditRuleSm(params) {
    return {
        evid: 573,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpModalIsOpenedSm' event (evid: 574)
 *
 * Event description: when a SDP modal is opened
 *
 * @param {sdpModalIsOpenedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} status - create / update
 * @property {string} type - shipping / local delivery / pickup
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpModalIsOpenedSmParams>} LogObject<sdpModalIsOpenedSmParams>
 */
export function sdpModalIsOpenedSm(params) {
    return {
        evid: 574,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpSaveTempLocalDeliverySm' event (evid: 575)
 *
 * Event description: when a temp local delivery rule is saved
 *
 * @param {sdpSaveTempLocalDeliverySmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} rate - rate (multiple by 100,000!!)
 * @property {string} areaName - area_name
 * @property {string} city - The city where the radius' center is placed at
 * @property {string} appName - app_name
 * @property {number} minimumOrder - minimum order for free delivery (if null then it's not offered)(multiple by 100,000!!)
 * @property {string} country - The country code where the radius' center is placed at
 * @property {number} radius - the radius size (multiple by 100,000)
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isSchedule - Does the local delivery have schedule delivery.
 * @property {string} deliveryTime - delivery time
 * @property {GUID} bi_token - msid
 * @property {number} zipCodesAmount - number of zip codes
 * @return {LogObject<sdpSaveTempLocalDeliverySmParams>} LogObject<sdpSaveTempLocalDeliverySmParams>
 */
export function sdpSaveTempLocalDeliverySm(params) {
    return {
        evid: 575,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpClickToDeleteRuleSm' event (evid: 576)
 *
 * Event description: when a SDP is being temp deleted
 *
 * @param {sdpClickToDeleteRuleSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - shipping / local delivery / pickup
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpClickToDeleteRuleSmParams>} LogObject<sdpClickToDeleteRuleSmParams>
 */
export function sdpClickToDeleteRuleSm(params) {
    return {
        evid: 576,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpClickSaveSdpSm' event (evid: 577)
 *
 * Event description: when the users clicks on "save" in the main SDP page
 *
 * @param {sdpClickSaveSdpSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpClickSaveSdpSmParams>} LogObject<sdpClickSaveSdpSmParams>
 */
export function sdpClickSaveSdpSm(params) {
    return {
        evid: 577,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'startToConnectProductsToTpa' event (evid: 578)
 *
 * Event description: Ready to sell funnel - Is sent when the of connecting products to the TPA is started
 *
 * @param {startToConnectProductsToTpaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} tpaId - the tpa guid
 * @property {string} tpaName - the tpa name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Printful banner on products list/Modalyst banner from product list
 * @property {string} type - install funnel / connect funnel
 * @property {GUID} bi_token - msid
 * @return {LogObject<startToConnectProductsToTpaParams>} LogObject<startToConnectProductsToTpaParams>
 */
export function startToConnectProductsToTpa(params) {
    return {
        evid: 578,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsProductsWithErrorsModalIsShown' event (evid: 579)
 *
 * Event description: Import products - when the model of 'product with errors' rendered.
 *
 * @param {importProductsProductsWithErrorsModalIsShownParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - app_name
 * @property {string} items - number of items with errors
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} error_data - json with the error code and the distinct number of products with this errors in this report
 * @return {LogObject<importProductsProductsWithErrorsModalIsShownParams>} LogObject<importProductsProductsWithErrorsModalIsShownParams>
 */
export function importProductsProductsWithErrorsModalIsShown(params) {
    return {
        evid: 579,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickPlaceOrderWithSubscription' event (evid: 58)
 *
 * Event description: if "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickPlaceOrderWithSubscriptionParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {boolean} default_state - true if was turned on by default by merchant settings
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickPlaceOrderWithSubscriptionParams>} LogObject<clickPlaceOrderWithSubscriptionParams>
 */
export function clickPlaceOrderWithSubscription(params) {
    return {
        evid: 58,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewAddCollectionToSiteModalEditor' event (evid: 581)
 *
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page.
 *
 * @param {viewAddCollectionToSiteModalEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewAddCollectionToSiteModalEditorParams>} LogObject<viewAddCollectionToSiteModalEditorParams>
 */
export function viewAddCollectionToSiteModalEditor(params) {
    return {
        evid: 581,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inventoryTabClickOnAddProductFromEmptyState' event (evid: 582)
 *
 * Event description: click on 'add product' from empty state of the inventory tab in order to go to product list
 *
 * @param {inventoryTabClickOnAddProductFromEmptyStateParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<inventoryTabClickOnAddProductFromEmptyStateParams>} LogObject<inventoryTabClickOnAddProductFromEmptyStateParams>
 */
export function inventoryTabClickOnAddProductFromEmptyState(params) {
    return {
        evid: 582,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'customizeColumnsClickedSm' event (evid: 583)
 *
 * Event description: When customize columns is clicked.
 *
 * @param {customizeColumnsClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageName - page_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<customizeColumnsClickedSmParams>} LogObject<customizeColumnsClickedSmParams>
 */
export function customizeColumnsClickedSm(params) {
    return {
        evid: 583,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'customizeColumnsChangeSm' event (evid: 584)
 *
 * Event description: When a column is check/uncheck using the customize columns feature.
 *
 * @param {customizeColumnsChangeSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} columnName - column_name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} status - true - check, false -uncheck
 * @property {string} pageName - page_name
 * @property {GUID} bi_token - msid
 * @return {LogObject<customizeColumnsChangeSmParams>} LogObject<customizeColumnsChangeSmParams>
 */
export function customizeColumnsChangeSm(params) {
    return {
        evid: 584,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsClickDownloadCsvFileButtonToOpenAMenu' event (evid: 587)
 *
 * Event description: Click to open drop down menu for downloading CSV file.
 *
 * @param {importProductsClickDownloadCsvFileButtonToOpenAMenuParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - isMerchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsClickDownloadCsvFileButtonToOpenAMenuParams>} LogObject<importProductsClickDownloadCsvFileButtonToOpenAMenuParams>
 */
export function importProductsClickDownloadCsvFileButtonToOpenAMenu(params) {
    return {
        evid: 587,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsImagesCouldnTBeUploadedClickToViewImageUrl' event (evid: 588)
 *
 * Event description: When clicking to view image URL from the errors on uploading images modal
 *
 * @param {importProductsImagesCouldnTBeUploadedClickToViewImageUrlParams} params - The parameters for this event
 * @property {GUID} storeId - store
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<importProductsImagesCouldnTBeUploadedClickToViewImageUrlParams>} LogObject<importProductsImagesCouldnTBeUploadedClickToViewImageUrlParams>
 */
export function importProductsImagesCouldnTBeUploadedClickToViewImageUrl(params) {
    return {
        evid: 588,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'importProductsImagesCouldnTBeUploadedModalShown' event (evid: 589)
 *
 * Event description: Import products - when the model of 'image upload details' of the products that couldn't be uploaded is rendered to review the errors in uploading images
 *
 * @param {importProductsImagesCouldnTBeUploadedModalShownParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - app_name
 * @property {string} items - number of items with errors
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} error_data - json with the error code and the distinct number of products with this errors in this modal
 * @return {LogObject<importProductsImagesCouldnTBeUploadedModalShownParams>} LogObject<importProductsImagesCouldnTBeUploadedModalShownParams>
 */
export function importProductsImagesCouldnTBeUploadedModalShown(params) {
    return {
        evid: 589,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxSplitTaxPopupForExistingUsersShownSm' event (evid: 59)
 *
 * Event description: pop up for existing users who saved some nonzero tax rule and open tax page for the first time after Shipping&Tax page was splitted - poped up
 *
 * @param {taxSplitTaxPopupForExistingUsersShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - send 'split' for popup for existing user who see splited tax page for the 1 time
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxSplitTaxPopupForExistingUsersShownSmParams>} LogObject<taxSplitTaxPopupForExistingUsersShownSmParams>
 */
export function taxSplitTaxPopupForExistingUsersShownSm(params) {
    return {
        evid: 59,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnTabsInWidgetOaSrc10Evid590' event (evid: 590)
 *
 * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard
 *
 * @param {clickOnTabsInWidgetOaSrc10Evid590Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} tabName - recentlyUpdated / OutOfStock / hidden / topViewed
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product_list_widget / order_list_widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnTabsInWidgetOaSrc10Evid590Params>} LogObject<clickOnTabsInWidgetOaSrc10Evid590Params>
 */
export function clickOnTabsInWidgetOaSrc10Evid590(params) {
    return {
        evid: 590,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewDeleteCollectionModal' event (evid: 591)
 *
 * Event description: View delete collection modal.
 *
 * @param {viewDeleteCollectionModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - e.g. categories.list
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewDeleteCollectionModalParams>} LogObject<viewDeleteCollectionModalParams>
 */
export function viewDeleteCollectionModal(params) {
    return {
        evid: 591,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCollectionSm' event (evid: 592)
 *
 * Event description: Click 'delete' in 'delete collection' pop up
 *
 * @param {deleteCollectionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - e.g. categories.list
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteCollectionSmParams>} LogObject<deleteCollectionSmParams>
 */
export function deleteCollectionSm(params) {
    return {
        evid: 592,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addProductsToCollection' event (evid: 593)
 *
 * Event description: Add products to collection.
 *
 * @param {addProductsToCollectionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {number} category_count - number of collections
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfProducts - number of products added
 * @property {string} origin - origin of action by page name
 * @property {GUID} bi_token - msid
 * @return {LogObject<addProductsToCollectionParams>} LogObject<addProductsToCollectionParams>
 */
export function addProductsToCollection(params) {
    return {
        evid: 593,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'removeProductsFromCollection' event (evid: 594)
 *
 * Event description: When a user removes a product to collection.
 * They can remove many product from one collection with bulk action, or from many collections (product page / list).
 *
 * @param {removeProductsFromCollectionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {number} category_count - number of collections
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfProducts - number of products added
 * @property {string} origin - origin of action by page name
 * @property {GUID} bi_token - msid
 * @return {LogObject<removeProductsFromCollectionParams>} LogObject<removeProductsFromCollectionParams>
 */
export function removeProductsFromCollection(params) {
    return {
        evid: 594,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oaSfCustomizeProductGallery' event (evid: 595)
 *
 * Event description: when merchant clicks "Add" /"Save" in Add/Edit Product Gallery screen in Add/Edit Shop flow in Customize Member View
 *
 * @param {oaSfCustomizeProductGalleryParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} showFilter - true/false
 * @property {string} categoryId - id of collection
 * @property {string} filtersList - list of filters to show
 * @property {boolean} filterChanged - only for type = edit
 * @property {string} tab - tab
 * @property {boolean} collectionChanged - only for type = edit
 * @property {string} appName - app_name
 * @property {string} section - stores_products_grid_section / stores_products_carousel_section
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} layoutSettings - crop / fit
 * @property {string} collectionName - allProducts / spedific
 * @property {string} type - add /edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<oaSfCustomizeProductGalleryParams>} LogObject<oaSfCustomizeProductGalleryParams>
 */
export function oaSfCustomizeProductGallery(params) {
    return {
        evid: 595,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewShippingInfoModalSf' event (evid: 596)
 *
 * Event description: When the shipping modal loads, after the buyer clicks on shipping info link in one of the the SF components (not in cart).
 *
 * @param {viewShippingInfoModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @property {string} shippingRuleOptions - all the shipping types presented in the modal
 * @return {LogObject<viewShippingInfoModalSfParams>} LogObject<viewShippingInfoModalSfParams>
 */
export function viewShippingInfoModalSf(params) {
    return {
        evid: 596,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickShippingInfoLinkSf' event (evid: 597)
 *
 * Event description: When the buyer clicks on shipping info link in one of the the SF components (not in cart).
 *
 * @param {clickShippingInfoLinkSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickShippingInfoLinkSfParams>} LogObject<clickShippingInfoLinkSfParams>
 */
export function clickShippingInfoLinkSf(params) {
    return {
        evid: 597,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingAppsClickedOnExploreAppsSm' event (evid: 598)
 *
 * Event description: When the user clicks on "Explore Apps" in the shipping page.
 *
 * @param {shippingAppsClickedOnExploreAppsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingAppsClickedOnExploreAppsSmParams>} LogObject<shippingAppsClickedOnExploreAppsSmParams>
 */
export function shippingAppsClickedOnExploreAppsSm(params) {
    return {
        evid: 598,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionRemovedFromLiveSite' event (evid: 599)
 *
 * Event description: add description
 *
 * @param {collectionRemovedFromLiveSiteParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {number} category_count - category_count
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfProducts - number_of_products
 * @property {string} origin - origin of action by page name
 * @property {GUID} bi_token - msid
 * @return {LogObject<collectionRemovedFromLiveSiteParams>} LogObject<collectionRemovedFromLiveSiteParams>
 */
export function collectionRemovedFromLiveSite(params) {
    return {
        evid: 599,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnSplitTaxPopupForExistingUsersSm' event (evid: 60)
 *
 * Event description: a click on 'got it' or 'X'(closed the popup) in Split tax popup for existing users  (pop up for existing users who saved some nonzero tax rule and open tax page for the first time after Shipping&Tax page was splitted)
 *
 * @param {taxClickOnSplitTaxPopupForExistingUsersSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - send 'split' for popup for existing user who see splited tax page for the 1 time
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} value - send 'got_it' / 'closed'
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnSplitTaxPopupForExistingUsersSmParams>} LogObject<taxClickOnSplitTaxPopupForExistingUsersSmParams>
 */
export function taxClickOnSplitTaxPopupForExistingUsersSm(params) {
    return {
        evid: 60,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionsClickOnLearnMore' event (evid: 600)
 *
 * Event description: When the user clicks on "learn more" in stores BO that open a support article
 *
 * @param {collectionsClickOnLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - link, banner, modal etc.
 * @property {string} category - what is the article about? subscriptions, store policies, atc.
 * @property {string} pageName - page name in BO
 * @property {GUID} articleId - linked article id
 * @property {GUID} bi_token - msid
 * @return {LogObject<collectionsClickOnLearnMoreParams>} LogObject<collectionsClickOnLearnMoreParams>
 */
export function collectionsClickOnLearnMore(params) {
    return {
        evid: 600,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLogoutInCheckoutSf' event (evid: 601)
 *
 * Event description: when  site member clicks to logout in checkout, opening logout modal
 *
 * @param {clickLogoutInCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<clickLogoutInCheckoutSfParams>} LogObject<clickLogoutInCheckoutSfParams>
 */
export function clickLogoutInCheckoutSf(params) {
    return {
        evid: 601,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutLoadedSf' event (evid: 602)
 *
 * Event description: logout modal loaded in checkout after member presses logout
 *
 * @param {logoutModalInCheckoutLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<logoutModalInCheckoutLoadedSfParams>} LogObject<logoutModalInCheckoutLoadedSfParams>
 */
export function logoutModalInCheckoutLoadedSf(params) {
    return {
        evid: 602,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutClosedSf' event (evid: 603)
 *
 * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it
 *
 * @param {logoutModalInCheckoutClosedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<logoutModalInCheckoutClosedSfParams>} LogObject<logoutModalInCheckoutClosedSfParams>
 */
export function logoutModalInCheckoutClosedSf(params) {
    return {
        evid: 603,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnReturnToCheckoutInLogoutModalSf' event (evid: 604)
 *
 * Event description: When user clicked on more action button in product list
 *
 * @param {clickOnReturnToCheckoutInLogoutModalSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - store_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product list / product table
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnReturnToCheckoutInLogoutModalSfParams>} LogObject<clickOnReturnToCheckoutInLogoutModalSfParams>
 */
export function clickOnReturnToCheckoutInLogoutModalSf(params) {
    return {
        evid: 604,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickPromoteThisProductProductSm' event (evid: 605)
 *
 * Event description: When user clicked on "promote this product"
 *
 * @param {clickPromoteThisProductProductSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - store_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - products list / product page
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickPromoteThisProductProductSmParams>} LogObject<clickPromoteThisProductProductSmParams>
 */
export function clickPromoteThisProductProductSm(params) {
    return {
        evid: 605,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOn3Dots' event (evid: 607)
 *
 * Event description: user clicks on 3 dots in Orders screen
 *
 * @param {ordersClickOn3DotsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersClickOn3DotsParams>} LogObject<ordersClickOn3DotsParams>
 */
export function ordersClickOn3Dots(params) {
    return {
        evid: 607,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnHowToVideoInProductPageBo' event (evid: 608)
 *
 * Event description: when the user clicks on "how to video' from options card or options modal in product page
 *
 * @param {clickOnHowToVideoInProductPageBoParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - .
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - options_card, options_modal
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnHowToVideoInProductPageBoParams>} LogObject<clickOnHowToVideoInProductPageBoParams>
 */
export function clickOnHowToVideoInProductPageBo(params) {
    return {
        evid: 608,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createPromoVideoClickedSmProductPage' event (evid: 609)
 *
 * Event description: When the user clicks in product page on 'create promo video'
 *
 * @param {createPromoVideoClickedSmProductPageParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - appName
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page...
 * @property {GUID} bi_token - bi_token
 * @return {LogObject<createPromoVideoClickedSmProductPageParams>} LogObject<createPromoVideoClickedSmProductPageParams>
 */
export function createPromoVideoClickedSmProductPage(params) {
    return {
        evid: 609,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductDetailsSf' event (evid: 61)
 *
 * Event description: When clicking a product info title in the product page
 *
 * @param {clickOnProductDetailsSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isBlocks - is_blocks
 * @property {string} productId - product_guid
 * @property {string} type - product details type (tab, expand...)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductDetailsSfParams>} LogObject<clickOnProductDetailsSfParams>
 */
export function clickOnProductDetailsSf(params) {
    return {
        evid: 61,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLearnMoreInOrdersListEmptyState' event (evid: 610)
 *
 * Event description: When the user clicks on "learn more" (link to the KB) to the KB in the orders list page in the empty state (without premium).
 *
 * @param {clickLearnMoreInOrdersListEmptyStateParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} text - The clickable text
 * @property {boolean} isMerchant - is_merchant
 * @property {string} link - The KB link
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickLearnMoreInOrdersListEmptyStateParams>} LogObject<clickLearnMoreInOrdersListEmptyStateParams>
 */
export function clickLearnMoreInOrdersListEmptyState(params) {
    return {
        evid: 610,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCouponClickedSm' event (evid: 611)
 *
 * Event description: Add coupon clicked SM.
 *
 * @param {addCouponClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - home/promote card/ coupon list/
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<addCouponClickedSmParams>} LogObject<addCouponClickedSmParams>
 */
export function addCouponClickedSm(params) {
    return {
        evid: 611,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCouponSm' event (evid: 616)
 *
 * Event description: create coupon in store manager
 *
 * @param {createCouponSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} limitTo - limit to field in UI - min sub-total / all products / collection...
 * @property {string} guid - product/collection id for coupon usage
 * @property {string} appName - app_name
 * @property {number} minSubTotal - minimum order sub total for coupon usage
 * @property {string} componentId - replacing guid as string to avoid parsing issues (product/collection id for coupon usage)
 * @property {string} rule - for example - {buy:x , get:y}
 * @property {number} usageLimit - usage_limit
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - where the coupon was created from
 * @property {number} newValue_long - new Price - relevant for fixed price coupon
 * @property {string} productsLimit - json with list of products for coupon usage
 * @property {number} discountValue_long - discount_long (multiplied by 100,000)
 * @property {string} couponType - coupon_type
 * @property {GUID} userId - uuid
 * @property {number} minSubTotal_long - minimum order sub total for coupon usage (multiplied by 100,000)
 * @property {GUID} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @property {boolean} active - is_active
 * @property {string} newValue - new Price - relevant for fixed price coupon
 * @return {LogObject<createCouponSmParams>} LogObject<createCouponSmParams>
 */
export function createCouponSm(params) {
    return {
        evid: 616,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateCouponSm' event (evid: 617)
 *
 * Event description: update coupon in store manager
 *
 * @param {updateCouponSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} limitTo - limit to field in UI - min sub-total / all products / collection...
 * @property {string} guid - product/collection id for coupon usage
 * @property {string} appName - app_name
 * @property {number} minSubTotal - minimum order sub total for coupon usage
 * @property {string} componentId - replacing guid as string to avoid parsing issues (product/collection id for coupon usage)
 * @property {string} rule - for example - {buy:x , get:y}
 * @property {number} usageLimit - usage_limit
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} newValue_long - new Price - relevant for fixed price coupon
 * @property {string} productsLimit - json with list of products for coupon usage
 * @property {number} discountValue_long - discount_long (multiplied by 100,000)
 * @property {string} couponType - coupon_type
 * @property {number} minSubTotal_long - minimum order sub total for coupon usage (multiplied by 100,000)
 * @property {string} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @property {boolean} active - is_active
 * @property {string} newValue - new Price - relevant for fixed price coupon
 * @return {LogObject<updateCouponSmParams>} LogObject<updateCouponSmParams>
 */
export function updateCouponSm(params) {
    return {
        evid: 617,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCouponSm' event (evid: 618)
 *
 * Event description: delete coupon in store manager
 *
 * @param {deleteCouponSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteCouponSmParams>} LogObject<deleteCouponSmParams>
 */
export function deleteCouponSm(params) {
    return {
        evid: 618,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'duplicateCouponSm' event (evid: 619)
 *
 * Event description: create coupon in store manager
 *
 * @param {duplicateCouponSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} limitTo - limit to field in UI - all products / specific product/specific collection/ min sub-total
 * @property {string} guid - product/collection id for coupon usage
 * @property {string} appName - app_name
 * @property {string} rule - for example - {buy:x , get:y}
 * @property {number} usageLimit - usage_limit
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} newValue_long - new Price - relevant for fixed price coupon  (multiplied by 100,000)
 * @property {number} discountValue_long - discount_long (multiplied by 100,000)
 * @property {string} couponType - coupon_type
 * @property {number} minSubTotal_long - minimum order sub total for coupon usage (multiplied by 100,000)
 * @property {GUID} couponId - coupon_id
 * @property {string} origCouponId - original_coupon_id
 * @property {GUID} bi_token - msid
 * @property {boolean} active - is_active
 * @return {LogObject<duplicateCouponSmParams>} LogObject<duplicateCouponSmParams>
 */
export function duplicateCouponSm(params) {
    return {
        evid: 619,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'socialButtons' event (evid: 62)
 *
 * Event description: when a buyer clicks on the social buttons in the product page
 *
 * @param {socialButtonsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - button
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isBlocks - is_blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<socialButtonsParams>} LogObject<socialButtonsParams>
 */
export function socialButtons(params) {
    return {
        evid: 62,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'activateDeactivateCouponSm' event (evid: 620)
 *
 * Event description: enable / disable a coupon in SM
 *
 * @param {activateDeactivateCouponSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} limitTo - limit to field in UI - all products / specific product/specific collection/ min sub-total
 * @property {string} guid - product/collection id for coupon usage
 * @property {string} appName - app_name
 * @property {string} rule - for example - {buy:x , get:y}
 * @property {number} usageLimit - usage_limit
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} newValue_long - new Price - relevant for fixed price coupon  (multiplied by 100,000)
 * @property {number} discountValue_long - discount_long (multiplied by 100,000)
 * @property {string} couponType - coupon_type
 * @property {GUID} userId - uuid
 * @property {number} minSubTotal_long - minimum order sub total for coupon usage (multiplied by 100,000)
 * @property {string} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @property {boolean} active - is_active
 * @return {LogObject<activateDeactivateCouponSmParams>} LogObject<activateDeactivateCouponSmParams>
 */
export function activateDeactivateCouponSm(params) {
    return {
        evid: 620,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideExpieredCouponsSm' event (evid: 621)
 *
 * Event description: Show/Hide expired coupons
 *
 * @param {showHideExpieredCouponsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} status - true for enable false for disabled
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideExpieredCouponsSmParams>} LogObject<showHideExpieredCouponsSmParams>
 */
export function showHideExpieredCouponsSm(params) {
    return {
        evid: 621,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editCouponClickedSm' event (evid: 622)
 *
 * Event description: edit coupon clicked SM
 *
 * @param {editCouponClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} couponId - couponId
 * @property {GUID} bi_token - msid
 * @return {LogObject<editCouponClickedSmParams>} LogObject<editCouponClickedSmParams>
 */
export function editCouponClickedSm(params) {
    return {
        evid: 622,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageOptionsRenderedSm' event (evid: 623)
 *
 * Event description: When manage pop up in product is rendered
 *
 * @param {manageOptionsRenderedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - storeManagerApp
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - product_option / ribbon
 * @property {number} number_of_items - number of lists shown
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageOptionsRenderedSmParams>} LogObject<manageOptionsRenderedSmParams>
 */
export function manageOptionsRenderedSm(params) {
    return {
        evid: 623,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveManageOptionsSm' event (evid: 624)
 *
 * Event description: When user clicked on save  of manage options pop up in product
 *
 * @param {saveManageOptionsSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} is_edited - if the user edited at least one list (edit text)
 * @property {string} appName - storeManagerApp
 * @property {boolean} is_deleted - if the user deleted at least one list
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - product_options / ribbon
 * @property {number} number_of_items - number of lists shown after save
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveManageOptionsSmParams>} LogObject<saveManageOptionsSmParams>
 */
export function saveManageOptionsSm(params) {
    return {
        evid: 624,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpEditTimeSlot' event (evid: 625)
 *
 * Event description: When a user clicks on add/delete time slot
 *
 * @param {sdpEditTimeSlotParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - delete/add
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpEditTimeSlotParams>} LogObject<sdpEditTimeSlotParams>
 */
export function sdpEditTimeSlot(params) {
    return {
        evid: 625,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageOaRemoveModifiersOptionFromProductSrc10Evid626' event (evid: 626)
 *
 * Event description: Fired when the user clicks to remove modifiers/options from the product.
 *
 * @param {productPageOaRemoveModifiersOptionFromProductSrc10Evid626Params} params - The parameters for this event
 * @property {string} entity - modifier / option
 * @property {GUID} id - modifier/option id. If creating new then null
 * @property {string} name - modifier / option  name
 * @property {string} productName - Name of the product .  If new product send null
 * @property {string} productGuid - The id of the relevant product.  If new product send null
 * @return {LogObject<productPageOaRemoveModifiersOptionFromProductSrc10Evid626Params>} LogObject<productPageOaRemoveModifiersOptionFromProductSrc10Evid626Params>
 */
export function productPageOaRemoveModifiersOptionFromProductSrc10Evid626(params) {
    return {
        evid: 626,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionShoppingWeightModalShown' event (evid: 627)
 *
 * Event description: when the shipping weight bulk action modal is shown
 *
 * @param {bulkActionShoppingWeightModalShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - number of products the user selected to set new shipping weight
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionShoppingWeightModalShownParams>} LogObject<bulkActionShoppingWeightModalShownParams>
 */
export function bulkActionShoppingWeightModalShown(params) {
    return {
        evid: 627,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowFitnessCollectionClickOnCarrousel' event (evid: 628)
 *
 * Event description: Is the user scroll right or left to view other products
 *
 * @param {fitnessDropshippingFlowFitnessCollectionClickOnCarrouselParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} ds_collection_id - collection id from drop shipping
 * @property {string} productList - The list of products id shown by the user, separated by comma
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} side_chose - right / left
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowFitnessCollectionClickOnCarrouselParams>} LogObject<fitnessDropshippingFlowFitnessCollectionClickOnCarrouselParams>
 */
export function fitnessDropshippingFlowFitnessCollectionClickOnCarrousel(params) {
    return {
        evid: 628,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowFitnessCollectionViewCollection' event (evid: 629)
 *
 * Event description: Is the user view the collection?
 *
 * @param {fitnessDropshippingFlowFitnessCollectionViewCollectionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} ds_collection_id - collection id from drop shipping
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {DateTime} time_on_widget - How much time the user view the collection
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowFitnessCollectionViewCollectionParams>} LogObject<fitnessDropshippingFlowFitnessCollectionViewCollectionParams>
 */
export function fitnessDropshippingFlowFitnessCollectionViewCollection(params) {
    return {
        evid: 629,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCartSf' event (evid: 63)
 *
 * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'
 *
 * @param {clickOnAddToCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {string} viewMode - editor / site / preview
 * @property {number} quantity - count
 * @property {string} buttonType - button_type
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} impressionId - impression_id
 * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
 * @property {GUID} owner_id - owner_id
 * @property {number} rank - rank
 * @property {string} navigationClick - mini-cart / cart  / none / checkout
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - button
 * @property {string} options - a json containing the options selected for the product
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {string} galleryProductsLogic - gallery_products_logic
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddToCartSfParams>} LogObject<clickOnAddToCartSfParams>
 */
export function clickOnAddToCartSf(params) {
    return {
        evid: 63,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createEditCouponsModalRenderedSf' event (evid: 630)
 *
 * Event description: Create/Edit/Duplicate Coupon modal rendered
 *
 * @param {createEditCouponsModalRenderedSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} loadingTime - loading time from start (millisec)
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} type - Create / Edit / Duplicate
 * @property {GUID} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<createEditCouponsModalRenderedSfParams>} LogObject<createEditCouponsModalRenderedSfParams>
 */
export function createEditCouponsModalRenderedSf(params) {
    return {
        evid: 630,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createEditCouponsModalStartLoadingSf' event (evid: 631)
 *
 * Event description: After the merchant click to create/update/edit Coupon the component start loading
 *
 * @param {createEditCouponsModalStartLoadingSfParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} type - Create / Edit / Duplicate
 * @property {GUID} couponId - coupon_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<createEditCouponsModalStartLoadingSfParams>} LogObject<createEditCouponsModalStartLoadingSfParams>
 */
export function createEditCouponsModalStartLoadingSf(params) {
    return {
        evid: 631,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowFitnessCollectionExitFromPreview' event (evid: 632)
 *
 * Event description: What the user select from product preview ? (exit / right product / left product)
 *
 * @param {fitnessDropshippingFlowFitnessCollectionExitFromPreviewParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} next_product_guid - product id of the right/left selection (Null if exit)
 * @property {string} collection_productGuid - collection products guid
 * @property {string} action - exit/ right/ left
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowFitnessCollectionExitFromPreviewParams>} LogObject<fitnessDropshippingFlowFitnessCollectionExitFromPreviewParams>
 */
export function fitnessDropshippingFlowFitnessCollectionExitFromPreview(params) {
    return {
        evid: 632,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowFitnessCollectionError' event (evid: 633)
 *
 * Event description: exceeded the maximum number of products selected
 *
 * @param {fitnessDropshippingFlowFitnessCollectionErrorParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} max_valueInt - The maximum number of products the user can add
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} valueInt - The number of products the user added
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowFitnessCollectionErrorParams>} LogObject<fitnessDropshippingFlowFitnessCollectionErrorParams>
 */
export function fitnessDropshippingFlowFitnessCollectionError(params) {
    return {
        evid: 633,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowFitnessCollectionClickOnSaveContinue' event (evid: 634)
 *
 * Event description: Click on “Save & Continue” buttom
 *
 * @param {fitnessDropshippingFlowFitnessCollectionClickOnSaveContinueParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} num_of_products - The number of products the user saved
 * @property {string} productList - The list of products id selected by the user, separated by comma
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowFitnessCollectionClickOnSaveContinueParams>} LogObject<fitnessDropshippingFlowFitnessCollectionClickOnSaveContinueParams>
 */
export function fitnessDropshippingFlowFitnessCollectionClickOnSaveContinue(params) {
    return {
        evid: 634,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListFilterOpened' event (evid: 635)
 *
 * Event description: When user clicked to open filter list
 *
 * @param {productListFilterOpenedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - store_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - filter / create view
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListFilterOpenedParams>} LogObject<productListFilterOpenedParams>
 */
export function productListFilterOpened(params) {
    return {
        evid: 635,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListFilterClosed' event (evid: 636)
 *
 * Event description: When user clicked to close filter list
 *
 * @param {productListFilterClosedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListFilterClosedParams>} LogObject<productListFilterClosedParams>
 */
export function productListFilterClosed(params) {
    return {
        evid: 636,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fitnessDropshippingFlowProductsAddedModalClickOnGoToProducts' event (evid: 637)
 *
 * Event description: is the user clicked on “Go to products”
 *
 * @param {fitnessDropshippingFlowProductsAddedModalClickOnGoToProductsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<fitnessDropshippingFlowProductsAddedModalClickOnGoToProductsParams>} LogObject<fitnessDropshippingFlowProductsAddedModalClickOnGoToProductsParams>
 */
export function fitnessDropshippingFlowProductsAddedModalClickOnGoToProducts(params) {
    return {
        evid: 637,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListFilterSaveThisViewClicked' event (evid: 638)
 *
 * Event description: When user clicked save this view
 *
 * @param {productListFilterSaveThisViewClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - store_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - filter panel / product list
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListFilterSaveThisViewClickedParams>} LogObject<productListFilterSaveThisViewClickedParams>
 */
export function productListFilterSaveThisViewClicked(params) {
    return {
        evid: 638,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersListLoadingMoreRows' event (evid: 639)
 *
 * Event description: When the user loads more rows to the orders list table.
 *
 * @param {ordersListLoadingMoreRowsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} numberOfLoadedItems - Number of items who were loaded to the table in the current loading
 * @property {string} appName - app_name
 * @property {string} numberOfOriginalItems - Number of items in the table before the current loading
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersListLoadingMoreRowsParams>} LogObject<ordersListLoadingMoreRowsParams>
 */
export function ordersListLoadingMoreRows(params) {
    return {
        evid: 639,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToViewProductVelo' event (evid: 640)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {clickToViewProductVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {string} model - the model shown in the slider gallery
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} rank - The ranking of the product in the gallery
 * @property {string} product_title - product_title
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewProductVeloParams>} LogObject<clickToViewProductVeloParams>
 */
export function clickToViewProductVelo(params) {
    return {
        evid: 640,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProductQuickViewVelo' event (evid: 641)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {clickOnProductQuickViewVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {string} model - model of the recommended products
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} rank - The ranking of the product in the gallery
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductQuickViewVeloParams>} LogObject<clickOnProductQuickViewVeloParams>
 */
export function clickOnProductQuickViewVelo(params) {
    return {
        evid: 641,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewVeloGallery' event (evid: 642)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {viewVeloGalleryParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - product_list
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} galleryInputId - the product_guid the we present the recommendation for
 * @property {string} productsLogic - the logic of product recommendation that is presented in the gallery
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewVeloGalleryParams>} LogObject<viewVeloGalleryParams>
 */
export function viewVeloGallery(params) {
    return {
        evid: 642,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChangeOrderStatusOaSrc10Evid643' event (evid: 643)
 *
 * Event description: user clicks to mark order as paid / fulfilled
 *
 * @param {clickToChangeOrderStatusOaSrc10Evid643Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - bottom panel / manage order / fulfill modal
 * @property {string} statusType - payment / shipping
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToChangeOrderStatusOaSrc10Evid643Params>} LogObject<clickToChangeOrderStatusOaSrc10Evid643Params>
 */
export function clickToChangeOrderStatusOaSrc10Evid643(params) {
    return {
        evid: 643,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportCsvModalOpenSm' event (evid: 644)
 *
 * Event description: When the export order new window opens
 *
 * @param {exportCsvModalOpenSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} columns - A list with the columns that was marked when the modal opened
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportCsvModalOpenSmParams>} LogObject<exportCsvModalOpenSmParams>
 */
export function exportCsvModalOpenSm(params) {
    return {
        evid: 644,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportCsvApprovedClickedSm' event (evid: 645)
 *
 * Event description: When the user approves the export in the modal
 *
 * @param {exportCsvApprovedClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<exportCsvApprovedClickedSmParams>} LogObject<exportCsvApprovedClickedSmParams>
 */
export function exportCsvApprovedClickedSm(params) {
    return {
        evid: 645,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'diwmClickOnStartGuide' event (evid: 646)
 *
 * Event description: When the user clicks on "start guide" for the do it with me tool in a Store's component (for now only in shipping list page).
 *
 * @param {diwmClickOnStartGuideParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - list = product list / product page
 * @property {string} type - shipping / storesAddProduct
 * @property {GUID} bi_token - msid
 * @return {LogObject<diwmClickOnStartGuideParams>} LogObject<diwmClickOnStartGuideParams>
 */
export function diwmClickOnStartGuide(params) {
    return {
        evid: 646,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'diwmClickToRemove' event (evid: 647)
 *
 * Event description: When the user clicks on "X" for the do it with me tool in a Store's component (for now only in shipping list page).
 *
 * @param {diwmClickToRemoveParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - The type of the tool. For now only “shipping”
 * @property {GUID} bi_token - msid
 * @return {LogObject<diwmClickToRemoveParams>} LogObject<diwmClickToRemoveParams>
 */
export function diwmClickToRemove(params) {
    return {
        evid: 647,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersListLoadedSm' event (evid: 648)
 *
 * Event description: When the orders list is being loaded in the order list page (when page is loading/more orders load/filter applied/views applied etc...)
 *
 * @param {ordersListLoadedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} viewId - The id of the view that is applied on the table - TBD
 * @property {number} numberOfOrders - The number of orders that are shown in the table.
 * @property {string} viewName - The name of the view that is applied on the table - TBD
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} filtersApplied - A list of filter’s categories that applies on the table
 * @property {string} columns - A list of the columns that are shown to the user
 * @property {string} sources - source
 * @property {string} action - The action that triggered the loading of the list (page loading, load more orders, filter change etc...) - TBD
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersListLoadedSmParams>} LogObject<ordersListLoadedSmParams>
 */
export function ordersListLoadedSm(params) {
    return {
        evid: 648,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnMediaItemOa' event (evid: 649)
 *
 * Event description: User Clicks on Media item OA (to opens full screen of media)
 *
 * @param {clickOnMediaItemOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product_screen / manage_media_screen
 * @property {string} itemId - media item_id
 * @property {string} productId - product
 * @property {GUID} bi_token - msid
 * @property {string} item - image / video
 * @return {LogObject<clickOnMediaItemOaParams>} LogObject<clickOnMediaItemOaParams>
 */
export function clickOnMediaItemOa(params) {
    return {
        evid: 649,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAvalaraPopupShownSm' event (evid: 65)
 *
 * Event description: pop up for user who chooses Automated tax calculation shown (in it user should create his Avalara account. creating of account has 6 phases: welcome popup/personal_details/loader/success)
 *
 * @param {taxAvalaraPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - welcome/personal_details/loader/success
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - empty_state/ switch_to_auto /in_progress
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxAvalaraPopupShownSmParams>} LogObject<taxAvalaraPopupShownSmParams>
 */
export function taxAvalaraPopupShownSm(params) {
    return {
        evid: 65,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'mediaItemDeletedOa' event (evid: 650)
 *
 * Event description: media item deleted from product successfully in All media
 *
 * @param {mediaItemDeletedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} itemIds - list of media item_ids
 * @property {string} productId - product
 * @property {GUID} bi_token - msid
 * @return {LogObject<mediaItemDeletedOaParams>} LogObject<mediaItemDeletedOaParams>
 */
export function mediaItemDeletedOa(params) {
    return {
        evid: 650,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeModuleOaError' event (evid: 651)
 *
 * Event description: When user gets an errorin Sstore module (merchant)
 *
 * @param {storeModuleOaErrorParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} errorMessage - error mesage
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - product id
 * @property {string} origin - product_screen
 * @property {string} type - validation / exceed limit / etc
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeModuleOaErrorParams>} LogObject<storeModuleOaErrorParams>
 */
export function storeModuleOaError(params) {
    return {
        evid: 651,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnKbInStoreSettings' event (evid: 652)
 *
 * Event description: in settings tab - Click on KB in store settings
 *
 * @param {clickOnKbInStoreSettingsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} userId - uuid
 * @property {GUID} articleId - the KB article id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnKbInStoreSettingsParams>} LogObject<clickOnKbInStoreSettingsParams>
 */
export function clickOnKbInStoreSettings(params) {
    return {
        evid: 652,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'minimumOrderMessageIsShownInCart' event (evid: 653)
 *
 * Event description: Minimum order message is shown in cart
 *
 * @param {minimumOrderMessageIsShownInCartParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderMessageIsShownInCartParams>} LogObject<minimumOrderMessageIsShownInCartParams>
 */
export function minimumOrderMessageIsShownInCart(params) {
    return {
        evid: 653,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'minimumOrderModalIsShownInCheckout' event (evid: 654)
 *
 * Event description: Minimum order modal is shown in checkout.
 *
 * @param {minimumOrderModalIsShownInCheckoutParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - minimum_value_long
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} hasPickup - has_pickup
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderModalIsShownInCheckoutParams>} LogObject<minimumOrderModalIsShownInCheckoutParams>
 */
export function minimumOrderModalIsShownInCheckout(params) {
    return {
        evid: 654,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'minimumOrderClickOnGotItInErrorModalInCheckout' event (evid: 655)
 *
 * Event description: Minimum order - click on ‘got it’ in error modal in checkout
 *
 * @param {minimumOrderClickOnGotItInErrorModalInCheckoutParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderClickOnGotItInErrorModalInCheckoutParams>} LogObject<minimumOrderClickOnGotItInErrorModalInCheckoutParams>
 */
export function minimumOrderClickOnGotItInErrorModalInCheckout(params) {
    return {
        evid: 655,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickToOpenViewsListSrc10Evid656' event (evid: 656)
 *
 * Event description: When the user clicks to open the views list
 *
 * @param {ordersViewsClickToOpenViewsListSrc10Evid656Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickToOpenViewsListSrc10Evid656Params>} LogObject<ordersViewsClickToOpenViewsListSrc10Evid656Params>
 */
export function ordersViewsClickToOpenViewsListSrc10Evid656(params) {
    return {
        evid: 656,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnASpecificViewSrc10Evid657' event (evid: 657)
 *
 * Event description: When clicks on a specific view:
 *
 * @param {ordersViewsClickOnASpecificViewSrc10Evid657Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewId - view_id
 * @property {string} name - name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} filters - a list of the filters applied, separated by “ , “ for example: "salesChannels,archiveStatus,paymentStatus"
 * @property {string} sort - sort
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickOnASpecificViewSrc10Evid657Params>} LogObject<ordersViewsClickOnASpecificViewSrc10Evid657Params>
 */
export function ordersViewsClickOnASpecificViewSrc10Evid657(params) {
    return {
        evid: 657,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnCreateNewViewSrc10Evid658' event (evid: 658)
 *
 * Event description: When the user clicks on “create new view”
 *
 * @param {ordersViewsClickOnCreateNewViewSrc10Evid658Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickOnCreateNewViewSrc10Evid658Params>} LogObject<ordersViewsClickOnCreateNewViewSrc10Evid658Params>
 */
export function ordersViewsClickOnCreateNewViewSrc10Evid658(params) {
    return {
        evid: 658,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnSaveThisViewSrc10Evid659' event (evid: 659)
 *
 * Event description: When the user clicks on “save this view
 *
 * @param {ordersViewsClickOnSaveThisViewSrc10Evid659Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} origin - origin
 * @property {string} filters - a list of the filters applied, separated by “ , “.  for example:"salesChannels,archiveStatus,paymentStatus"
 * @property {string} sort - a list of Jsons with: [{name: <column name>, type: <asc/desc>}, {name:..., type:....}....]
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickOnSaveThisViewSrc10Evid659Params>} LogObject<ordersViewsClickOnSaveThisViewSrc10Evid659Params>
 */
export function ordersViewsClickOnSaveThisViewSrc10Evid659(params) {
    return {
        evid: 659,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAvalaraPopupSm' event (evid: 66)
 *
 * Event description: a click in Avalara popup on button or "X" (close) : in welcome popup options are close/continue; in personal_details options are close/back/continue (in SM "Create Account"); in loader popups only close ; in success popup close/continue (in SM"Done")
 *
 * @param {taxClickOnAvalaraPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - welcome/personal_details/success
 * @property {string} appName - app_name
 * @property {string} taxState - state of future default Nexus
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} taxCountry - country of future deafult Nexus
 * @property {string} value - close/back/continue
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnAvalaraPopupSmParams>} LogObject<taxClickOnAvalaraPopupSmParams>
 */
export function taxClickOnAvalaraPopupSm(params) {
    return {
        evid: 66,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsViewCreatedSrc10Evid660' event (evid: 660)
 *
 * Event description: When the user save a new view
 *
 * @param {ordersViewsViewCreatedSrc10Evid660Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewId - view_id
 * @property {string} name - the name of the view
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} filters - a list of the filters applied, separated by “ , “ for example: "salesChannels,archiveStatus,paymentStatus"
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsViewCreatedSrc10Evid660Params>} LogObject<ordersViewsViewCreatedSrc10Evid660Params>
 */
export function ordersViewsViewCreatedSrc10Evid660(params) {
    return {
        evid: 660,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentGatewayActivatedSm' event (evid: 661)
 *
 * Event description: payment gateway activated SM.
 *
 * @param {paymentGatewayActivatedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentGatewayActivatedSmParams>} LogObject<paymentGatewayActivatedSmParams>
 */
export function paymentGatewayActivatedSm(params) {
    return {
        evid: 661,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentGatewayDeActivatedSm' event (evid: 662)
 *
 * Event description: payment gateway de-activated SM.
 *
 * @param {paymentGatewayDeActivatedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentGatewayDeActivatedSmParams>} LogObject<paymentGatewayDeActivatedSmParams>
 */
export function paymentGatewayDeActivatedSm(params) {
    return {
        evid: 662,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentMethodUpdated' event (evid: 663)
 *
 * Event description: payment method updated.
 *
 * @param {paymentMethodUpdatedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentMethodUpdatedParams>} LogObject<paymentMethodUpdatedParams>
 */
export function paymentMethodUpdated(params) {
    return {
        evid: 663,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'closePaymentMethodModal' event (evid: 664)
 *
 * Event description: Close payment method modal.
 *
 * @param {closePaymentMethodModalParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive status
 * @property {GUID} bi_token - msid
 * @return {LogObject<closePaymentMethodModalParams>} LogObject<closePaymentMethodModalParams>
 */
export function closePaymentMethodModal(params) {
    return {
        evid: 664,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentMethodSignupClick' event (evid: 665)
 *
 * Event description: Payment method signup click.
 *
 * @param {paymentMethodSignupClickParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentMethodSignupClickParams>} LogObject<paymentMethodSignupClickParams>
 */
export function paymentMethodSignupClick(params) {
    return {
        evid: 665,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListFilterFilterViewSaved' event (evid: 666)
 *
 * Event description: When user save in save view modal
 *
 * @param {productListFilterFilterViewSavedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewName - name of the saved view
 * @property {string} appName - app_name
 * @property {GUID} uuid - store_id
 * @property {string} filterStatus - info of all filter that effects the product list in the saved view
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListFilterFilterViewSavedParams>} LogObject<productListFilterFilterViewSavedParams>
 */
export function productListFilterFilterViewSaved(params) {
    return {
        evid: 666,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentForgotLoginDetailsClickSm' event (evid: 667)
 *
 * Event description: Payment forgot login details click SM.
 *
 * @param {paymentForgotLoginDetailsClickSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive status
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentForgotLoginDetailsClickSmParams>} LogObject<paymentForgotLoginDetailsClickSmParams>
 */
export function paymentForgotLoginDetailsClickSm(params) {
    return {
        evid: 667,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChoseFlowTypeForTaxCalculationSm' event (evid: 67)
 *
 * Event description: When new user first opens Tax Tab (empty state) and clicks to use specific flow type of calculating tax (with avalara or manual)
 *
 * @param {taxChoseFlowTypeForTaxCalculationSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - chosen flow type: avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxChoseFlowTypeForTaxCalculationSmParams>} LogObject<taxChoseFlowTypeForTaxCalculationSmParams>
 */
export function taxChoseFlowTypeForTaxCalculationSm(params) {
    return {
        evid: 67,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'getPaidViaAPaymentMethodSm' event (evid: 670)
 *
 * Event description: Get paid via a payment method SM.
 *
 * @param {getPaidViaAPaymentMethodSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<getPaidViaAPaymentMethodSmParams>} LogObject<getPaidViaAPaymentMethodSmParams>
 */
export function getPaidViaAPaymentMethodSm(params) {
    return {
        evid: 670,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editPaymentMethodSm' event (evid: 671)
 *
 * Event description: Edit payment method SM.
 *
 * @param {editPaymentMethodSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} paymentMethod - payment_type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<editPaymentMethodSmParams>} LogObject<editPaymentMethodSmParams>
 */
export function editPaymentMethodSm(params) {
    return {
        evid: 671,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'loginToPaymentGatewaySm' event (evid: 672)
 *
 * Event description: click on 'Connect an existing account' in modal
 *
 * @param {loginToPaymentGatewaySmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step 1 is when the payment is not activated and  step 2 is when the payment is activestep 3 is when the payment need another costume step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - paymentType
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<loginToPaymentGatewaySmParams>} LogObject<loginToPaymentGatewaySmParams>
 */
export function loginToPaymentGatewaySm(params) {
    return {
        evid: 672,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectToPaymentTypeSm' event (evid: 673)
 *
 * Event description: when merchant chooses a payment type (group of providers like 'credit card')
 *
 * @param {connectToPaymentTypeSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} paymentType - credit card
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<connectToPaymentTypeSmParams>} LogObject<connectToPaymentTypeSmParams>
 */
export function connectToPaymentTypeSm(params) {
    return {
        evid: 673,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentsClickOnContactGatewaySupportSm' event (evid: 675)
 *
 * Event description: click on 'Contact support' in payment modal this event will replace event number 668
 *
 * @param {paymentsClickOnContactGatewaySupportSmParams} params - The parameters for this event
 * @property {GUID} userId - userId
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} step - step
 * @property {string} appName - app_name
 * @property {string} paymentMethod - auth.net / paypal / stripe...
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isActive - isActive
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentsClickOnContactGatewaySupportSmParams>} LogObject<paymentsClickOnContactGatewaySupportSmParams>
 */
export function paymentsClickOnContactGatewaySupportSm(params) {
    return {
        evid: 675,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListFilterDeleteViewClicked' event (evid: 676)
 *
 * Event description: When user delete view in delete view modal
 *
 * @param {productListFilterDeleteViewClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewName - name of the deleted view
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} filterStatus - info of all filter that effected the product list in the deleted view
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListFilterDeleteViewClickedParams>} LogObject<productListFilterDeleteViewClickedParams>
 */
export function productListFilterDeleteViewClicked(params) {
    return {
        evid: 676,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'copyOfBulkActionShoppingWeightSaveClicked' event (evid: 677)
 *
 * Event description: when user clicks save to save an update in shipping weight
 *
 * @param {copyOfBulkActionShoppingWeightSaveClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} shippingWeight - the updated weight (need to be Int so multiply by 100000 the original value)
 * @property {number} numProducts - number of products the user selected to set new shipping weight
 * @property {GUID} bi_token - msid
 * @return {LogObject<copyOfBulkActionShoppingWeightSaveClickedParams>} LogObject<copyOfBulkActionShoppingWeightSaveClickedParams>
 */
export function copyOfBulkActionShoppingWeightSaveClicked(params) {
    return {
        evid: 677,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickToDeleteViewSrc10Evid678' event (evid: 678)
 *
 * Event description: When the user clicks to delete a view
 *
 * @param {ordersViewsClickToDeleteViewSrc10Evid678Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewId - view_id
 * @property {string} name - the name of the view
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickToDeleteViewSrc10Evid678Params>} LogObject<ordersViewsClickToDeleteViewSrc10Evid678Params>
 */
export function ordersViewsClickToDeleteViewSrc10Evid678(params) {
    return {
        evid: 678,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionShoppingWeightSuccessToastShown' event (evid: 679)
 *
 * Event description: fired when the success toast is shown
 *
 * @param {bulkActionShoppingWeightSuccessToastShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numProducts - number of products that their shipping weight was changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionShoppingWeightSuccessToastShownParams>} LogObject<bulkActionShoppingWeightSuccessToastShownParams>
 */
export function bulkActionShoppingWeightSuccessToastShown(params) {
    return {
        evid: 679,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxSwitchFlowTypeForTaxCalculationSm' event (evid: 68)
 *
 * Event description: When clicks on "Switch to manual"/"Switch to Automated tax" to change the flow type (in case of swithching from avalara to manual  - after confirming in Warning popup)
 *
 * @param {taxSwitchFlowTypeForTaxCalculationSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} needsOnboarding - true - if user clicks "Switch to Auto" and doesn't have Avalara account yet, in all other cases - false
 * @property {string} flowType - chosen flow type: avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - button / tooltip
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxSwitchFlowTypeForTaxCalculationSmParams>} LogObject<taxSwitchFlowTypeForTaxCalculationSmParams>
 */
export function taxSwitchFlowTypeForTaxCalculationSm(params) {
    return {
        evid: 68,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionShoppingWeightFailedToastShown' event (evid: 680)
 *
 * Event description: fired when the success toast is shown
 *
 * @param {bulkActionShoppingWeightFailedToastShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numProducts - number of products that their shipping weight was changed
 * @property {string} type - technical issue / weight error
 * @property {GUID} bi_token - msid
 * @return {LogObject<bulkActionShoppingWeightFailedToastShownParams>} LogObject<bulkActionShoppingWeightFailedToastShownParams>
 */
export function bulkActionShoppingWeightFailedToastShown(params) {
    return {
        evid: 680,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsViewDeletedSrc10Evid681' event (evid: 681)
 *
 * Event description: When the user approves the deletion of a view
 *
 * @param {ordersViewsViewDeletedSrc10Evid681Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} viewId - view_id
 * @property {string} name - The name of the view
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsViewDeletedSrc10Evid681Params>} LogObject<ordersViewsViewDeletedSrc10Evid681Params>
 */
export function ordersViewsViewDeletedSrc10Evid681(params) {
    return {
        evid: 681,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnCreateNewOrderSm' event (evid: 682)
 *
 * Event description: When the user clicks on “+Add New Order” in the Orders list page:
 *
 * @param {manualOrderClickOnCreateNewOrderSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderClickOnCreateNewOrderSmParams>} LogObject<manualOrderClickOnCreateNewOrderSmParams>
 */
export function manualOrderClickOnCreateNewOrderSm(params) {
    return {
        evid: 682,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnAddItemSm' event (evid: 683)
 *
 * Event description: User clicks on "Add Product"  or on "Add custom item" on the New Order page.
 *
 * @param {manualOrderClickOnAddItemSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isCustomItem - is_custom_item
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderClickOnAddItemSmParams>} LogObject<manualOrderClickOnAddItemSmParams>
 */
export function manualOrderClickOnAddItemSm(params) {
    return {
        evid: 683,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnAddToAddProductsSm' event (evid: 684)
 *
 * Event description: User clicks on "Add" in the add product section
 *
 * @param {manualOrderClickOnAddToAddProductsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderClickOnAddToAddProductsSmParams>} LogObject<manualOrderClickOnAddToAddProductsSmParams>
 */
export function manualOrderClickOnAddToAddProductsSm(params) {
    return {
        evid: 684,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderVariantAddedSm' event (evid: 685)
 *
 * Event description: User choose variant for a product in the items section
 *
 * @param {manualOrderVariantAddedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderVariantAddedSmParams>} LogObject<manualOrderVariantAddedSmParams>
 */
export function manualOrderVariantAddedSm(params) {
    return {
        evid: 685,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnAddCustomItemSm' event (evid: 686)
 *
 * Event description: When the user clicks on “Add” in the add custom Item section:
 *
 * @param {manualOrderClickOnAddCustomItemSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isShippable - True = ”This item is shippable” is checked
 * @property {string} appName - app_name
 * @property {number} price - The price of the item (*100000)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} title - Title of the Custom Item
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderClickOnAddCustomItemSmParams>} LogObject<manualOrderClickOnAddCustomItemSmParams>
 */
export function manualOrderClickOnAddCustomItemSm(params) {
    return {
        evid: 686,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnEditCustomerSm' event (evid: 687)
 *
 * Event description: When the user clicked on “edit customer”:
 *
 * @param {manualOrderClickOnEditCustomerSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} contactId - Contact id of the customer that have been edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderClickOnEditCustomerSmParams>} LogObject<manualOrderClickOnEditCustomerSmParams>
 */
export function manualOrderClickOnEditCustomerSm(params) {
    return {
        evid: 687,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderDiscountSavedSm' event (evid: 688)
 *
 * Event description: when the user clicks on "Apply" in the discount section and adds a discount to the orders.
 *
 * @param {manualOrderDiscountSavedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {number} discountasAmount - The number that the users entered
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} type - flat/Percent
 * @property {string} discountDescription - The discount description that the user entered
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderDiscountSavedSmParams>} LogObject<manualOrderDiscountSavedSmParams>
 */
export function manualOrderDiscountSavedSm(params) {
    return {
        evid: 688,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderTaxCheckedSm' event (evid: 689)
 *
 * Event description: When the user checked on “Add Tax” (both to add and to remove).
 *
 * @param {manualOrderTaxCheckedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {boolean} checkTaxtype - True = Add tax False = remove tax
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderTaxCheckedSmParams>} LogObject<manualOrderTaxCheckedSmParams>
 */
export function manualOrderTaxCheckedSm(params) {
    return {
        evid: 689,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterInStoresOa' event (evid: 69)
 *
 * Event description: when user applies filter in Stores (orders, products, coupons) Screen OneApp or POS OneApp
 *
 * @param {clickOnFilterInStoresOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} productsFiltered - number of products filtered by in Order filter
 * @property {DateTime} dateRangeEnd - orderDate filter (for custom orderDateType)
 * @property {DateTime} dateRangeStart - orderDate filter (for custom orderDateType)
 * @property {string} filtersList - filters_list
 * @property {string} filterValue - filter_value
 * @property {string} paymentStatus - notPaid, paid, partiallyRefunded, refunded
 * @property {string} appName - app_name
 * @property {string} filterScreen - filter_screen
 * @property {string} productType - product type: physical , digital
 * @property {boolean} archievedStatus - true / false
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} salesChannels - WEB, EBAY, POS, WIX_APP_STORE, OTHER_PLATFORM
 * @property {string} origin - name of current page (orders/products - from products dashboard / coupons_products  - products from apply coupon / SF_products - from list of products in StoreFront/coupons)
 * @property {string} dateRange - today, lastTwoDays, thisWeek, lastTwoWeeks, custom
 * @property {number} collectionsFiltered - number of collections filtered in products filter
 * @property {string} inventoryStatus - product inventory status: in_stock,  out_of_stock,  partially_out_of_stock
 * @property {string} visibility - product visibility : visible , hidden
 * @property {string} fulfillmentStatus - fulfilled, partiallyFulfilled, canceled, notFulfilled
 * @property {string} subscriptions - withSubscription, withoutSubscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFilterInStoresOaParams>} LogObject<clickOnFilterInStoresOaParams>
 */
export function clickOnFilterInStoresOa(params) {
    return {
        evid: 69,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleSetManualOrderSm' event (evid: 690)
 *
 * Event description: When the user clicked on “Add” in the shipping section:
 *
 * @param {shippingRuleSetManualOrderSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} shippingTitle - The name of the shipping option that have been chosen
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingRuleSetManualOrderSmParams>} LogObject<shippingRuleSetManualOrderSmParams>
 */
export function shippingRuleSetManualOrderSm(params) {
    return {
        evid: 690,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderPlacedOrderSm' event (evid: 691)
 *
 * Event description: When the user clicked on “Create Order” and saves the new order.
 *
 * @param {manualOrderPlacedOrderSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderPlacedOrderSmParams>} LogObject<manualOrderPlacedOrderSmParams>
 */
export function manualOrderPlacedOrderSm(params) {
    return {
        evid: 691,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelCreateShippingLabelButtonRenderedSrc10Evid692' event (evid: 692)
 *
 * Event description: Shipping label -> create shipping label button rendered.
 *
 * @param {shippingLabelCreateShippingLabelButtonRenderedSrc10Evid692Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} toCountry - to_country
 * @property {string} carrierName - carrier_name
 * @property {string} fromCountry - from_country
 * @property {boolean} isEnabled - is_enabled (button might be disabled)
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingLabelCreateShippingLabelButtonRenderedSrc10Evid692Params>} LogObject<shippingLabelCreateShippingLabelButtonRenderedSrc10Evid692Params>
 */
export function shippingLabelCreateShippingLabelButtonRenderedSrc10Evid692(params) {
    return {
        evid: 692,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersExchangeClickOnOrderLinkInOrderPageSrc10Evid693' event (evid: 693)
 *
 * Event description: When the user clicks on a link to another exchanged order
 *
 * @param {ordersExchangeClickOnOrderLinkInOrderPageSrc10Evid693Params} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} exchangeOrderId - The exchanged order id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} originalOrderId - The original order id
 * @property {string} origin - origin
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersExchangeClickOnOrderLinkInOrderPageSrc10Evid693Params>} LogObject<ordersExchangeClickOnOrderLinkInOrderPageSrc10Evid693Params>
 */
export function ordersExchangeClickOnOrderLinkInOrderPageSrc10Evid693(params) {
    return {
        evid: 693,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderFailureToastSm' event (evid: 694)
 *
 * Event description: When ‘create order’ in Manual Order fails.
 *
 * @param {manualOrderFailureToastSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} bi_token - msid
 * @return {LogObject<manualOrderFailureToastSmParams>} LogObject<manualOrderFailureToastSmParams>
 */
export function manualOrderFailureToastSm(params) {
    return {
        evid: 694,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'openAnalyticsSidePanelClickedSm' event (evid: 695)
 *
 * Event description: when the user clicks on analytics side panel
 *
 * @param {openAnalyticsSidePanelClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - stores_id
 * @property {string} appName - app name
 * @property {string} navigationClick - does open panel/navigate to report
 * @property {boolean} isMerchant - not relevant
 * @property {string} origin - from which page
 * @property {GUID} bi_token - not relevant
 * @return {LogObject<openAnalyticsSidePanelClickedSmParams>} LogObject<openAnalyticsSidePanelClickedSmParams>
 */
export function openAnalyticsSidePanelClickedSm(params) {
    return {
        evid: 695,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnDoneSrc10Evid696' event (evid: 696)
 *
 * Event description: When the user clicks on “Done” in the filters side pannel in the orders page
 *
 * @param {ordersViewsClickOnDoneSrc10Evid696Params} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} filters - a list of the filters applied, separated by “ , “
 * @property {GUID} bi_token - msid
 * @return {LogObject<ordersViewsClickOnDoneSrc10Evid696Params>} LogObject<ordersViewsClickOnDoneSrc10Evid696Params>
 */
export function ordersViewsClickOnDoneSrc10Evid696(params) {
    return {
        evid: 696,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'introOnDashboardModalCategoriesSelectedFromIntroForDropshippingAndPrintOnDemand' event (evid: 697)
 *
 * Event description: When the user finishes the intro on the dashboard modal and added selected categories for dropshipping or POD products
 *
 * @param {introOnDashboardModalCategoriesSelectedFromIntroForDropshippingAndPrintOnDemandParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - businessManagerStores
 * @property {boolean} isMerchant - is_merchant
 * @property {string} categories - list of categories that user selected
 * @property {string} type - dropshipping/POD
 * @property {GUID} bi_token - msid
 * @return {LogObject<introOnDashboardModalCategoriesSelectedFromIntroForDropshippingAndPrintOnDemandParams>} LogObject<introOnDashboardModalCategoriesSelectedFromIntroForDropshippingAndPrintOnDemandParams>
 */
export function introOnDashboardModalCategoriesSelectedFromIntroForDropshippingAndPrintOnDemand(params) {
    return {
        evid: 697,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnTabInStoresHomeScreenOa' event (evid: 70)
 *
 * Event description: when user clicks on tab (orders, products, coupons) in Stores Home screen OneApp. Also is sent when user clicks on settings card/ coupons card in dashboard
 *
 * @param {clickOnTabInStoresHomeScreenOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} tabName - orders/products/coupons
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - name of current page (orders/products/coupons) - for click on tab settings_card/coupons_card - for  click on card in dashboard
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnTabInStoresHomeScreenOaParams>} LogObject<clickOnTabInStoresHomeScreenOaParams>
 */
export function clickOnTabInStoresHomeScreenOa(params) {
    return {
        evid: 70,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionConfirmationModalCtaClicked' event (evid: 700)
 *
 * Event description: When users clicked a cte in the confirmation modal (confirmation for creating / updating info section).
 *
 * @param {infoSectionConfirmationModalCtaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - What products should be affected by the change? all/specificOne ?
 * @property {string} ctaName - apply/cancel
 * @property {GUID} id - The id of the relevant info section.
 * @property {number} productsNum - Number of products related to the info section. If creating new null
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionConfirmationModalCtaClickedParams>} LogObject<infoSectionConfirmationModalCtaClickedParams>
 */
export function infoSectionConfirmationModalCtaClicked(params) {
    return {
        evid: 700,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionConfirmationModalLoaded' event (evid: 701)
 *
 * Event description: When the confirmation modal is loaded to user (confirmation for creating / updating info section)
 *
 * @param {infoSectionConfirmationModalLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - The id of the relevant info section.
 * @property {number} productsNum - Number of products related to the info section. If creating new null
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionConfirmationModalLoadedParams>} LogObject<infoSectionConfirmationModalLoadedParams>
 */
export function infoSectionConfirmationModalLoaded(params) {
    return {
        evid: 701,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListSetVisibilityClicked' event (evid: 702)
 *
 * Event description: When client clicked set visibility in product list
 *
 * @param {productListSetVisibilityClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - pos, online store
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - show/hide
 * @property {string} origin - bulk action, product list
 * @property {string} productGuid - product guid for single product deleting click, when bulk action is null
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListSetVisibilityClickedParams>} LogObject<productListSetVisibilityClickedParams>
 */
export function productListSetVisibilityClicked(params) {
    return {
        evid: 702,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorSeoRedirect' event (evid: 703)
 *
 * Event description: when error got thrown from SEO redirect  in catalog product page
 *
 * @param {errorSeoRedirectParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - .
 * @property {string} appName - app_name
 * @property {string} errorMsg - error message
 * @property {boolean} isMerchant - is_merchant
 * @property {string} stack - .
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorSeoRedirectParams>} LogObject<errorSeoRedirectParams>
 */
export function errorSeoRedirect(params) {
    return {
        evid: 703,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionDeleteModalCtaClicked' event (evid: 704)
 *
 * Event description: when user clicks cta in the delete info section modal
 *
 * @param {infoSectionDeleteModalCtaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} ctaName - delete/cancel
 * @property {GUID} id - The id of the relevant info section.
 * @property {number} productsNum - Number of products related to the info section. If creating new null
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionDeleteModalCtaClickedParams>} LogObject<infoSectionDeleteModalCtaClickedParams>
 */
export function infoSectionDeleteModalCtaClicked(params) {
    return {
        evid: 704,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnKbInSm' event (evid: 705)
 *
 * Event description: Click on KB in Store Manager pages
 *
 * @param {clickOnKbInSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchent
 * @property {string} origin - page from where the click was pressed
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnKbInSmParams>} LogObject<clickOnKbInSmParams>
 */
export function clickOnKbInSm(params) {
    return {
        evid: 705,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionBankManagerLoaded' event (evid: 706)
 *
 * Event description: When the info section bank manager loaded to user
 *
 * @param {infoSectionBankManagerLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - empty/full
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - productPage/bulkAction/moreActions productPage = that mean the user clicked to add info section from the product page and he already have at least one section.
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionBankManagerLoadedParams>} LogObject<infoSectionBankManagerLoadedParams>
 */
export function infoSectionBankManagerLoaded(params) {
    return {
        evid: 706,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionBankManagerCtaClicked' event (evid: 707)
 *
 * Event description: When the info section bank manager loaded to user
 *
 * @param {infoSectionBankManagerCtaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} internalName - The internal name of the info section
 * @property {boolean} isMerchant - is_merchant
 * @property {string} ctaName - add/delete/edit/remove/create/close /duplicate
 * @property {GUID} id - The id of the relevant info section.  If the clicked cta in (close / created) then null
 * @property {number} numProducts - Number of products related to the info section. In some cta’s can be null
 * @property {string} title - Info section title
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionBankManagerCtaClickedParams>} LogObject<infoSectionBankManagerCtaClickedParams>
 */
export function infoSectionBankManagerCtaClicked(params) {
    return {
        evid: 707,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionEditorCtaClicked' event (evid: 708)
 *
 * Event description: when user clicks a CTA in the info section editor
 *
 * @param {infoSectionEditorCtaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - Edit / create
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} ctaName - save/cancel
 * @property {GUID} id - The id of the relevant info section.  If the clicked cta in (close / created) then null
 * @property {number} numProducts - Number of products related to the info section. In some cta’s can be null
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionEditorCtaClickedParams>} LogObject<infoSectionEditorCtaClickedParams>
 */
export function infoSectionEditorCtaClicked(params) {
    return {
        evid: 708,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionEditorLoaded' event (evid: 709)
 *
 * Event description: when info section editor is loaded to user
 *
 * @param {infoSectionEditorLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - Edit / create
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - The id of the relevant info section.  If the clicked cta in (close / created) then null
 * @property {string} origin - productPage/productList productPage = that means the user clicked to add info section from the product page and he already have at least one section.
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionEditorLoadedParams>} LogObject<infoSectionEditorLoadedParams>
 */
export function infoSectionEditorLoaded(params) {
    return {
        evid: 709,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSearchStoresOaSrc10Evid71' event (evid: 71)
 *
 * Event description: when user clicks on search in  OneApp
 *
 * @param {clickOnSearchStoresOaSrc10Evid71Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} previousPage - where  the user came from
 * @property {string} pageName - current page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSearchStoresOaSrc10Evid71Params>} LogObject<clickOnSearchStoresOaSrc10Evid71Params>
 */
export function clickOnSearchStoresOaSrc10Evid71(params) {
    return {
        evid: 71,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoSectionDeleteModalLoaded' event (evid: 710)
 *
 * Event description: when info section editor is loaded to user
 *
 * @param {infoSectionDeleteModalLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - The id of the relevant info section.
 * @property {number} productsNum - Number of products related to the info section. If creating new null
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoSectionDeleteModalLoadedParams>} LogObject<infoSectionDeleteModalLoadedParams>
 */
export function infoSectionDeleteModalLoaded(params) {
    return {
        evid: 710,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotedItemSm' event (evid: 712)
 *
 * Event description: merchant chooses a product / collection / coupon to promote
 *
 * @param {emailMarketingPromotedItemSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} guid - typeid
 * @property {string} appName - app_name
 * @property {string} componentId - replacing guid as string to avoid parsing issues (product/collection id for coupon usage)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {GUID} userId - uuid
 * @property {string} type - product / collection / coupon / newsletter...
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailMarketingPromotedItemSmParams>} LogObject<emailMarketingPromotedItemSmParams>
 */
export function emailMarketingPromotedItemSm(params) {
    return {
        evid: 712,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotionModalRenderedSm' event (evid: 715)
 *
 * Event description: merchant chooses a product / collection / coupon to promote
 *
 * @param {emailMarketingPromotionModalRenderedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {number} numberOfItems - how many item of type the store has
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - product / collection / coupon / free shipping/start from scrach shipping
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailMarketingPromotionModalRenderedSmParams>} LogObject<emailMarketingPromotionModalRenderedSmParams>
 */
export function emailMarketingPromotionModalRenderedSm(params) {
    return {
        evid: 715,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotionTypeClickedSm' event (evid: 716)
 *
 * Event description: merchant clicked on 'Send Email Campaign' on promote card (collection / product)
 *
 * @param {emailMarketingPromotionTypeClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - storeid
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - promote card
 * @property {string} type - product / collection / coupon
 * @property {GUID} bi_token - msid
 * @return {LogObject<emailMarketingPromotionTypeClickedSmParams>} LogObject<emailMarketingPromotionTypeClickedSmParams>
 */
export function emailMarketingPromotionTypeClickedSm(params) {
    return {
        evid: 716,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerMainPageLoaded' event (evid: 717)
 *
 * Event description: When Store Scheduler main page loaded. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerMainPageLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageState - empty state or not
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerMainPageLoadedParams>} LogObject<storeSchedulerMainPageLoadedParams>
 */
export function storeSchedulerMainPageLoaded(params) {
    return {
        evid: 717,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerClickedScheduleActivity' event (evid: 718)
 *
 * Event description: When user clicked schedule activity. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerClickedScheduleActivityParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - instance_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - click was made from empty state or main button
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerClickedScheduleActivityParams>} LogObject<storeSchedulerClickedScheduleActivityParams>
 */
export function storeSchedulerClickedScheduleActivity(params) {
    return {
        evid: 718,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerClickedSetVisibility' event (evid: 719)
 *
 * Event description: When user clicked on set visibility. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerClickedSetVisibilityParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerClickedSetVisibilityParams>} LogObject<storeSchedulerClickedSetVisibilityParams>
 */
export function storeSchedulerClickedSetVisibility(params) {
    return {
        evid: 719,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveShippingServicesOa' event (evid: 72)
 *
 * Event description: merchant saves shipping services inside specific shipping region (click on save in ShippingServicesScreen screen) OA
 *
 * @param {saveShippingServicesOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} services - json of all services "id", "title", "deliveryTime", "freeShippingAbove"(send only if chosen) , "rate"(send 0 for Free ) / "ratesByRange"
 * @property {number} numOfServices - cnt of saved services
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} methodType - free/flat/weight_range/price_range
 * @property {number} handlingFee_long - handling_fee_long (INT multiplied by 100000)
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveShippingServicesOaParams>} LogObject<saveShippingServicesOaParams>
 */
export function saveShippingServicesOa(params) {
    return {
        evid: 72,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerClickedSetDiscount' event (evid: 720)
 *
 * Event description: When user clicked on set discount. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerClickedSetDiscountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerClickedSetDiscountParams>} LogObject<storeSchedulerClickedSetDiscountParams>
 */
export function storeSchedulerClickedSetDiscount(params) {
    return {
        evid: 720,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerCreateUpdateVisibility' event (evid: 721)
 *
 * Event description: When user clicked on schedule/save in order to create/update a visibility activity. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerCreateUpdateVisibilityParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} name - product or collection name
 * @property {number} startTime - starting time of activity
 * @property {string} appName - app_name
 * @property {string} collectionId - collection id - null if activity was set on product
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - product or collection
 * @property {string} actionType - create for new activity, update for existing
 * @property {string} productId - product id - null if activity was set on collection
 * @property {string} activityTime - start time of the activity
 * @property {string} startDate - starting date of activity
 * @property {string} visibility - show/hide
 * @property {DateTime} utcTime - UTC time of activity starting time
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerCreateUpdateVisibilityParams>} LogObject<storeSchedulerCreateUpdateVisibilityParams>
 */
export function storeSchedulerCreateUpdateVisibility(params) {
    return {
        evid: 721,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerCreateUpdateDiscount' event (evid: 722)
 *
 * Event description: When user clicked on schedule/save in order to create/update a discount activity. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerCreateUpdateDiscountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} name - product or collection name
 * @property {number} startTime - starting time of activity
 * @property {string} discountType - percentage or money
 * @property {number} discountValue - discount value
 * @property {string} appName - app_name
 * @property {string} collectionId - collection id - null if activity was set on product
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - product or collection
 * @property {string} productId - product id - null if activity was set on collection
 * @property {number} salePrice - sale price at the moment of creating the activity
 * @property {string} activityTime - start time of the activity in user's time
 * @property {string} startDate - starting date of activity
 * @property {DateTime} utcTime - UTC time of activity starting time
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerCreateUpdateDiscountParams>} LogObject<storeSchedulerCreateUpdateDiscountParams>
 */
export function storeSchedulerCreateUpdateDiscount(params) {
    return {
        evid: 722,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerClickOnEditActivityModal' event (evid: 723)
 *
 * Event description: When user clicked on edit button in main page. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerClickOnEditActivityModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {number} startTime - starting time of activity
 * @property {string} appName - app_name
 * @property {string} activityName - activity name
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} activityType - visibility or discount
 * @property {string} activityStatus - activity status
 * @property {string} activityTime - activity start time in user's zone
 * @property {string} startDate - starting date of activity
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerClickOnEditActivityModalParams>} LogObject<storeSchedulerClickOnEditActivityModalParams>
 */
export function storeSchedulerClickOnEditActivityModal(params) {
    return {
        evid: 723,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerClickOnDeleteActivityModal' event (evid: 724)
 *
 * Event description: Store Scheduler -> Click on delete activity modal.
 *
 * @param {storeSchedulerClickOnDeleteActivityModalParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {number} startTime - starting time of activity
 * @property {string} appName - app_name
 * @property {string} activityName - activity name
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} activityType - visibility or discount
 * @property {string} activityStatus - activity status
 * @property {string} activityTime - activity start time in user time zone
 * @property {string} startDate - starting date of activity
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerClickOnDeleteActivityModalParams>} LogObject<storeSchedulerClickOnDeleteActivityModalParams>
 */
export function storeSchedulerClickOnDeleteActivityModal(params) {
    return {
        evid: 724,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerDeleteVisibility' event (evid: 725)
 *
 * Event description: When user delete visibility activity. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerDeleteVisibilityParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} name - product or collection name
 * @property {number} startTime - starting time of activity
 * @property {string} appName - app_name
 * @property {string} collectionId - collection id - null if activity was set on product
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - apply_to
 * @property {string} origin - delete modal or edit modal
 * @property {string} productId - product id - null if activity was set on collection
 * @property {string} activityTime - activity start time in user's time zone
 * @property {string} startDate - starting date of activity
 * @property {string} visibility - show/hide
 * @property {DateTime} utcTime - UTC time of activity starting time
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerDeleteVisibilityParams>} LogObject<storeSchedulerDeleteVisibilityParams>
 */
export function storeSchedulerDeleteVisibility(params) {
    return {
        evid: 725,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSchedulerDeleteDiscount' event (evid: 726)
 *
 * Event description: When user delete discount activity. Notice: In this event (and in all Store Scheduler events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {storeSchedulerDeleteDiscountParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} instanceId - Instance Id
 * @property {string} name - product or collection name
 * @property {number} startTime - starting time of activity
 * @property {string} discountType - percentage or money
 * @property {number} discountValue - discount value
 * @property {string} appName - app_name
 * @property {string} collectionId - collection id - null if activity was set on product
 * @property {GUID} activityId - activity id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - product or collection
 * @property {string} origin - delete modal or edit modal
 * @property {string} productId - product id - null if activity was set on collection
 * @property {number} salePrice - sale price at the moment of creating the activity
 * @property {string} activityTime - activity start time in user's time zone
 * @property {string} startDate - starting date of activity
 * @property {DateTime} utcTime - UTC time of activity starting time
 * @property {string} timeZone - time zone of starting date and time
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeSchedulerDeleteDiscountParams>} LogObject<storeSchedulerDeleteDiscountParams>
 */
export function storeSchedulerDeleteDiscount(params) {
    return {
        evid: 726,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnToggleOnOffInShippingRegionScreenOa' event (evid: 73)
 *
 * Event description: merchant clicks toggle on/off on Shipping / StorePickup section of shipping region screen OA
 *
 * @param {clickOnToggleOnOffInShippingRegionScreenOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_id
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - shipping / pickup
 * @property {GUID} userId - uuid
 * @property {string} type - toggle_on / toggle_off
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnToggleOnOffInShippingRegionScreenOaParams>} LogObject<clickOnToggleOnOffInShippingRegionScreenOaParams>
 */
export function clickOnToggleOnOffInShippingRegionScreenOa(params) {
    return {
        evid: 73,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveShippingServiceDetailesOa' event (evid: 74)
 *
 * Event description: merchant saves details of specific shipping service inside specific shipping region (click on save in RuleServiceScreen screen) OA
 *
 * @param {saveShippingServiceDetailesOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {string} service - json of service details "id", "title", "deliveryTime", "freeShippingAbove"(send only if chosen) , "rate"(send 0 for Free ) / "ratesByRange"
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} methodType - free/flat/weight_range/price_range
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveShippingServiceDetailesOaParams>} LogObject<saveShippingServiceDetailesOaParams>
 */
export function saveShippingServiceDetailesOa(params) {
    return {
        evid: 74,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDownloadOneAppSmOa' event (evid: 740)
 *
 * Event description: Click on download oneApp SM mobile app tab (google play or app store)
 *
 * @param {clickOnDownloadOneAppSmOaParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - google_play,app_store
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnDownloadOneAppSmOaParams>} LogObject<clickOnDownloadOneAppSmOaParams>
 */
export function clickOnDownloadOneAppSmOa(params) {
    return {
        evid: 740,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingTaxFromSettingsTabDashboardOnboardingOa' event (evid: 75)
 *
 * Event description: merchant clicks on Shipping /Tax in Settings tab Stores OA or when goes through dashboard on-boarding OA clicks on Add a Product / Connect Payment / Set up shipping  / Set up tax / Upgrade step
 *
 * @param {clickOnShippingTaxFromSettingsTabDashboardOnboardingOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - settings / onboarding / orders
 * @property {GUID} userId - uuid
 * @property {string} type - shipping / tax / product / payment / premium
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnShippingTaxFromSettingsTabDashboardOnboardingOaParams>} LogObject<clickOnShippingTaxFromSettingsTabDashboardOnboardingOaParams>
 */
export function clickOnShippingTaxFromSettingsTabDashboardOnboardingOa(params) {
    return {
        evid: 75,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToOpenDeleteOptionModalSm' event (evid: 76)
 *
 * Event description: when clicking to open delete option modal  in product page
 *
 * @param {clickToOpenDeleteOptionModalSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenDeleteOptionModalSmParams>} LogObject<clickToOpenDeleteOptionModalSmParams>
 */
export function clickToOpenDeleteOptionModalSm(params) {
    return {
        evid: 76,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnConnectYourFbPageSm' event (evid: 762)
 *
 * Event description: click on setup FB page SM
 *
 * @param {clickOnConnectYourFbPageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - first time popup / FB tab empty state...
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnConnectYourFbPageSmParams>} LogObject<clickOnConnectYourFbPageSmParams>
 */
export function clickOnConnectYourFbPageSm(params) {
    return {
        evid: 762,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCreateBusinessPageSm' event (evid: 763)
 *
 * Event description: click on create business page SM
 *
 * @param {clickOnCreateBusinessPageSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCreateBusinessPageSmParams>} LogObject<clickOnCreateBusinessPageSmParams>
 */
export function clickOnCreateBusinessPageSm(params) {
    return {
        evid: 763,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectFbPageCreateFbPageNextClickedSm' event (evid: 764)
 *
 * Event description: connect FB page SM
 *
 * @param {connectFbPageCreateFbPageNextClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {boolean} hasStoreNameChanged - has the user chaged the store name from the defult
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} useCover - use cover photo in FB page - yes / no / unknown
 * @property {string} origin - create page / connect existing page
 * @property {string} category - category
 * @property {string} storeName - storeName
 * @property {GUID} bi_token - msid
 * @return {LogObject<connectFbPageCreateFbPageNextClickedSmParams>} LogObject<connectFbPageCreateFbPageNextClickedSmParams>
 */
export function connectFbPageCreateFbPageNextClickedSm(params) {
    return {
        evid: 764,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'chooseProductsToPromoteSm' event (evid: 765)
 *
 * Event description: click on choose products button
 *
 * @param {chooseProductsToPromoteSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - first time popup / FB tab empty state...
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseProductsToPromoteSmParams>} LogObject<chooseProductsToPromoteSmParams>
 */
export function chooseProductsToPromoteSm(params) {
    return {
        evid: 765,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'confirmPromoteSelectedProductsSm' event (evid: 767)
 *
 * Event description: confirm promote selected products in confirmation dialog / remove product dialog / update campaign
 *
 * @param {confirmPromoteSelectedProductsSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - products dialog / FB tab / product form toggle / product form try again
 * @property {number} numProducts - number of products confirmed
 * @property {string} productids - array with product guids
 * @property {GUID} bi_token - msid
 * @return {LogObject<confirmPromoteSelectedProductsSmParams>} LogObject<confirmPromoteSelectedProductsSmParams>
 */
export function confirmPromoteSelectedProductsSm(params) {
    return {
        evid: 767,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnViewFbPageSm' event (evid: 768)
 *
 * Event description: click on view FB page in FB tab in SM
 *
 * @param {clickOnViewFbPageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - first time flow / FB tab
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnViewFbPageSmParams>} LogObject<clickOnViewFbPageSmParams>
 */
export function clickOnViewFbPageSm(params) {
    return {
        evid: 768,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDeleteOptionSm' event (evid: 77)
 *
 * Event description: When the user clicks on Save/Next in CountrySelectorScreen / CountrySubdivisionScreen of Shipping/Tax region
 *
 * @param {clickToDeleteOptionSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToDeleteOptionSmParams>} LogObject<clickToDeleteOptionSmParams>
 */
export function clickToDeleteOptionSm(params) {
    return {
        evid: 77,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showPopUpForFbFlowSm' event (evid: 774)
 *
 * Event description: all pop-ups related to FB flows
 *
 * @param {showPopUpForFbFlowSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin from which pop-up was triggered
 * @property {GUID} userId - uuid
 * @property {string} type - pop-up type
 * @property {GUID} bi_token - msid
 * @return {LogObject<showPopUpForFbFlowSmParams>} LogObject<showPopUpForFbFlowSmParams>
 */
export function showPopUpForFbFlowSm(params) {
    return {
        evid: 774,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFbTermOfUseCreateFbPageSm' event (evid: 775)
 *
 * Event description: click on either FB statement of rights or Facebook pages terms
 *
 * @param {clickOnFbTermOfUseCreateFbPageSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFbTermOfUseCreateFbPageSmParams>} LogObject<clickOnFbTermOfUseCreateFbPageSmParams>
 */
export function clickOnFbTermOfUseCreateFbPageSm(params) {
    return {
        evid: 775,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectFbPageChooseFbPageNextClickedSm' event (evid: 776)
 *
 * Event description: select a biz FB page from available
 *
 * @param {connectFbPageChooseFbPageNextClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {number} numberOfItems - number of FB pages returned
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<connectFbPageChooseFbPageNextClickedSmParams>} LogObject<connectFbPageChooseFbPageNextClickedSmParams>
 */
export function connectFbPageChooseFbPageNextClickedSm(params) {
    return {
        evid: 776,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectFbPageChooseFbPageCreateNewPageClickedSm' event (evid: 777)
 *
 * Event description: user choose to create a new Facebook page although he got a 'count' number of FB pages
 *
 * @param {connectFbPageChooseFbPageCreateNewPageClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {number} numberOfItems - number of FB pages returned
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<connectFbPageChooseFbPageCreateNewPageClickedSmParams>} LogObject<connectFbPageChooseFbPageCreateNewPageClickedSmParams>
 */
export function connectFbPageChooseFbPageCreateNewPageClickedSm(params) {
    return {
        evid: 777,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'aproveCampaignAdClickedFbSm' event (evid: 778)
 *
 * Event description: approve the FB ad campaign
 *
 * @param {aproveCampaignAdClickedFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} countEdit - how many times the ad was edited pre save
 * @property {string} productsList - products_list
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numberOfProducts - number of products in the ad
 * @property {boolean} isFbOnboarding - is_fb_on_boarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<aproveCampaignAdClickedFbSmParams>} LogObject<aproveCampaignAdClickedFbSmParams>
 */
export function aproveCampaignAdClickedFbSm(params) {
    return {
        evid: 778,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editYourAdClickedFbSm' event (evid: 779)
 *
 * Event description: Edit Your Ad clicked
 *
 * @param {editYourAdClickedFbSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<editYourAdClickedFbSmParams>} LogObject<editYourAdClickedFbSmParams>
 */
export function editYourAdClickedFbSm(params) {
    return {
        evid: 779,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cancelRefundShownToUserSm' event (evid: 78)
 *
 * Event description: When the cancel/refund showed to the user
 *
 * @param {cancelRefundShownToUserSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel with refund / refund
 * @property {string} paymentProvider - the payment
 * @property {string} pageType - modal / page
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelRefundShownToUserSmParams>} LogObject<cancelRefundShownToUserSmParams>
 */
export function cancelRefundShownToUserSm(params) {
    return {
        evid: 78,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveButtonEditCampaignClickFbSm' event (evid: 780)
 *
 * Event description: click on the info button
 *
 * @param {saveButtonEditCampaignClickFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} numberOfImages - how many image changed
 * @property {string} appName - app_name
 * @property {boolean} headLineText - has the headline text changed
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {number} numberOfProductText - how many products texts changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveButtonEditCampaignClickFbSmParams>} LogObject<saveButtonEditCampaignClickFbSmParams>
 */
export function saveButtonEditCampaignClickFbSm(params) {
    return {
        evid: 780,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectTargetAudianceNextFbSm' event (evid: 781)
 *
 * Event description: Select target audiance next FB SM.
 *
 * @param {selectTargetAudianceNextFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} location - location
 * @property {string} appName - app_name
 * @property {number} minAge - min age
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {number} maxAge - max age
 * @property {GUID} bi_token - msid
 * @property {string} gender - all/male/female
 * @return {LogObject<selectTargetAudianceNextFbSmParams>} LogObject<selectTargetAudianceNextFbSmParams>
 */
export function selectTargetAudianceNextFbSm(params) {
    return {
        evid: 781,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'campaignPpButtonClickFbSm' event (evid: 782)
 *
 * Event description: click on the info button
 *
 * @param {campaignPpButtonClickFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {number} price - price
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<campaignPpButtonClickFbSmParams>} LogObject<campaignPpButtonClickFbSmParams>
 */
export function campaignPpButtonClickFbSm(params) {
    return {
        evid: 782,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'defineAudienceClickedFbDsSm' event (evid: 783)
 *
 * Event description: Define audience clicked FB DS
 *
 * @param {defineAudienceClickedFbDsSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - message bar/ more options
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<defineAudienceClickedFbDsSmParams>} LogObject<defineAudienceClickedFbDsSmParams>
 */
export function defineAudienceClickedFbDsSm(params) {
    return {
        evid: 783,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'choosePlanClickedFbDsSm' event (evid: 784)
 *
 * Event description: Choose plan clicked FB DS SM
 *
 * @param {choosePlanClickedFbDsSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - message bar/ more options
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<choosePlanClickedFbDsSmParams>} LogObject<choosePlanClickedFbDsSmParams>
 */
export function choosePlanClickedFbDsSm(params) {
    return {
        evid: 784,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editAndPreviewAdClickedFbDbSm' event (evid: 785)
 *
 * Event description: from the DB
 *
 * @param {editAndPreviewAdClickedFbDbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} itemsCount - how many products were selected
 * @property {string} productsList - products guid selected Json
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isFbOnboarding - is FB onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<editAndPreviewAdClickedFbDbSmParams>} LogObject<editAndPreviewAdClickedFbDbSmParams>
 */
export function editAndPreviewAdClickedFbDbSm(params) {
    return {
        evid: 785,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteProductClickedFbDsSm' event (evid: 786)
 *
 * Event description: click on delete product
 *
 * @param {deleteProductClickedFbDsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - replace product
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteProductClickedFbDsSmParams>} LogObject<deleteProductClickedFbDsSmParams>
 */
export function deleteProductClickedFbDsSm(params) {
    return {
        evid: 786,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectProductNextFbSm' event (evid: 787)
 *
 * Event description: clicking on the next button after selecting the products for the campaigns
 *
 * @param {selectProductNextFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} itemsCount - how many products were selected
 * @property {string} productsList - products guid selected Json
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} numberOfProducts - number of products for the ad
 * @property {boolean} isFbOnboarding - is FB onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectProductNextFbSmParams>} LogObject<selectProductNextFbSmParams>
 */
export function selectProductNextFbSm(params) {
    return {
        evid: 787,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'infoButtonClickedCreateCampaignFbSm' event (evid: 788)
 *
 * Event description: click on the info button
 *
 * @param {infoButtonClickedCreateCampaignFbSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - product selection/campaign edit headline/campaign edit product detailes/campaign pp/campaign reach/learn more DS
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} bi_token - msid
 * @return {LogObject<infoButtonClickedCreateCampaignFbSmParams>} LogObject<infoButtonClickedCreateCampaignFbSmParams>
 */
export function infoButtonClickedCreateCampaignFbSm(params) {
    return {
        evid: 788,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectProductClickedFbDsSm' event (evid: 789)
 *
 * Event description: click on select product
 *
 * @param {selectProductClickedFbDsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - message bar/ plus/ more options/replace product
 * @property {boolean} isFbOnboarding - is_fb_onboarding
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectProductClickedFbDsSmParams>} LogObject<selectProductClickedFbDsSmParams>
 */
export function selectProductClickedFbDsSm(params) {
    return {
        evid: 789,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToRefundCancelIssueSm' event (evid: 79)
 *
 * Event description: When the user clicks to refund/cancel in modal (not confirmation)
 *
 * @param {clickToRefundCancelIssueSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {boolean} updateInventory - true if the checkbox marked, false otherwize
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} refundReason - refund reason (closed list)
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool)},{shipping: bool}
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel with refund / refund
 * @property {string} origin - right bar / top menu
 * @property {string} paymentProvider - order payment provider
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {string} refundType - full / partial / none
 * @property {boolean} isEmail - True if the email checkbox true, false otherwize
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToRefundCancelIssueSmParams>} LogObject<clickToRefundCancelIssueSmParams>
 */
export function clickToRefundCancelIssueSm(params) {
    return {
        evid: 79,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddWixAdvitaiserFbPageSm' event (evid: 790)
 *
 * Event description: when the user click this button he will be reconnected to his facebook account.
 *
 * @param {clickOnAddWixAdvitaiserFbPageSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddWixAdvitaiserFbPageSmParams>} LogObject<clickOnAddWixAdvitaiserFbPageSmParams>
 */
export function clickOnAddWixAdvitaiserFbPageSm(params) {
    return {
        evid: 790,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveChangesInPromoterSrc10Evid8' event (evid: 8)
 *
 * Event description: When the user saves change of parameters in the promoter area. It could be "do not show again" or any other states that the promoter include.
 *
 * @param {saveChangesInPromoterSrc10Evid8Params} params - The parameters for this event
 * @property {string} field - the field name. for example "don't show this modal again"
 * @property {string} value - the relevant value of the field. for example if the user select the checkbox of not show again it will be true
 * @property {string} item_id - The Id of the item the user want to promote (product id, service id or menu id) - this field is connect to the item_id of the modal
 * @property {string} item_type - The type of the relevant item
 * @property {string} origin - the page name where the modal was opened (product page/coupons page/ etc)
 * @return {LogObject<saveChangesInPromoterSrc10Evid8Params>} LogObject<saveChangesInPromoterSrc10Evid8Params>
 */
export function saveChangesInPromoterSrc10Evid8(params) {
    return {
        evid: 8,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'cancelRefundConfirmationModalShownToUserSm' event (evid: 80)
 *
 * Event description: When the cancel/refund confirmation modal shown to the user
 *
 * @param {cancelRefundConfirmationModalShownToUserSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isSupported - true if payment provider is supported
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel with refund / refund / cancel
 * @property {boolean} hasLink - true if it is unsupported provider and click leads to payment provider's dashboard
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelRefundConfirmationModalShownToUserSmParams>} LogObject<cancelRefundConfirmationModalShownToUserSmParams>
 */
export function cancelRefundConfirmationModalShownToUserSm(params) {
    return {
        evid: 80,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionSetVisibilityClicked' event (evid: 803)
 *
 * Event description: Set visibility of Categories
 *
 * @param {collectionSetVisibilityClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - Show/Hide
 * @property {string} origin - cotegory list / Category page
 * @property {GUID} bi_token - msid
 * @return {LogObject<collectionSetVisibilityClickedParams>} LogObject<collectionSetVisibilityClickedParams>
 */
export function collectionSetVisibilityClicked(params) {
    return {
        evid: 803,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'duplicateCollectionClickedSm' event (evid: 804)
 *
 * Event description: Duplicate collection clicked SM
 *
 * @param {duplicateCollectionClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} bi_token - msid
 * @return {LogObject<duplicateCollectionClickedSmParams>} LogObject<duplicateCollectionClickedSmParams>
 */
export function duplicateCollectionClickedSm(params) {
    return {
        evid: 804,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionDeleteClicked' event (evid: 805)
 *
 * Event description: Collection delete clicked
 *
 * @param {collectionDeleteClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {boolean} isVisible - Is the category visible
 * @property {GUID} bi_token - msid
 * @return {LogObject<collectionDeleteClickedParams>} LogObject<collectionDeleteClickedParams>
 */
export function collectionDeleteClicked(params) {
    return {
        evid: 805,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideCategoriesClickedInModal' event (evid: 806)
 *
 * Event description: Show/Hide categories clicked in modal
 *
 * @param {showHideCategoriesClickedInModalParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideCategoriesClickedInModalParams>} LogObject<showHideCategoriesClickedInModalParams>
 */
export function showHideCategoriesClickedInModal(params) {
    return {
        evid: 806,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCollectionClickedSm' event (evid: 807)
 *
 * Event description: Add new collection clicked SM
 *
 * @param {addNewCollectionClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} bi_token - msid
 * @return {LogObject<addNewCollectionClickedSmParams>} LogObject<addNewCollectionClickedSmParams>
 */
export function addNewCollectionClickedSm(params) {
    return {
        evid: 807,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveCollectionSeoSettingsSm' event (evid: 808)
 *
 * Event description: Save product SEO settings SM
 *
 * @param {saveCollectionSeoSettingsSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {boolean} seoDescriptionChanged - True/False
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - origin
 * @property {boolean} seoTitleChanges - True/False
 * @property {boolean} seoUrlChanged - True/False
 * @property {GUID} bi_token - msid
 * @return {LogObject<saveCollectionSeoSettingsSmParams>} LogObject<saveCollectionSeoSettingsSmParams>
 */
export function saveCollectionSeoSettingsSm(params) {
    return {
        evid: 808,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editCategoryListSidebar' event (evid: 809)
 *
 * Event description: edit category list sidebar
 *
 * @param {editCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - Categories list by current order (collections by legacy)
 * @property {string} appName - app_name
 * @property {string} categoryName - Category name (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} categoriesOrder - Categories list by current order (collections by legacy)
 * @property {boolean} isVisibleInSidebar - True/False
 * @property {string} action - Reorder / Change visibility in Sidebar
 * @property {GUID} bi_token - msid
 * @return {LogObject<editCategoryListSidebarParams>} LogObject<editCategoryListSidebarParams>
 */
export function editCategoryListSidebar(params) {
    return {
        evid: 809,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOkConfirmationModalToCancelRefundSm' event (evid: 81)
 *
 * Event description: When the user click to cancel/refund order in confirmation modal
 *
 * @param {clickOkConfirmationModalToCancelRefundSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} clientRefundId - client_refund_id
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {boolean} updateInventory - true if the checkbox marked, false otherwize
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} refundReason - refund reason (closed list)
 * @property {boolean} isSupported - true if payment provider is supported
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool),shipping}
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel with refund / refund / cancel
 * @property {string} origin - right bar / top menu
 * @property {string} paymentProvider - order payment provider
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {string} refundType - full / partial / none
 * @property {boolean} isEmail - True if the email checkbox true, false otherwize
 * @property {boolean} hasLink - true if it is unsupported provider and click leads to payment provider's dashboard
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOkConfirmationModalToCancelRefundSmParams>} LogObject<clickOkConfirmationModalToCancelRefundSmParams>
 */
export function clickOkConfirmationModalToCancelRefundSm(params) {
    return {
        evid: 81,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewStoresPanelInEditor' event (evid: 810)
 *
 * Event description: When the Stores panel is open in the Editor
 *
 * @param {viewStoresPanelInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - DESKTOP etc.
 * @property {string} state - what does the user sees when the panel is open
 * @property {GUID} site_id - site_id
 * @property {string} appName - WixStores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actions - json with all the quick actions the user sees
 * @property {string} app_id - stores app_id
 * @property {string} type - automatic open / click on button
 * @property {GUID} esi - esi
 * @property {GUID} bi_token - msid
 * @property {string} app_name - WixStores
 * @return {LogObject<viewStoresPanelInEditorParams>} LogObject<viewStoresPanelInEditorParams>
 */
export function viewStoresPanelInEditor(params) {
    return {
        evid: 810,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'openAppSettingsSfe' event (evid: 811)
 *
 * Event description: double click / right click on a wixstores component
 *
 * @param {openAppSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<openAppSettingsSfeParams>} LogObject<openAppSettingsSfeParams>
 */
export function openAppSettingsSfe(params) {
    return {
        evid: 811,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeStyleColorSfe' event (evid: 812)
 *
 * Event description: upon changing a store style or color
 *
 * @param {changeStyleColorSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - style/color parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media , withorders/whitoutorders
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - event_data
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeStyleColorSfeParams>} LogObject<changeStyleColorSfeParams>
 */
export function changeStyleColorSfe(params) {
    return {
        evid: 812,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeGalleryCollectionSfe' event (evid: 813)
 *
 * Event description: change gallery collection for display
 *
 * @param {changeGalleryCollectionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeGalleryCollectionSfeParams>} LogObject<changeGalleryCollectionSfeParams>
 */
export function changeGalleryCollectionSfe(params) {
    return {
        evid: 813,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToReOrderProductsInCollectionSfe' event (evid: 814)
 *
 * Event description: clicking 're-order products in collection' (store manager is opened in collection page)
 *
 * @param {clickToReOrderProductsInCollectionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor/onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetPage - product list / product / dashboard / ....
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToReOrderProductsInCollectionSfeParams>} LogObject<clickToReOrderProductsInCollectionSfeParams>
 */
export function clickToReOrderProductsInCollectionSfe(params) {
    return {
        evid: 814,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeImageRatioInGallerySfe' event (evid: 815)
 *
 * Event description: change image ratio in gallery
 *
 * @param {changeImageRatioInGallerySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} imageRatio - selected image ratio (2X2. 2X3...)
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeImageRatioInGallerySfeParams>} LogObject<changeImageRatioInGallerySfeParams>
 */
export function changeImageRatioInGallerySfe(params) {
    return {
        evid: 815,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeGalleryLayoutSfe' event (evid: 816)
 *
 * Event description: change gallery layout
 *
 * @param {changeGalleryLayoutSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - columns / rows / margins
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile/desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - selected value
 * @property {GUID} bi_token - msid
 * @property {string} tab - from which tab was the change sent from ?
 * @return {LogObject<changeGalleryLayoutSfeParams>} LogObject<changeGalleryLayoutSfeParams>
 */
export function changeGalleryLayoutSfe(params) {
    return {
        evid: 816,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'resetAppSettingsSfe' event (evid: 819)
 *
 * Event description: click on 'reset settings' in app settings panel
 *
 * @param {resetAppSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - component_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<resetAppSettingsSfeParams>} LogObject<resetAppSettingsSfeParams>
 */
export function resetAppSettingsSfe(params) {
    return {
        evid: 819,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToEditTrackingNumberSm' event (evid: 82)
 *
 * Event description: User clicks to edit tracking number of a carrier to the order info
 *
 * @param {clickToEditTrackingNumberSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} fulfillerName - e.g.  Modalyst, FBA.. (+selffulfill  )
 * @property {string} appName - app name
 * @property {string} fulfillerId - for custom fulfillers
 * @property {string} orderId - order_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (in OneApp = true if choose tracking number screen)
 * @property {string} carrierName - carrier name..
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToEditTrackingNumberSmParams>} LogObject<clickToEditTrackingNumberSmParams>
 */
export function clickToEditTrackingNumberSm(params) {
    return {
        evid: 82,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeCartIconSfe' event (evid: 820)
 *
 * Event description: select a cart icon in mini cart settings
 *
 * @param {changeCartIconSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - icon type
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeCartIconSfeParams>} LogObject<changeCartIconSfeParams>
 */
export function changeCartIconSfe(params) {
    return {
        evid: 820,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideCategoryListSidebar' event (evid: 821)
 *
 * Event description: show/hide category list sidebar
 *
 * @param {showHideCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} componentName - Category_list
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideCategoryListSidebarParams>} LogObject<showHideCategoryListSidebarParams>
 */
export function showHideCategoryListSidebar(params) {
    return {
        evid: 821,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeMiniCartBehaviorSfe' event (evid: 822)
 *
 * Event description: select a behavior for click on mini cart in mini cart settings
 *
 * @param {changeMiniCartBehaviorSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} value - behavior type
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeMiniCartBehaviorSfeParams>} LogObject<changeMiniCartBehaviorSfeParams>
 */
export function changeMiniCartBehaviorSfe(params) {
    return {
        evid: 822,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryPageHeroSectionReadMoreClicked' event (evid: 823)
 *
 * Event description: Category page hero section  ‘read more’ clicked
 *
 * @param {categoryPageHeroSectionReadMoreClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageHeroSectionReadMoreClickedParams>} LogObject<categoryPageHeroSectionReadMoreClickedParams>
 */
export function categoryPageHeroSectionReadMoreClicked(params) {
    return {
        evid: 823,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeProductPageLayoutSfe' event (evid: 824)
 *
 * Event description: user changed the product page layout in app settings
 *
 * @param {changeProductPageLayoutSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - chosen layout
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} parameters - Header section style
 * @property {string} value - Layout 1 / Layout 2
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeProductPageLayoutSfeParams>} LogObject<changeProductPageLayoutSfeParams>
 */
export function changeProductPageLayoutSfe(params) {
    return {
        evid: 824,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeProductPageDisplayedComponentsSfe' event (evid: 825)
 *
 * Event description: user checked/unchecked a displayed element in component in app settings
 *
 * @param {changeProductPageDisplayedComponentsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen layout
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @property {string} tab - the setting tab which the change where made from
 * @return {LogObject<changeProductPageDisplayedComponentsSfeParams>} LogObject<changeProductPageDisplayedComponentsSfeParams>
 */
export function changeProductPageDisplayedComponentsSfe(params) {
    return {
        evid: 825,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeProductInWidgetSfe' event (evid: 826)
 *
 * Event description: merchant changed the product connected to a product widget
 *
 * @param {changeProductInWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeProductInWidgetSfeParams>} LogObject<changeProductInWidgetSfeParams>
 */
export function changeProductInWidgetSfe(params) {
    return {
        evid: 826,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnEditProductsInProductWidgetSfe' event (evid: 827)
 *
 * Event description: merchant clicks on edit products in product widget settings
 *
 * @param {clickOnEditProductsInProductWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page, product widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditProductsInProductWidgetSfeParams>} LogObject<clickOnEditProductsInProductWidgetSfeParams>
 */
export function clickOnEditProductsInProductWidgetSfe(params) {
    return {
        evid: 827,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeHoverTypeSfe' event (evid: 828)
 *
 * Event description: merchant changes hover behavior in widget settings
 *
 * @param {changeHoverTypeSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen hover type
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {GUID} bi_token - msid
 * @property {string} tab - the setting tab which the change was made from
 * @return {LogObject<changeHoverTypeSfeParams>} LogObject<changeHoverTypeSfeParams>
 */
export function changeHoverTypeSfe(params) {
    return {
        evid: 828,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeWidgetButtonActionSfe' event (evid: 829)
 *
 * Event description: merchant changes the widget button action in widget settings
 *
 * @param {changeWidgetButtonActionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen button action type (add to cart, view details...)
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeWidgetButtonActionSfeParams>} LogObject<changeWidgetButtonActionSfeParams>
 */
export function changeWidgetButtonActionSfe(params) {
    return {
        evid: 829,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToCancelRefundInOrderPageSm' event (evid: 83)
 *
 * Event description: When the user click to cancel / refund in the top menu / right bar
 *
 * @param {clickToCancelRefundInOrderPageSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actionType - cancel / refund
 * @property {string} origin - top bar/ right bar
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToCancelRefundInOrderPageSmParams>} LogObject<clickToCancelRefundInOrderPageSmParams>
 */
export function clickToCancelRefundInOrderPageSm(params) {
    return {
        evid: 83,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnEditElementSettingsSfe' event (evid: 830)
 *
 * Event description: click on edit elements settings in product page settings
 *
 * @param {clickOnEditElementSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditElementSettingsSfeParams>} LogObject<clickOnEditElementSettingsSfeParams>
 */
export function clickOnEditElementSettingsSfe(params) {
    return {
        evid: 830,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeElementSettingsSfe' event (evid: 831)
 *
 * Event description: change element settings in SF component settings
 *
 * @param {changeElementSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - editor_mode
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor
 * @property {string} new_value - on/off, crop/fit...
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - value
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeElementSettingsSfeParams>} LogObject<changeElementSettingsSfeParams>
 */
export function changeElementSettingsSfe(params) {
    return {
        evid: 831,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryPageBreadcrumbClicked' event (evid: 832)
 *
 * Event description: Category page breadcrumb clicked
 *
 * @param {categoryPageBreadcrumbClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} originCategoryId - Origin category ID (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {string} link - Link URL
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageBreadcrumbClickedParams>} LogObject<categoryPageBreadcrumbClickedParams>
 */
export function categoryPageBreadcrumbClicked(params) {
    return {
        evid: 832,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeTextFieldSfe' event (evid: 833)
 *
 * Event description: change the text in store front settings
 *
 * @param {changeTextFieldSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} text - new text
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page, mini cart....
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeTextFieldSfeParams>} LogObject<changeTextFieldSfeParams>
 */
export function changeTextFieldSfe(params) {
    return {
        evid: 833,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryPageCategoryTreeClicked' event (evid: 834)
 *
 * Event description: Category page category tree clicked
 *
 * @param {categoryPageCategoryTreeClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} originCategoryId - Origin category ID  (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {string} link - Link URL
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageCategoryTreeClickedParams>} LogObject<categoryPageCategoryTreeClickedParams>
 */
export function categoryPageCategoryTreeClicked(params) {
    return {
        evid: 834,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideFiltersSortingSfe' event (evid: 835)
 *
 * Event description: check/uncheck show all filters or sorting options in the 'sorting & filters' tab
 *
 * @param {showHideFiltersSortingSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - sorting options / filters
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideFiltersSortingSfeParams>} LogObject<showHideFiltersSortingSfeParams>
 */
export function showHideFiltersSortingSfe(params) {
    return {
        evid: 835,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeSortingParameterSfe' event (evid: 836)
 *
 * Event description: change sorting (display title or sorting options) in the 'Sorting & Filters' tab
 *
 * @param {changeSortingParameterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} defaultSortingValue - Default sorting value
 * @property {string} type - sort option
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeSortingParameterSfeParams>} LogObject<changeSortingParameterSfeParams>
 */
export function changeSortingParameterSfe(params) {
    return {
        evid: 836,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToOpenProductsListToChangeProductInWidgetSfe' event (evid: 837)
 *
 * Event description: merchant click to open the product list in order to change the connected product to a product widget
 *
 * @param {clickToOpenProductsListToChangeProductInWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenProductsListToChangeProductInWidgetSfeParams>} LogObject<clickToOpenProductsListToChangeProductInWidgetSfeParams>
 */
export function clickToOpenProductsListToChangeProductInWidgetSfe(params) {
    return {
        evid: 837,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeFilterOptionsParameterSfe' event (evid: 838)
 *
 * Event description: change filters (display title/options/show)
 *
 * @param {changeFilterOptionsParameterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - filter option
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeFilterOptionsParameterSfeParams>} LogObject<changeFilterOptionsParameterSfeParams>
 */
export function changeFilterOptionsParameterSfe(params) {
    return {
        evid: 838,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCustomFilterSfe' event (evid: 839)
 *
 * Event description: add custom filter- right now it is for collections filter only
 *
 * @param {addCustomFilterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<addCustomFilterSfeParams>} LogObject<addCustomFilterSfeParams>
 */
export function addCustomFilterSfe(params) {
    return {
        evid: 839,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickEditAutomation' event (evid: 84)
 *
 * Event description: When the user clicks to edit automation and redirect to the Automation tab in BM
 *
 * @param {acClickEditAutomationParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - fullState / emptyState
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickEditAutomationParams>} LogObject<acClickEditAutomationParams>
 */
export function acClickEditAutomation(params) {
    return {
        evid: 84,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'removeCustomFilterSfe' event (evid: 840)
 *
 * Event description: add custom filter- right now it is for collections filter only
 *
 * @param {removeCustomFilterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} text - custom filter name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<removeCustomFilterSfeParams>} LogObject<removeCustomFilterSfeParams>
 */
export function removeCustomFilterSfe(params) {
    return {
        evid: 840,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToAddWishlistSfe' event (evid: 841)
 *
 * Event description: when a user clicks to add wishlist in product page settings
 *
 * @param {clickToAddWishlistSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} hasMembers - Does the site have members area installed when adding wishlist (different buttons)
 * @property {string} component_id - product
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToAddWishlistSfeParams>} LogObject<clickToAddWishlistSfeParams>
 */
export function clickToAddWishlistSfe(params) {
    return {
        evid: 841,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToRemoveWishlistSfe' event (evid: 842)
 *
 * Event description: when a user clicks to remove wishlist in product page settings
 *
 * @param {clickToRemoveWishlistSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} component_id - product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToRemoveWishlistSfeParams>} LogObject<clickToRemoveWishlistSfeParams>
 */
export function clickToRemoveWishlistSfe(params) {
    return {
        evid: 842,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToPreviewWishlistInMembersSfe' event (evid: 843)
 *
 * Event description: when a user clicks in notification to preview Wishlist in Members
 *
 * @param {clickToPreviewWishlistInMembersSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToPreviewWishlistInMembersSfeParams>} LogObject<clickToPreviewWishlistInMembersSfeParams>
 */
export function clickToPreviewWishlistInMembersSfe(params) {
    return {
        evid: 843,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'wishlistInstallationStage' event (evid: 844)
 *
 * Event description: wishlist installation stage
 *
 * @param {wishlistInstallationStageParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} stage - which stage in the wishlist installation process
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<wishlistInstallationStageParams>} LogObject<wishlistInstallationStageParams>
 */
export function wishlistInstallationStage(params) {
    return {
        evid: 844,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnProPlanUpgradeInComponentSetting' event (evid: 845)
 *
 * Event description: When a user clicks on the pro plan upgrade button in component setting (Can also be from GFPP) OR  When user clicks on Upgrade Now from button / popover / banner in Stores BO for High RPU feature
 *
 * @param {clickOnProPlanUpgradeInComponentSettingParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProPlanUpgradeInComponentSettingParams>} LogObject<clickOnProPlanUpgradeInComponentSettingParams>
 */
export function clickOnProPlanUpgradeInComponentSetting(params) {
    return {
        evid: 845,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'proPlanUpgradeModalLoaded' event (evid: 846)
 *
 * Event description: when the pro plan upgrade modal is loaded in the editor/ADI OR when in Stores BO Upgrade modal loaded for High RPU
 *
 * @param {proPlanUpgradeModalLoadedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} messageType - high ARPU / both (means high ARPU and payment)
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - From which component the modal was opened (
 * CurrencyConverter, AvalaraTax, subscriptions)
 * @property {GUID} bi_token - msid
 * @return {LogObject<proPlanUpgradeModalLoadedParams>} LogObject<proPlanUpgradeModalLoadedParams>
 */
export function proPlanUpgradeModalLoaded(params) {
    return {
        evid: 846,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnUpgradeButtonInProPlanModal' event (evid: 847)
 *
 * Event description: When the user clicks on the upgrade button in pro plan modal (high RPU upgrade modal)
 *
 * @param {clickOnUpgradeButtonInProPlanModalParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} package_name - The type of the premium package that is connected to the site (if free then null)
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnUpgradeButtonInProPlanModalParams>} LogObject<clickOnUpgradeButtonInProPlanModalParams>
 */
export function clickOnUpgradeButtonInProPlanModal(params) {
    return {
        evid: 847,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'collectionDeleteClickedInModal' event (evid: 848)
 *
 * Event description: Collection delete clicked in modal
 *
 * @param {collectionDeleteClickedInModalParams} params - The parameters for this event
 * @property {GUID} storeId - store id
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is merchant
 * @property {string} origin - origin
 * @property {boolean} isVisible - is visible
 * @property {GUID} bi_token - msid
 * @return {LogObject<collectionDeleteClickedInModalParams>} LogObject<collectionDeleteClickedInModalParams>
 */
export function collectionDeleteClickedInModal(params) {
    return {
        evid: 848,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pagesAtAppInstallation' event (evid: 849)
 *
 * Event description: event sent for each page that is installed within the app installation (i.e Shop page, Cart Page..)
 *
 * @param {pagesAtAppInstallationParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} installationType - originally_in_template/siteless/duplicate/the rest will be manual
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} appid - app def id
 * @property {string} pageName - i.e Shop page/ Categories page..
 * @property {string} initiatorName - EDITOR / DASHBOARD
 * @property {GUID} msid - msid
 * @property {string} identityType - identityType
 * @property {GUID} bi_token - msid
 * @return {LogObject<pagesAtAppInstallationParams>} LogObject<pagesAtAppInstallationParams>
 */
export function pagesAtAppInstallation(params) {
    return {
        evid: 849,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickCopyUrl' event (evid: 85)
 *
 * Event description: When the user clicks to copy cart url
 *
 * @param {acClickCopyUrlParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} cartId - cart Id
 * @property {string} appName - app
 * @property {boolean} is_recovered - true if the cart recovered, false otherwise
 * @property {boolean} isMerchant - is_merchant
 * @property {string} emailStatus - scheduled / sent / not sent
 * @property {GUID} contactId - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickCopyUrlParams>} LogObject<acClickCopyUrlParams>
 */
export function acClickCopyUrl(params) {
    return {
        evid: 85,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnQuickActionStoresPanelInEditor' event (evid: 850)
 *
 * Event description: When the user clicks on one of the quick actions in the Stores 6th button in the editor
 *
 * @param {clickOnQuickActionStoresPanelInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - DESKTOP etc.
 * @property {GUID} site_id - site_id
 * @property {string} appName - WixStores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} buttonName - name of the button (find products,add payment...)
 * @property {string} app_id - stores app_id
 * @property {GUID} esi - esi
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnQuickActionStoresPanelInEditorParams>} LogObject<clickOnQuickActionStoresPanelInEditorParams>
 */
export function clickOnQuickActionStoresPanelInEditor(params) {
    return {
        evid: 850,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFreeText' event (evid: 851)
 *
 * Event description: Send when click on free text field
 *
 * @param {clickOnFreeTextParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFreeTextParams>} LogObject<clickOnFreeTextParams>
 */
export function clickOnFreeText(params) {
    return {
        evid: 851,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnQuantity' event (evid: 852)
 *
 * Event description: When UoU changes the quantity of product at product Page
 *
 * @param {clickOnQuantityParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} valueInt - value
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnQuantityParams>} LogObject<clickOnQuantityParams>
 */
export function clickOnQuantity(params) {
    return {
        evid: 852,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSubscriptionOption' event (evid: 853)
 *
 * Event description: When UoU is clicking on one of the subscription options at product page
 *
 * @param {clickOnSubscriptionOptionParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} value - one-time/recurring
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSubscriptionOptionParams>} LogObject<clickOnSubscriptionOptionParams>
 */
export function clickOnSubscriptionOption(params) {
    return {
        evid: 853,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnMorePaymentOptions' event (evid: 854)
 *
 * Event description: When UoU clicks on 'More Payment Options' link in product page.
 *
 * @param {clickOnMorePaymentOptionsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnMorePaymentOptionsParams>} LogObject<clickOnMorePaymentOptionsParams>
 */
export function clickOnMorePaymentOptions(params) {
    return {
        evid: 854,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAdditionalPictures' event (evid: 855)
 *
 * Event description: When UoU is choosing to see more pictures of the product at product page.
 *
 * @param {clickOnAdditionalPicturesParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAdditionalPicturesParams>} LogObject<clickOnAdditionalPicturesParams>
 */
export function clickOnAdditionalPictures(params) {
    return {
        evid: 855,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnNavigation' event (evid: 856)
 *
 * Event description: When UoU clicks on product page breadcrums of Prev/Next option.
 *
 * @param {clickOnNavigationParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} component - breadcrum/(Prev/Next)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnNavigationParams>} LogObject<clickOnNavigationParams>
 */
export function clickOnNavigation(params) {
    return {
        evid: 856,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorMessageSf' event (evid: 857)
 *
 * Event description: When UoU gets an error message at product page.
 * i.e when size option is not selected.
 *
 * @param {errorMessageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} fieldName - list of fields  in which error messages were displayed to UoU
 * @property {string} origin - product page
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorMessageSfParams>} LogObject<errorMessageSfParams>
 */
export function errorMessageSf(params) {
    return {
        evid: 857,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryPageHeroSectionReadLessClicked' event (evid: 858)
 *
 * Event description: Category page hero section ‘read less’ clicked
 *
 * @param {categoryPageHeroSectionReadLessClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageHeroSectionReadLessClickedParams>} LogObject<categoryPageHeroSectionReadLessClickedParams>
 */
export function categoryPageHeroSectionReadLessClicked(params) {
    return {
        evid: 858,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickRemoveFromList' event (evid: 86)
 *
 * Event description: When the user clicks the confirmation to remove cart from AC list
 *
 * @param {acClickRemoveFromListParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} cartId - cart Id
 * @property {string} appName - app
 * @property {boolean} is_recovered - true if the cart recovered, false otherwise
 * @property {boolean} isMerchant - is_merchant
 * @property {string} emailStatus - scheduled / sent / not sent
 * @property {GUID} contactId - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickRemoveFromListParams>} LogObject<acClickRemoveFromListParams>
 */
export function acClickRemoveFromList(params) {
    return {
        evid: 86,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageCategoryListSidebar' event (evid: 860)
 *
 * Event description: manage category list sidebar
 *
 * @param {manageCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} componentName - Category_list
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - Sync automatically / Customize manually
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageCategoryListSidebarParams>} LogObject<manageCategoryListSidebarParams>
 */
export function manageCategoryListSidebar(params) {
    return {
        evid: 860,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoadingTimeSf' event (evid: 861)
 *
 * Event description: this event holds loading time stamp for each step in wixstores iframe loading in live site
 *
 * @param {pageLoadingTimeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {number} startTime - start time for iframe loading
 * @property {string} appName - app_name
 * @property {number} domLoading_ts - dom loading time stamp
 * @property {number} configPhase_ts - config phase time stamp
 * @property {string} appVersion - app version
 * @property {number} domComplete_ts - dom complete time stamp
 * @property {number} preRequest_ts - pre request time stamp
 * @property {string} user_agent - user_agent
 * @property {number} latency_ts - latency time stamp
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} runPhase_ts - run_phase time stamp
 * @property {number} angularFinished_ts - angular finished time stamp
 * @property {number} serverResponse_ts - server response time stamp
 * @property {GUID} bi_token - msid
 * @return {LogObject<pageLoadingTimeSfParams>} LogObject<pageLoadingTimeSfParams>
 */
export function pageLoadingTimeSf(params) {
    return {
        evid: 861,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCartBuyNow' event (evid: 863)
 *
 * Event description: Click on Add to cart / Buy Now sent from Product Page made by Velo.
 *
 * @param {clickOnAddToCartBuyNowParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} buttonType - buy now / add to cart
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddToCartBuyNowParams>} LogObject<clickOnAddToCartBuyNowParams>
 */
export function clickOnAddToCartBuyNow(params) {
    return {
        evid: 863,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewProductPageVelo' event (evid: 864)
 *
 * Event description: sent from Product Page made by Velo.
 *
 * @param {viewProductPageVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewProductPageVeloParams>} LogObject<viewProductPageVeloParams>
 */
export function viewProductPageVelo(params) {
    return {
        evid: 864,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickOnAContactInAcList' event (evid: 87)
 *
 * Event description: When the user clicks on contact from AC list.
 * The contact inbox will open on the right
 *
 * @param {acClickOnAContactInAcListParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} cartId - cart Id
 * @property {string} appName - app
 * @property {boolean} is_recovered - true if the cart recovered, false otherwise
 * @property {boolean} isMerchant - is_merchant
 * @property {string} emailStatus - scheduled / sent / not sent
 * @property {GUID} contactId - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickOnAContactInAcListParams>} LogObject<acClickOnAContactInAcListParams>
 */
export function acClickOnAContactInAcList(params) {
    return {
        evid: 87,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acFirstTimeActivationPopUpShowedToUser' event (evid: 88)
 *
 * Event description: when the user sees the first-time pop up which shown for a user with AC but without active automation on it (just on first time)
 *
 * @param {acFirstTimeActivationPopUpShowedToUserParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} autoStatus - inactive / none
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<acFirstTimeActivationPopUpShowedToUserParams>} LogObject<acFirstTimeActivationPopUpShowedToUserParams>
 */
export function acFirstTimeActivationPopUpShowedToUser(params) {
    return {
        evid: 88,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clientCallingSetupForGettingExperiments' event (evid: 888)
 *
 * Event description: Client calling “setup” for getting experiments on this visitor
 *
 * @param {clientCallingSetupForGettingExperimentsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {string} appName - app_name
 * @property {string} result - result from petri server
 * @property {string} direction - to petri / from petri
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} msid - msid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clientCallingSetupForGettingExperimentsParams>} LogObject<clientCallingSetupForGettingExperimentsParams>
 */
export function clientCallingSetupForGettingExperiments(params) {
    return {
        evid: 888,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickLearnMore' event (evid: 89)
 *
 * Event description: when the user click the learn more link
 *
 * @param {acClickLearnMoreParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - empty state / full state / first-time pop-up?
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickLearnMoreParams>} LogObject<acClickLearnMoreParams>
 */
export function acClickLearnMore(params) {
    return {
        evid: 89,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'newClickOnItemInShopPagesSettingSf' event (evid: 895)
 *
 * Event description: Click on Item in Shop Pages Setting  SF
 *
 * @param {newClickOnItemInShopPagesSettingSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} category - ‘Manage Store’, Add Shop Page’, ‘Switch to Category Page’, ‘Delete Wix Stores’
 * @property {GUID} bi_token - msid
 * @return {LogObject<newClickOnItemInShopPagesSettingSfParams>} LogObject<newClickOnItemInShopPagesSettingSfParams>
 */
export function newClickOnItemInShopPagesSettingSf(params) {
    return {
        evid: 895,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSwitchToCategoriesModalSf' event (evid: 896)
 *
 * Event description: Click on Switch to Categories Modal SF
 *
 * @param {clickOnSwitchToCategoriesModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Switch’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSwitchToCategoriesModalSfParams>} LogObject<clickOnSwitchToCategoriesModalSfParams>
 */
export function clickOnSwitchToCategoriesModalSf(params) {
    return {
        evid: 896,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSwitchToCategoriesVerificationModalSf' event (evid: 897)
 *
 * Event description: Click Switch to Categories Verification Modal SF
 *
 * @param {clickSwitchToCategoriesVerificationModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Switch’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickSwitchToCategoriesVerificationModalSfParams>} LogObject<clickSwitchToCategoriesVerificationModalSfParams>
 */
export function clickSwitchToCategoriesVerificationModalSf(params) {
    return {
        evid: 897,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSwitchToCategoriesConfirmationModalSf' event (evid: 898)
 *
 * Event description: Click Switch to Categories Confirmation Modal SF
 *
 * @param {clickSwitchToCategoriesConfirmationModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Go to Dashboard’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickSwitchToCategoriesConfirmationModalSfParams>} LogObject<clickSwitchToCategoriesConfirmationModalSfParams>
 */
export function clickSwitchToCategoriesConfirmationModalSf(params) {
    return {
        evid: 898,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manuallyOptInToCategoriesSf' event (evid: 899)
 *
 * Event description: Manually Opt-In to Categories SF
 *
 * @param {manuallyOptInToCategoriesSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<manuallyOptInToCategoriesSfParams>} LogObject<manuallyOptInToCategoriesSfParams>
 */
export function manuallyOptInToCategoriesSf(params) {
    return {
        evid: 899,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteSingleAllMediaFromProduct' event (evid: 9)
 *
 * Event description: single/all media item removed from product. that is a temporary action. It will take place when user saves the product page.
 *
 * @param {deleteSingleAllMediaFromProductParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} videoIds - list of all videos ids
 * @property {string} imageIds - list of all images ids
 * @property {string} appName - app_name
 * @property {string} productType - digital / physical
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product
 * @property {string} mediaSource - DeviceMedia / WixMedia
 * @property {string} action - All / single
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteSingleAllMediaFromProductParams>} LogObject<deleteSingleAllMediaFromProductParams>
 */
export function deleteSingleAllMediaFromProduct(params) {
    return {
        evid: 9,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dashboardComponentLoadedOa' event (evid: 90)
 *
 * Event description: when specific dashboard component was loaded (onboarding/ settings_card / coupons_card / popular_products / store_activity)
 *
 * @param {dashboardComponentLoadedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} componentType - onboarding/ settings_card / coupons_card / popular_products / store_activity / happy_moment
 * @property {boolean} isMerchant - is_merchant
 * @property {string} stepsIncomplete - list of incomplete steps to be done (relevant only for onboarding) : shipping / tax / product / payment / premium
 * @property {GUID} bi_token - msid
 * @return {LogObject<dashboardComponentLoadedOaParams>} LogObject<dashboardComponentLoadedOaParams>
 */
export function dashboardComponentLoadedOa(params) {
    return {
        evid: 90,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'smallBusinessTipsReadMoreClickedSm' event (evid: 901)
 *
 * Event description: Click on read more from home small business tips
 *
 * @param {smallBusinessTipsReadMoreClickedSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - breadcrumbs / tab/ left navigation/ home...
 * @property {string} link - link url
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<smallBusinessTipsReadMoreClickedSmParams>} LogObject<smallBusinessTipsReadMoreClickedSmParams>
 */
export function smallBusinessTipsReadMoreClickedSm(params) {
    return {
        evid: 901,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnBlogSm' event (evid: 902)
 *
 * Event description: Click on read blog - for now only from SM home
 *
 * @param {clickOnBlogSmParams} params - The parameters for this event
 * @property {GUID} userId - uuid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - HOME
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBlogSmParams>} LogObject<clickOnBlogSmParams>
 */
export function clickOnBlogSm(params) {
    return {
        evid: 902,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnHelpSm' event (evid: 903)
 *
 * Event description: Click on read blog - for now only from SM home
 *
 * @param {clickOnHelpSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - home/left side bar
 * @property {string} target - url the user is sent to
 * @property {GUID} userId - uuid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnHelpSmParams>} LogObject<clickOnHelpSmParams>
 */
export function clickOnHelpSm(params) {
    return {
        evid: 903,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOn3DotsToManageProduct' event (evid: 904)
 *
 * Event description: when merchant clicks on 3dots in product page/ product list in  web (merchant view)
 *
 * @param {clickOn3DotsToManageProductParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product page / product list
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOn3DotsToManageProductParams>} LogObject<clickOn3DotsToManageProductParams>
 */
export function clickOn3DotsToManageProduct(params) {
    return {
        evid: 904,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'diwmBannerShown' event (evid: 905)
 *
 * Event description: when DIWM banner (for creating a new product) is shown to user
 *
 * @param {diwmBannerShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {string} pageName - In what page the banner displayed
 * @property {string} type - banner type: shipping, create product
 * @property {GUID} bi_token - msid
 * @return {LogObject<diwmBannerShownParams>} LogObject<diwmBannerShownParams>
 */
export function diwmBannerShown(params) {
    return {
        evid: 905,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'introOnDashboardModalStoreProductsStepLoaded' event (evid: 906)
 *
 * Event description: When the Store Products step is loaded in the intro on the dashboard modal
 *
 * @param {introOnDashboardModalStoreProductsStepLoadedParams} params - The parameters for this event
 * @property {GUID} storeId - storeId
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - type of screen based on previous step answer- physical/digital/dropshipping/POD
 * @property {GUID} bi_token - msid
 * @return {LogObject<introOnDashboardModalStoreProductsStepLoadedParams>} LogObject<introOnDashboardModalStoreProductsStepLoadedParams>
 */
export function introOnDashboardModalStoreProductsStepLoaded(params) {
    return {
        evid: 906,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'appsInContextCtaClicked' event (evid: 907)
 *
 * Event description: fired when user click on a CTA in Apps in contexts tab. like click to change apps tab or explore app market
 *
 * @param {appsInContextCtaClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} tabName - The name of the tab that is currently loaded. products/orders/marketing…
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - What CTA was clicked on. Currently only explore app market
 * @property {GUID} bi_token - msid
 * @return {LogObject<appsInContextCtaClickedParams>} LogObject<appsInContextCtaClickedParams>
 */
export function appsInContextCtaClicked(params) {
    return {
        evid: 907,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'appInContextNavigation' event (evid: 908)
 *
 * Event description: Fired when user clicks to navigate between the apps tabs
 *
 * @param {appInContextNavigationParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} clickedTab - What tab was clicked on. products/orders/inventory/marketing…
 * @property {string} appName - app_name
 * @property {string} currentTab - The name of the tab that is currently loaded. products/orders/marketing…
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<appInContextNavigationParams>} LogObject<appInContextNavigationParams>
 */
export function appInContextNavigation(params) {
    return {
        evid: 908,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsClickToAddProductOption' event (evid: 909)
 *
 * Event description: Fired when user clicks on “Add option/modifier” / “Add Another option/modifier”
 *
 * @param {productOptionsClickToAddProductOptionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} state - empty - if the product do not have options. existing - if the product has options
 * @property {string} appName - app_name
 * @property {GUID} product_guid - the id of the product. if its a new product so null
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @property {string} type - modifier/option
 * @return {LogObject<productOptionsClickToAddProductOptionParams>} LogObject<productOptionsClickToAddProductOptionParams>
 */
export function productOptionsClickToAddProductOption(params) {
    return {
        evid: 909,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToAvalaraManualSm' event (evid: 91)
 *
 * Event description: after user clicked on "Switch to manual"/"Switch to Automated tax"  method of calculating tax rates switched for the list of existing tax_rules (with one edge case: if country not US had manually defined rates with regions the set of tax rules per region are deleted - server event 1058 and the new on tax_rule one per state is created - server event 1056)
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToAvalaraManualSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} flowType - chosen flow type: avalara/manual
 * @property {string} appName - app_name
 * @property {boolean} onboarding - true - if user went through onboarding
 * @property {string} taxIdList - the list of taxRuleIds that change flowType of tax calculation to avalara/manual
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraManualSmParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraManualSmParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToAvalaraManualSm(params) {
    return {
        evid: 91,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsCreateUpdateOption' event (evid: 910)
 *
 * Event description: When the option was created/updated . This action is temporary and will takes place just after the user will save the product page changes.
 * The option will created/updated only apter the user will save the product.
 *
 * @param {productOptionsCreateUpdateOptionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - Option name
 * @property {string} choices - List of optional choices in the option
 * @property {string} appName - app_name
 * @property {string} displayType - How the option is presented in the product page
 * @property {GUID} product_guid - the id of the product. if its a new product so null
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - Option id. if new then NULL
 * @property {string} action - Create / update
 * @property {GUID} bi_token - msid
 * @return {LogObject<productOptionsCreateUpdateOptionParams>} LogObject<productOptionsCreateUpdateOptionParams>
 */
export function productOptionsCreateUpdateOption(params) {
    return {
        evid: 910,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsCtaClickInProductOptionCard' event (evid: 911)
 *
 * Event description: Fired when user clicks on one of the ctas in option/modifier card (excluding add option)
 *
 * @param {productOptionsCtaClickInProductOptionCardParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - Option name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} ctaName - the name of the cta
 * @property {GUID} id - Option id. if new then NULL
 * @property {GUID} productGuid - the id of the product. if its a new product so null
 * @property {GUID} bi_token - msid
 * @property {string} type - options/ modifiers
 * @return {LogObject<productOptionsCtaClickInProductOptionCardParams>} LogObject<productOptionsCtaClickInProductOptionCardParams>
 */
export function productOptionsCtaClickInProductOptionCard(params) {
    return {
        evid: 911,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsOptionWasRemoved' event (evid: 912)
 *
 * Event description: When user click “remove” in the remove option/modifier confirmation modal. the removal will take place only after the user will save the product page.
 *
 * @param {productOptionsOptionWasRemovedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - Option name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - Option id. if new then NULL
 * @property {GUID} productGuid - the id of the product. if its a new product so null
 * @property {GUID} bi_token - msid
 * @property {string} type - modifier/option
 * @property {string} origin - What is the origin of the action
 * Bank / product for modifiers
 *
 * @return {LogObject<productOptionsOptionWasRemovedParams>} LogObject<productOptionsOptionWasRemovedParams>
 */
export function productOptionsOptionWasRemoved(params) {
    return {
        evid: 912,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsReorderOptions' event (evid: 913)
 *
 * Event description: When user changes the order which the options/modifiers are displayed
 *
 * @param {productOptionsReorderOptionsParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} options - list of all the options in the product
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} productGuid - the id of the product. if its a new product so null
 * @property {GUID} bi_token - msid
 * @property {string} type - modifier/option
 *
 * @return {LogObject<productOptionsReorderOptionsParams>} LogObject<productOptionsReorderOptionsParams>
 */
export function productOptionsReorderOptions(params) {
    return {
        evid: 913,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsBulkOptionNameEdit' event (evid: 914)
 *
 * Event description: Fired after the user clicks “Apply” to bulk edit option name. the event contains data just for the options that were edited
 *
 * @param {productOptionsBulkOptionNameEditParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - Option id
 * @property {string} optionNames - list of all the option names that were edited.
 * @property {number} productsNum - To how many products the option is linked
 * @property {string} optionIds - List of the option ids that were edited
 * @property {GUID} bi_token - msid
 * @property {string} 'type ' - modifier/option
 *
 * @return {LogObject<productOptionsBulkOptionNameEditParams>} LogObject<productOptionsBulkOptionNameEditParams>
 */
export function productOptionsBulkOptionNameEdit(params) {
    return {
        evid: 914,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productListMoreActionClicked' event (evid: 915)
 *
 * Event description: when user click on the more actions / bulk editing options in the product list
 *
 * @param {productListMoreActionClickedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} ctaType - what text was shown to the user in the CTA moreActions/bulkEditingOptions
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numProducts - Number of products the user selected
 * @property {GUID} bi_token - msid
 * @return {LogObject<productListMoreActionClickedParams>} LogObject<productListMoreActionClickedParams>
 */
export function productListMoreActionClicked(params) {
    return {
        evid: 915,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productOptionsModifierOptionModifierWasDeleted' event (evid: 916)
 *
 * Event description: When user click “delete” in the remove option/modifier confirmation modal. the removal will take place only after the user will save the product page.
 *
 * @param {productOptionsModifierOptionModifierWasDeletedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} name - name
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} id - modifier/option id
 * @property {GUID} productGuid - product_guid
 * @property {GUID} bi_token - msid
 * @property {string} type - modifier/option
 * @property {string} origin - What is the origin of the action
 * Bank / product for modifiers
 *
 * @return {LogObject<productOptionsModifierOptionModifierWasDeletedParams>} LogObject<productOptionsModifierOptionModifierWasDeletedParams>
 */
export function productOptionsModifierOptionModifierWasDeleted(params) {
    return {
        evid: 916,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsListClickNextPreviousProduct' event (evid: 917)
 *
 * Event description: when user in the product page he has next/ previous arrow to navigate between the products.
 *
 * @param {productsListClickNextPreviousProductParams} params - The parameters for this event
 * @property {string} currentProductGuid - the product id where the action took place
 * @property {string} newProductGuId - the Id of the product after the navigation of the user
 * @property {string} action - next/previous. what arrow the user clicked
 * @return {LogObject<productsListClickNextPreviousProductParams>} LogObject<productsListClickNextPreviousProductParams>
 */
export function productsListClickNextPreviousProduct(params) {
    return {
        evid: 917,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acErrorOnTurningOnAutomation' event (evid: 918)
 *
 * Event description: AC -> error on turning on automation.
 *
 * @param {acErrorOnTurningOnAutomationParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} recipeName - receipt_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} errorCode - the desc of the error
 * @property {GUID} bi_token - msid
 * @return {LogObject<acErrorOnTurningOnAutomationParams>} LogObject<acErrorOnTurningOnAutomationParams>
 */
export function acErrorOnTurningOnAutomation(params) {
    return {
        evid: 918,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acDirectTurningOnAutomationSuccessModalIsShown' event (evid: 919)
 *
 * Event description: When the user sees the success  modal after turning on automation via fast flow
 *
 * @param {acDirectTurningOnAutomationSuccessModalIsShownParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<acDirectTurningOnAutomationSuccessModalIsShownParams>} LogObject<acDirectTurningOnAutomationSuccessModalIsShownParams>
 */
export function acDirectTurningOnAutomationSuccessModalIsShown(params) {
    return {
        evid: 919,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acClickActivateAutomation' event (evid: 92)
 *
 * Event description: When the user clicks to activate automation and redirect to the Automation tab in BM
 *
 * @param {acClickActivateAutomationParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} autoStatus - inactive / none
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - emptyState main CTA / emptyState link / activation pop up / Full state
 * @property {GUID} bi_token - msid
 * @return {LogObject<acClickActivateAutomationParams>} LogObject<acClickActivateAutomationParams>
 */
export function acClickActivateAutomation(params) {
    return {
        evid: 92,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageManageCustomTextFieldClickedOa' event (evid: 920)
 *
 * Event description: Product Page Manage Custom Text field clicked OA
 *
 * @param {productPageManageCustomTextFieldClickedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {number} orderNumber - How many custom fields already added+1
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} product_id - product_id
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageManageCustomTextFieldClickedOaParams>} LogObject<productPageManageCustomTextFieldClickedOaParams>
 */
export function productPageManageCustomTextFieldClickedOa(params) {
    return {
        evid: 920,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productCustomTextFieldAdded' event (evid: 921)
 *
 * Event description: Product - Custom Text Field Added
 *
 * @param {productCustomTextFieldAddedParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} customFieldText - custom field text
 * @property {boolean} customTextMandatory - custom_text_mandatory
 * @property {number} orderNumber - How many custom fields already added+1
 * @property {number} customFieldLimit - Symbols limit
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} product_id - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productCustomTextFieldAddedParams>} LogObject<productCustomTextFieldAddedParams>
 */
export function productCustomTextFieldAdded(params) {
    return {
        evid: 921,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpSaveTempPickupLocationBm' event (evid: 922)
 *
 * Event description: when a temp pickup rule is saved
 *
 * @param {sdpSaveTempPickupLocationBmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} country - The country where the pickup point is
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pickupName - pickup_name
 * @property {string} action - create/delete
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpSaveTempPickupLocationBmParams>} LogObject<sdpSaveTempPickupLocationBmParams>
 */
export function sdpSaveTempPickupLocationBm(params) {
    return {
        evid: 922,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sdpClickOnShowHideOnCheckoutForPickupOption' event (evid: 923)
 *
 * Event description: When pickup option is hides/shown
 *
 * @param {sdpClickOnShowHideOnCheckoutForPickupOptionParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} shippingRuleId - shipping_rule_guid
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pickupLocationId - The id of the pickup location
 * @property {string} action - show/hide
 * @property {GUID} bi_token - msid
 * @return {LogObject<sdpClickOnShowHideOnCheckoutForPickupOptionParams>} LogObject<sdpClickOnShowHideOnCheckoutForPickupOptionParams>
 */
export function sdpClickOnShowHideOnCheckoutForPickupOption(params) {
    return {
        evid: 923,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageManageBrandClickedOa' event (evid: 924)
 *
 * Event description: When user clicks on manage ribbon from Manage Additional Details menu
 *
 * @param {productPageManageBrandClickedOaParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} product_id - product_id
 * @property {string} type - add / edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<productPageManageBrandClickedOaParams>} LogObject<productPageManageBrandClickedOaParams>
 */
export function productPageManageBrandClickedOa(params) {
    return {
        evid: 924,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxWellcomeProductTaxGroupPopupShownSm' event (evid: 93)
 *
 * Event description: popup that shows up for user who uses Avalara after he toggle on "Product Tax Groups" .  the title is "Specify what you're selling"
 *
 * @param {taxWellcomeProductTaxGroupPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxWellcomeProductTaxGroupPopupShownSmParams>} LogObject<taxWellcomeProductTaxGroupPopupShownSmParams>
 */
export function taxWellcomeProductTaxGroupPopupShownSm(params) {
    return {
        evid: 93,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickInWellcomeProductTaxGroupPopupSm' event (evid: 94)
 *
 * Event description: User can clck "Create Group" in Wellcome ProductTaxGroup popup
 *
 * @param {taxClickInWellcomeProductTaxGroupPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickInWellcomeProductTaxGroupPopupSmParams>} LogObject<taxClickInWellcomeProductTaxGroupPopupSmParams>
 */
export function taxClickInWellcomeProductTaxGroupPopupSm(params) {
    return {
        evid: 94,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxUnassignedProductsCreateTaxGroupPopupShownSm' event (evid: 95)
 *
 * Event description: 1)if user saves Product Tax Group and after it there are some products unassigned to any Product Tax Group - popup suggests user to create one more group (otherwise unassigned products will be added to General Tax Group). 2) if user toggles on "Product tax group" not for the first time and some products have tax groups while other - do not
 *
 * @param {taxUnassignedProductsCreateTaxGroupPopupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} reason - click save / toggle on
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxUnassignedProductsCreateTaxGroupPopupShownSmParams>} LogObject<taxUnassignedProductsCreateTaxGroupPopupShownSmParams>
 */
export function taxUnassignedProductsCreateTaxGroupPopupShownSm(params) {
    return {
        evid: 95,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickInUnassignedProductsCreateTaxGroupPopupSm' event (evid: 96)
 *
 * Event description: In  Unassigned Products popup user can click on preselected "Create another group"  or "Create general group" . Popup can appear because user clicked save (and has unassigned products ) or because he toggles on Product Tax Group toggle (and it happened that some products are unassigned)
 *
 * @param {taxClickInUnassignedProductsCreateTaxGroupPopupSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {string} reason - click save / toggle on
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} value - create_another / create_general
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickInUnassignedProductsCreateTaxGroupPopupSmParams>} LogObject<taxClickInUnassignedProductsCreateTaxGroupPopupSmParams>
 */
export function taxClickInUnassignedProductsCreateTaxGroupPopupSm(params) {
    return {
        evid: 96,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAvalaraTaxCodeModalForProductGroupShownSm' event (evid: 97)
 *
 * Event description: after user clicked on  "Select a code" button  / previously selected name of Avalara tax code , Avalara Tax Code modal  (for product group) shown. The title of the modal is "Select Avalara Tax Code"
 *
 * @param {taxAvalaraTaxCodeModalForProductGroupShownSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - in case of eddit inside existing productTaxGroup
 * @property {string} type - new/edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxAvalaraTaxCodeModalForProductGroupShownSmParams>} LogObject<taxAvalaraTaxCodeModalForProductGroupShownSmParams>
 */
export function taxAvalaraTaxCodeModalForProductGroupShownSm(params) {
    return {
        evid: 97,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickInAvalaraTaxCodeForProductGroupModalSm' event (evid: 98)
 *
 * Event description: in Avalara Tax Code modal user choose one of the popular tax codes / use search to find appropriate avalara tax code and clicks select. Since 08/2019 user choose popular tax code from dropdown and in modal - only search
 *
 * @param {taxClickInAvalaraTaxCodeForProductGroupModalSmParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} taxCode - selected Avalara tax code for productTaxGroup
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} productTaxGroupId - in case of eddit inside existing productTaxGroup
 * @property {string} origin - modal / dropdown (valid since 08/2019)
 * @property {string} type - new/edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickInAvalaraTaxCodeForProductGroupModalSmParams>} LogObject<taxClickInAvalaraTaxCodeForProductGroupModalSmParams>
 */
export function taxClickInAvalaraTaxCodeForProductGroupModalSm(params) {
    return {
        evid: 98,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnProductTaxGroupsToggleOnOff' event (evid: 99)
 *
 * Event description: in tax list page in Avalara flowtype of calculating taxes (after user finished Avalara onboarding ) - when user toggles on/off Product Tax Groups toggle (by default  its turned off)
 *
 * @param {taxClickOnProductTaxGroupsToggleOnOffParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - on / off
 * @property {boolean} hadSavedTaxGroups - true if user had product groups (from the past)
 * @property {GUID} bi_token - msid
 * @return {LogObject<taxClickOnProductTaxGroupsToggleOnOffParams>} LogObject<taxClickOnProductTaxGroupsToggleOnOffParams>
 */
export function taxClickOnProductTaxGroupsToggleOnOff(params) {
    return {
        evid: 99,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageOaClickCreateNewModifiersOptionPageSrc10Evid990' event (evid: 990)
 *
 * Event description: Fired when user clicks on create new modifiers
 * Or when the user clicks on create new option
 *
 *
 * @param {productPageOaClickCreateNewModifiersOptionPageSrc10Evid990Params} params - The parameters for this event
 * @property {string} productName - Name of the product .  If new product send null
 * @property {GUID} productGuid - The id of the relevant product.  If new product send null
 * @property {string} entity - modifier / option
 * @property {number} numEntity - Number of existing modifiers / options assigned to the product
 * @property {number} numEntityCatalog - Number of existing modifiers / options in the catalog bank
 * @return {LogObject<productPageOaClickCreateNewModifiersOptionPageSrc10Evid990Params>} LogObject<productPageOaClickCreateNewModifiersOptionPageSrc10Evid990Params>
 */
export function productPageOaClickCreateNewModifiersOptionPageSrc10Evid990(params) {
    return {
        evid: 990,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageOaClickToOpenModifiersOptionPageSrc10Evid991' event (evid: 991)
 *
 * Event description: Fired when user clicks on modifiers in order to expand the card in the mobile app
 * Or when the user clicks on “Add option” button in the options card
 *
 *
 * @param {productPageOaClickToOpenModifiersOptionPageSrc10Evid991Params} params - The parameters for this event
 * @property {string} productName - Name of the product .  If new product send null
 * @property {GUID} productGuid - The id of the relevant product.  If new product send null
 * @property {string} entity - modifier / option
 * @property {number} numEntity - Number of existing modifiers / options assigned to the product
 * @property {number} numEntityCatalog - Number of existing modifiers / options in the catalog bank
 * @return {LogObject<productPageOaClickToOpenModifiersOptionPageSrc10Evid991Params>} LogObject<productPageOaClickToOpenModifiersOptionPageSrc10Evid991Params>
 */
export function productPageOaClickToOpenModifiersOptionPageSrc10Evid991(params) {
    return {
        evid: 991,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonBrandConfirmationBannerLoadedSrc10Evid994' event (evid: 994)
 *
 * Event description: after use clicked on save button the banner gives indication weather process sucssedded or failed
 *
 * @param {bulkActionRibbonBrandConfirmationBannerLoadedSrc10Evid994Params} params - The parameters for this event
 * @property {boolean} ' isSuccess' - If true than edit succeed If false than edit failed
 * @property {number} NumProducts - Number of products associated with the ribbon / brand which an action was taken
 * @property {GUID} id - 	The id of the relevant ribbon / brand which an action was taken
 * @property {string} entityName - 	ribbon / brand name on which an action was taken
 * @return {LogObject<bulkActionRibbonBrandConfirmationBannerLoadedSrc10Evid994Params>} LogObject<bulkActionRibbonBrandConfirmationBannerLoadedSrc10Evid994Params>
 */
export function bulkActionRibbonBrandConfirmationBannerLoadedSrc10Evid994(params) {
    return {
        evid: 994,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonBrandEntityDeletedSrc10Evid995' event (evid: 995)
 *
 * Event description: user delete an existing ribbon / brand name
 *
 * @param {bulkActionRibbonBrandEntityDeletedSrc10Evid995Params} params - The parameters for this event
 * @property {number} numProducts - 	Number of products associated with the ribbon / brand which an action was taken
 * @property {GUID} id - The id of the relevant ribbon / brand which an action was taken
 * @property {string} entityName - 	ribbon / brand name on which an action was taken
 * @return {LogObject<bulkActionRibbonBrandEntityDeletedSrc10Evid995Params>} LogObject<bulkActionRibbonBrandEntityDeletedSrc10Evid995Params>
 */
export function bulkActionRibbonBrandEntityDeletedSrc10Evid995(params) {
    return {
        evid: 995,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonBrandAttachEntityToProductSrc10Evid996' event (evid: 996)
 *
 * Event description: user clicks on save and a ribbon / brand name is attached to products selected
 *
 * @param {bulkActionRibbonBrandAttachEntityToProductSrc10Evid996Params} params - The parameters for this event
 * @property {string} productGuid - The id of the relevant products were associated to the ribbon / brand
 * @property {number} numProducts - Number of products associated with the ribbon / brand which an action was taken
 * @property {GUID} id - 	The id of the relevant ribbon / brand which an action was taken
 * @property {string} entityName - 	ribbon / brand name on which an action was taken
 * @property {string} type - If the action is for Ribbon or to Brand modal
 * @return {LogObject<bulkActionRibbonBrandAttachEntityToProductSrc10Evid996Params>} LogObject<bulkActionRibbonBrandAttachEntityToProductSrc10Evid996Params>
 */
export function bulkActionRibbonBrandAttachEntityToProductSrc10Evid996(params) {
    return {
        evid: 996,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonBrandCreateUpdateEntitySrc10Evid997' event (evid: 997)
 *
 * Event description: user create / update a ribbon / brand and clicks save
 *
 *
 * @param {bulkActionRibbonBrandCreateUpdateEntitySrc10Evid997Params} params - The parameters for this event
 * @property {string} actionType - created / updated
 * @property {GUID} id - The id of the relevant ribbon / brand which an action was taken
 * @property {string} origin - productPage/bulkAction/moreActions productsList
 * @property {string} entityName - ribbon / brand name on which an action was taken
 * @property {boolean} isEmpty - isMerchant status
 * @property {string} type - If the action is for Ribbon or to Brand modal
 * @property {number} numProducts - Number of products associated with the ribbon / brand which an action was taken
 * @return {LogObject<bulkActionRibbonBrandCreateUpdateEntitySrc10Evid997Params>} LogObject<bulkActionRibbonBrandCreateUpdateEntitySrc10Evid997Params>
 */
export function bulkActionRibbonBrandCreateUpdateEntitySrc10Evid997(params) {
    return {
        evid: 997,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionRibbonBrandEditModalLoadedSrc10Evid998' event (evid: 998)
 *
 * Event description: after user clicked on more actions → edit ribbon / brand option, the modal loaded
 *
 *
 * @param {bulkActionRibbonBrandEditModalLoadedSrc10Evid998Params} params - The parameters for this event
 * @property {boolean} isEmpty - 	isMerchant status
 * @property {string} type - 	If the action is for Ribbon or to Brand modal
 * @property {string} origin - productPage/bulkAction/moreActions productsList
 * @return {LogObject<bulkActionRibbonBrandEditModalLoadedSrc10Evid998Params>} LogObject<bulkActionRibbonBrandEditModalLoadedSrc10Evid998Params>
 */
export function bulkActionRibbonBrandEditModalLoadedSrc10Evid998(params) {
    return {
        evid: 998,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyEventForTestsInBo' event (evid: 999)
 *
 * Event description: dummy event for tests in BO
 *
 * @param {dummyEventForTestsInBoParams} params - The parameters for this event
 * @property {GUID} storeId - store_id
 * @property {string} testName - test name / exposure point
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - value relevant for exposure / action
 * @property {GUID} bi_token - msid
 * @return {LogObject<dummyEventForTestsInBoParams>} LogObject<dummyEventForTestsInBoParams>
 */
export function dummyEventForTestsInBo(params) {
    return {
        evid: 999,
        src: 10,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardPageLoadedInBm' event (evid: 1)
 *
 * Event description: when in Business Manager Gift Card page is loaded ( empty state, Settings / Setup .. )
 *
 * @param {giftCardPageLoadedInBmParams} params - The parameters for this event
 * @property {string} state - empty / full for Sales page
 * @property {string} id - gift card id for detailed view page  / id of gift card template for setUp page
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} pageName - settings/setUp/sales/detailedView/emptyState
 * @return {LogObject<giftCardPageLoadedInBmParams>} LogObject<giftCardPageLoadedInBmParams>
 */
export function giftCardPageLoadedInBm(params) {
    return {
        evid: 1,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'gcAppInstalled' event (evid: 17)
 *
 * Event description: GC got response from server
 *
 * @param {gcAppInstalledParams} params - The parameters for this event
 * @property {string} errorMessage - only in case of error
 * @property {string} state - success / error
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<gcAppInstalledParams>} LogObject<gcAppInstalledParams>
 */
export function gcAppInstalled(params) {
    return {
        evid: 17,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickEditGiftCardBm' event (evid: 18)
 *
 * Event description: when 'edit gift card' clicked in BM
 *
 * @param {clickEditGiftCardBmParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickEditGiftCardBmParams>} LogObject<clickEditGiftCardBmParams>
 */
export function clickEditGiftCardBm(params) {
    return {
        evid: 18,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewInEditorInBm' event (evid: 19)
 *
 * Event description: When view in editor is clicked in BM
 *
 * @param {clickViewInEditorInBmParams} params - The parameters for this event
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickViewInEditorInBmParams>} LogObject<clickViewInEditorInBmParams>
 */
export function clickViewInEditorInBm(params) {
    return {
        evid: 19,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddGiftCardToSiteInBm' event (evid: 2)
 *
 * Event description: when in BM empty state user clicks on add gift card to site
 *
 * @param {clickAddGiftCardToSiteInBmParams} params - The parameters for this event
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickAddGiftCardToSiteInBmParams>} LogObject<clickAddGiftCardToSiteInBmParams>
 */
export function clickAddGiftCardToSiteInBm(params) {
    return {
        evid: 2,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickBuyNowAddToCart' event (evid: 20)
 *
 * Event description: Visitor clicks "Buy Now" in Gift Card product page (leads to Checkout)
 *
 * @param {clickBuyNowAddToCartParams} params - The parameters for this event
 * @property {number} quantity - number of gift cards
 * @property {number} priceOption - selected price option, INT
 * @property {string} redirectType - checkout / cart / mini cart
 * @property {DateTime} deliveryDate - Send in unixtime (miliseconds)
 * @property {string} editorMode - mobile / desktop
 * @property {string} currency - currency
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - Id of gift card template
 * @property {string} type - buy now / add to cart
 * @property {boolean} hasDeliveryDate - If delivery date is shown
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<clickBuyNowAddToCartParams>} LogObject<clickBuyNowAddToCartParams>
 */
export function clickBuyNowAddToCart(params) {
    return {
        evid: 20,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardCodeValidation' event (evid: 2000)
 *
 * Event description: when Gifted App calls us and we validate and crete Gift card code in our DB. This is basically sent when the gift card was created on Wix platform. Added hashedGiftCardCode on July 2022
 *
 * @param {giftCardCodeValidationParams} params - The parameters for this event
 * @property {string} giftCardId - id of git card
 * @property {string} externalOrderId - order Id on Gifted side
 * @property {string} appInstanceId - uniq identifyer of Gifted App on site
 * @property {string} appDefId - app_def_id
 * @property {number} giftCardAmountLong - INT, multiplied by 100 000
 * @property {string} currencyCode - currency
 * @property {string} hashedGiftCardCode - hashed_gift_card_code
 * @property {GUID} providerAppDefId - id of gift card provider
 * @property {string} identityType - identity_type
 * @return {LogObject<giftCardCodeValidationParams>} LogObject<giftCardCodeValidationParams>
 */
export function giftCardCodeValidation(params) {
    return {
        evid: 2000,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardRedeem' event (evid: 2001)
 *
 * Event description: when gift card is redeemed successfully. Added hashedGiftCardCode on July 2022
 *
 * @param {giftCardRedeemParams} params - The parameters for this event
 * @property {string} giftCardId - uniq identifyer of gift card
 * @property {GUID} visitorId - if we know it?
 * @property {string} appInstanceId - uniq identifyer of Gifted App on site
 * @property {string} providerTransactionId - uniq identifyer of redeem transaction in Gifted
 * @property {string} appDefId - app_def_id
 * @property {number} redeemAmountLong - INT, multiplied by 100 000
 * @property {GUID} redeemTransactionId - uniq identifyer of redeem transaction in Wix
 * @property {string} currencyCode - currency
 * @property {string} hashedGiftCardCode - Hashed gift card code
 * @property {GUID} providerAppDefId - id of Gifted App
 * @property {string} identityType - identity_type
 * @return {LogObject<giftCardRedeemParams>} LogObject<giftCardRedeemParams>
 */
export function giftCardRedeem(params) {
    return {
        evid: 2001,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardVoid' event (evid: 2002)
 *
 * Event description: when gift card transaction was voided (happens if redeem suceeded but cashier / inventory failed and order was not created )
 *
 * @param {giftCardVoidParams} params - The parameters for this event
 * @property {string} giftCardId - uniq identifyer of gift card
 * @property {GUID} visitorId - if we know it?
 * @property {string} appInstanceId - uniq identifyer of Gifted App on site
 * @property {string} providerTransactionId - uniq identifyer of redeem transaction in Gifted
 * @property {string} appDefId - app_def_id
 * @property {GUID} redeemTransactionId - uniq identifyer of redeem transaction in Wix
 * @property {GUID} providerAppDefId - id of Gifted App
 * @property {string} identityType - identity_type
 * @return {LogObject<giftCardVoidParams>} LogObject<giftCardVoidParams>
 */
export function giftCardVoid(params) {
    return {
        evid: 2002,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveGiftCardTemplate' event (evid: 21)
 *
 * Event description: when save gift card is cliced in BM
 *
 * @param {clickSaveGiftCardTemplateParams} params - The parameters for this event
 * @property {boolean} isCustomValueEnabled - True/False
 * @property {string} name - Gift card template name
 * @property {string} description - Gift card template description
 * @property {boolean} isDefaultImage - false/true
 * @property {number} monthsUntilExpired - Month to expiration if exists
 * @property {string} updatedVariantsFields - json[{variant_id, updatedFields:[]}]]
 * @property {string} updatedFields - json[FIELD_NAME…]
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - Id of gift card template
 * @property {string} variants - json [ ​​{ id: string price: number value: number hasMedia: bool } ]
 * @return {LogObject<clickSaveGiftCardTemplateParams>} LogObject<clickSaveGiftCardTemplateParams>
 */
export function clickSaveGiftCardTemplate(params) {
    return {
        evid: 21,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCancelInGiftCardTemplateBm' event (evid: 22)
 *
 * Event description: When  'cancel' is clicked in gift card template BM
 *
 * @param {clickCancelInGiftCardTemplateBmParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickCancelInGiftCardTemplateBmParams>} LogObject<clickCancelInGiftCardTemplateBmParams>
 */
export function clickCancelInGiftCardTemplateBm(params) {
    return {
        evid: 22,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'triggerSendingEmail' event (evid: 2200)
 *
 * Event description: Rise proxy triggers a domain event to send email
 *
 * @param {triggerSendingEmailParams} params - The parameters for this event
 * @property {string} recepientContactId - contact of recipient of Gift Card
 * @property {GUID} giftCardId - gift_card_id
 * @property {DateTime} deliveryDate - delivery_date
 * @property {string} origin - purchase / resend
 * @property {GUID} providerAppDefId - Send in unixtime (miliseconds)
 * @property {string} type - recipient / buyer / recipient opened
 * @property {string} buyerContactId - Contact of buyer of Gift card
 * @return {LogObject<triggerSendingEmailParams>} LogObject<triggerSendingEmailParams>
 */
export function triggerSendingEmail(params) {
    return {
        evid: 2200,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardDisabled' event (evid: 2201)
 *
 * Event description: Gift card disabled
 *
 * @param {giftCardDisabledParams} params - The parameters for this event
 * @property {GUID} giftCardId - Id of gift card
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<giftCardDisabledParams>} LogObject<giftCardDisabledParams>
 */
export function giftCardDisabled(params) {
    return {
        evid: 2201,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'gcTemplateUpdated' event (evid: 2202)
 *
 * Event description: GC template Updated.
 *
 * @param {gcTemplateUpdatedParams} params - The parameters for this event
 * @property {string} name - name
 * @property {string} priceOptions - List of price Options
 * @property {string} description - description
 * @property {boolean} neverExpire - never_expire
 * @property {number} monthsUntilExpired - INTEGER , Expiration Term in Months
 * @property {string} imageId - Id of image (default is e90a2a_c3de803545f340df9dd4aa88a72e0718~mv2.png)
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - Id of gift card template
 * @property {string} type - create / update
 * @return {LogObject<gcTemplateUpdatedParams>} LogObject<gcTemplateUpdatedParams>
 */
export function gcTemplateUpdated(params) {
    return {
        evid: 2202,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardPurchased' event (evid: 2203)
 *
 * Event description: When gift card is purchased
 *
 * @param {giftCardPurchasedParams} params - The parameters for this event
 * @property {string} giftCardId - Gift Cars ID
 * @property {string} orderId - order_id
 * @property {string} lineItemId - eCom line_item_id
 * @property {boolean} isSchedule - Is it a scheduling gift card
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} forWhom - for_whom
 * @return {LogObject<giftCardPurchasedParams>} LogObject<giftCardPurchasedParams>
 */
export function giftCardPurchased(params) {
    return {
        evid: 2203,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'filterAppliedInGcSalesPage' event (evid: 23)
 *
 * Event description: when filter is applied in GC sales page
 *
 * @param {filterAppliedInGcSalesPageParams} params - The parameters for this event
 * @property {number} numberOfFilteredSales - Number of sales after the filter was applied
 * @property {boolean} isAdded - Ture (If filter added) False (if removed)
 * @property {string} filterStatus - json {fromDate: DATE,toDate: DATE, search: VALUE}
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} filterCategory - fromDate/ toDate/search/clearAll
 * @return {LogObject<filterAppliedInGcSalesPageParams>} LogObject<filterAppliedInGcSalesPageParams>
 */
export function filterAppliedInGcSalesPage(params) {
    return {
        evid: 23,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnGiftCardInSalesPage' event (evid: 24)
 *
 * Event description: Click on Gift Card in Sales page.
 *
 * @param {clickOnGiftCardInSalesPageParams} params - The parameters for this event
 * @property {string} giftCardId - Id of gift card
 * @property {string} state - state
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickOnGiftCardInSalesPageParams>} LogObject<clickOnGiftCardInSalesPageParams>
 */
export function clickOnGiftCardInSalesPage(params) {
    return {
        evid: 24,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnOrderInDetailedViewPage' event (evid: 25)
 *
 * Event description: When order in detailedView page is clicked
 *
 * @param {clickOnOrderInDetailedViewPageParams} params - The parameters for this event
 * @property {string} giftCardId - Id of gift card
 * @property {GUID} orderId - Order ID
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} type - purchase / redeem
 * @return {LogObject<clickOnOrderInDetailedViewPageParams>} LogObject<clickOnOrderInDetailedViewPageParams>
 */
export function clickOnOrderInDetailedViewPage(params) {
    return {
        evid: 25,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnContactInDetailedViewPage' event (evid: 26)
 *
 * Event description: When contact in detailedView page is clicked
 *
 * @param {clickOnContactInDetailedViewPageParams} params - The parameters for this event
 * @property {string} giftCardId - Id of gift card
 * @property {GUID} contactId - Contact ID
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} type - sender / recipient
 * @return {LogObject<clickOnContactInDetailedViewPageParams>} LogObject<clickOnContactInDetailedViewPageParams>
 */
export function clickOnContactInDetailedViewPage(params) {
    return {
        evid: 26,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickResendGiftCardToOpenModal' event (evid: 27)
 *
 * Event description: when Resend Gift Card to open modal is clicked
 *
 * @param {clickResendGiftCardToOpenModalParams} params - The parameters for this event
 * @property {GUID} giftCardId - Gift card ID
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickResendGiftCardToOpenModalParams>} LogObject<clickResendGiftCardToOpenModalParams>
 */
export function clickResendGiftCardToOpenModal(params) {
    return {
        evid: 27,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInModalToResendGiftCard' event (evid: 28)
 *
 * Event description: when resend gift card  in modal is clicked
 *
 * @param {clickInModalToResendGiftCardParams} params - The parameters for this event
 * @property {GUID} giftCardId - gift_card_id
 * @property {boolean} isRecipientEmail - True when sent to the original recipient’s mail.
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickInModalToResendGiftCardParams>} LogObject<clickInModalToResendGiftCardParams>
 */
export function clickInModalToResendGiftCard(params) {
    return {
        evid: 28,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'click3DotsInDetailedView' event (evid: 29)
 *
 * Event description: Click 3dots in detailed view.
 *
 * @param {click3DotsInDetailedViewParams} params - The parameters for this event
 * @property {string} giftCardId - Id of gift card
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<click3DotsInDetailedViewParams>} LogObject<click3DotsInDetailedViewParams>
 */
export function click3DotsInDetailedView(params) {
    return {
        evid: 29,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'gcPageAddedToTheSiteInEditor' event (evid: 3)
 *
 * Event description: GC page was successfully added to site in editor
 *
 * @param {gcPageAddedToTheSiteInEditorParams} params - The parameters for this event
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<gcPageAddedToTheSiteInEditorParams>} LogObject<gcPageAddedToTheSiteInEditorParams>
 */
export function gcPageAddedToTheSiteInEditor(params) {
    return {
        evid: 3,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickDisableGcIn3Dots' event (evid: 30)
 *
 * Event description: Click disable GC in 3dots.
 *
 * @param {clickDisableGcIn3DotsParams} params - The parameters for this event
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickDisableGcIn3DotsParams>} LogObject<clickDisableGcIn3DotsParams>
 */
export function clickDisableGcIn3Dots(params) {
    return {
        evid: 30,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickDisableGcInConfirmationModal' event (evid: 33)
 *
 * Event description: Click disable GC in confirmation modal
 *
 * @param {clickDisableGcInConfirmationModalParams} params - The parameters for this event
 * @property {string} giftCardId - Gift card ID
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickDisableGcInConfirmationModalParams>} LogObject<clickDisableGcInConfirmationModalParams>
 */
export function clickDisableGcInConfirmationModal(params) {
    return {
        evid: 33,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'validationErrorInGcTemplate' event (evid: 34)
 *
 * Event description: When attempts to save GC template get an error
 *
 * @param {validationErrorInGcTemplateParams} params - The parameters for this event
 * @property {string} field - the field that caused error
 * @property {string} errorMessage - error message
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @return {LogObject<validationErrorInGcTemplateParams>} LogObject<validationErrorInGcTemplateParams>
 */
export function validationErrorInGcTemplate(params) {
    return {
        evid: 34,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'click3DotsInGcTemplateImage' event (evid: 35)
 *
 * Event description: When 3dots in GC Template Image is clicked
 *
 * @param {click3DotsInGcTemplateImageParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<click3DotsInGcTemplateImageParams>} LogObject<click3DotsInGcTemplateImageParams>
 */
export function click3DotsInGcTemplateImage(params) {
    return {
        evid: 35,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickChangeImageIn3DotsOfGcTemplateImage' event (evid: 36)
 *
 * Event description: When change image in 3dots of GC Template Image is clicked
 *
 * @param {clickChangeImageIn3DotsOfGcTemplateImageParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickChangeImageIn3DotsOfGcTemplateImageParams>} LogObject<clickChangeImageIn3DotsOfGcTemplateImageParams>
 */
export function clickChangeImageIn3DotsOfGcTemplateImage(params) {
    return {
        evid: 36,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickEditAltTextIn3DotsOfGcTemplateImage' event (evid: 37)
 *
 * Event description: When edit alt text in 3dots of GC Template Image is clicked
 *
 * @param {clickEditAltTextIn3DotsOfGcTemplateImageParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickEditAltTextIn3DotsOfGcTemplateImageParams>} LogObject<clickEditAltTextIn3DotsOfGcTemplateImageParams>
 */
export function clickEditAltTextIn3DotsOfGcTemplateImage(params) {
    return {
        evid: 37,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveAtAltTextIn3DotsOfGcTemplateImage' event (evid: 38)
 *
 * Event description: Click save at alt text in 3dots of GC Template Image.
 *
 * @param {clickSaveAtAltTextIn3DotsOfGcTemplateImageParams} params - The parameters for this event
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @property {string} updatedValue - the changed value
 * @return {LogObject<clickSaveAtAltTextIn3DotsOfGcTemplateImageParams>} LogObject<clickSaveAtAltTextIn3DotsOfGcTemplateImageParams>
 */
export function clickSaveAtAltTextIn3DotsOfGcTemplateImage(params) {
    return {
        evid: 38,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickRemoveImageAtAltTextIn3DotsOfGcTemplateImage' event (evid: 39)
 *
 * Event description: Click remove image in 3dots of GC Template Image.
 *
 * @param {clickRemoveImageAtAltTextIn3DotsOfGcTemplateImageParams} params - The parameters for this event
 * @property {string} productId - product_guid
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickRemoveImageAtAltTextIn3DotsOfGcTemplateImageParams>} LogObject<clickRemoveImageAtAltTextIn3DotsOfGcTemplateImageParams>
 */
export function clickRemoveImageAtAltTextIn3DotsOfGcTemplateImage(params) {
    return {
        evid: 39,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardPageLoadedInBmSrc125Evid4' event (evid: 4)
 *
 * Event description: when in Business Manager Gift Card page is loaded ( empty state, Settings / Setup .. )
 *
 * @param {giftCardPageLoadedInBmSrc125Evid4Params} params - The parameters for this event
 * @property {string} giftCardId - gift card ID for detailed view page
 * @property {string} state - empty / full for Sales page
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template in setUp/setting page
 * @property {string} pageName - settings/setUp/sales/detailedView/emptyState
 * @property {number} numberOfSales - Number of items in sales page
 * @return {LogObject<giftCardPageLoadedInBmSrc125Evid4Params>} LogObject<giftCardPageLoadedInBmSrc125Evid4Params>
 */
export function giftCardPageLoadedInBmSrc125Evid4(params) {
    return {
        evid: 4,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnAdvancedImagesAndPricesBm' event (evid: 40)
 *
 * Event description: click on advanced images and prices BM.
 *
 * @param {clickOnAdvancedImagesAndPricesBmParams} params - The parameters for this event
 * @property {string} productId - product_guid
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickOnAdvancedImagesAndPricesBmParams>} LogObject<clickOnAdvancedImagesAndPricesBmParams>
 */
export function clickOnAdvancedImagesAndPricesBm(params) {
    return {
        evid: 40,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveTempAdvancedImagesAndPricesBm' event (evid: 41)
 *
 * Event description: When advanced images and prices are saved in the 'advanced images and prices' modal
 *
 * @param {saveTempAdvancedImagesAndPricesBmParams} params - The parameters for this event
 * @property {string} variant - JsonArray
 * [
 * ​​{
 *   id: string
 *   price: number
 *   value: number
 *  hasMedia: bool
 * }
 * ]
 * @property {string} updatedVariantsFields - Array[{variant_id, updatedFields:[]}]]
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @return {LogObject<saveTempAdvancedImagesAndPricesBmParams>} LogObject<saveTempAdvancedImagesAndPricesBmParams>
 */
export function saveTempAdvancedImagesAndPricesBm(params) {
    return {
        evid: 41,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardPageAddedBannerShown' event (evid: 42)
 *
 * Event description: gift card page added banner shown.
 *
 * @param {giftCardPageAddedBannerShownParams} params - The parameters for this event
 * @property {string} productId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<giftCardPageAddedBannerShownParams>} LogObject<giftCardPageAddedBannerShownParams>
 */
export function giftCardPageAddedBannerShown(params) {
    return {
        evid: 42,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnLeftBarOfGcSettingsInEditor' event (evid: 43)
 *
 * Event description: When add a gift card to site in BM is clicked
 *
 * @param {clickOnLeftBarOfGcSettingsInEditorParams} params - The parameters for this event
 * @property {GUID} providerAppId - provider_app_id
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickOnLeftBarOfGcSettingsInEditorParams>} LogObject<clickOnLeftBarOfGcSettingsInEditorParams>
 */
export function clickOnLeftBarOfGcSettingsInEditor(params) {
    return {
        evid: 43,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeDeliveryDateQuantityInGcSettingsInEditor' event (evid: 44)
 *
 * Event description: Change  Delivery date / Quantity in GC settings in Editor.
 *
 * @param {changeDeliveryDateQuantityInGcSettingsInEditorParams} params - The parameters for this event
 * @property {string} tab - settings
 * @property {string} section - section
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - product_guid
 * @property {string} value - on/off
 * @return {LogObject<changeDeliveryDateQuantityInGcSettingsInEditorParams>} LogObject<changeDeliveryDateQuantityInGcSettingsInEditorParams>
 */
export function changeDeliveryDateQuantityInGcSettingsInEditor(params) {
    return {
        evid: 44,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeCustomersCanBuyInGcSettingsInEditor' event (evid: 45)
 *
 * Event description: Change customers can buy in GC settings in Editor
 *
 * @param {changeCustomersCanBuyInGcSettingsInEditorParams} params - The parameters for this event
 * @property {string} tab - settings
 * @property {string} section - Purchase GC for
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @property {string} value - Someone else / Themselves / Both
 * @return {LogObject<changeCustomersCanBuyInGcSettingsInEditorParams>} LogObject<changeCustomersCanBuyInGcSettingsInEditorParams>
 */
export function changeCustomersCanBuyInGcSettingsInEditor(params) {
    return {
        evid: 45,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeTextInGcSettingsInEditor' event (evid: 46)
 *
 * Event description: Change text in GC settings in Editor.
 *
 * @param {changeTextInGcSettingsInEditorParams} params - The parameters for this event
 * @property {string} tab - tab
 * @property {string} section - amount/recepient email / delivery date/ recipient name / message / quantity / Who’s The Gift Card for?/For someone else/For myself/buy now button/Custom Amount Label
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @property {string} value - value
 * @return {LogObject<changeTextInGcSettingsInEditorParams>} LogObject<changeTextInGcSettingsInEditorParams>
 */
export function changeTextInGcSettingsInEditor(params) {
    return {
        evid: 46,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeDesignInGcSettingsInEditor' event (evid: 47)
 *
 * Event description: Change design in GC settings in Editor
 *
 * @param {changeDesignInGcSettingsInEditorParams} params - The parameters for this event
 * @property {string} tab - design
 * @property {string} section - background opacity / image border opacity / gift card name / gift card price / gift card description / input field titles / input field
 * @property {string} values - value
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @return {LogObject<changeDesignInGcSettingsInEditorParams>} LogObject<changeDesignInGcSettingsInEditorParams>
 */
export function changeDesignInGcSettingsInEditor(params) {
    return {
        evid: 47,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'resetGiftCardDesignSettingsInEditor' event (evid: 48)
 *
 * Event description: Reset Gift Card Design Settings in editor
 *
 * @param {resetGiftCardDesignSettingsInEditorParams} params - The parameters for this event
 * @property {string} tab - design
 * @property {string} section - background & Boarders / Gift Card Details / Buttons
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @return {LogObject<resetGiftCardDesignSettingsInEditorParams>} LogObject<resetGiftCardDesignSettingsInEditorParams>
 */
export function resetGiftCardDesignSettingsInEditor(params) {
    return {
        evid: 48,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCustomValueGcCheckbox' event (evid: 49)
 *
 * Event description: When chekbox of enabling or disabling costum value for GC is clicked
 *
 * @param {clickCustomValueGcCheckboxParams} params - The parameters for this event
 * @property {string} values - enable/disable
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickCustomValueGcCheckboxParams>} LogObject<clickCustomValueGcCheckboxParams>
 */
export function clickCustomValueGcCheckbox(params) {
    return {
        evid: 49,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickLearnMoreBm' event (evid: 5)
 *
 * Event description: When 'learn more' button is clicked in BM
 *
 * @param {clickLearnMoreBmParams} params - The parameters for this event
 * @property {string} articleName - article_name
 * @property {string} origin - settings/setUp/sales/detailedView/welcomeScreen
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} lang - article language
 * @return {LogObject<clickLearnMoreBmParams>} LogObject<clickLearnMoreBmParams>
 */
export function clickLearnMoreBm(params) {
    return {
        evid: 5,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeGcQuantity' event (evid: 50)
 *
 * Event description: Change GC Quantity
 *
 * @param {changeGcQuantityParams} params - The parameters for this event
 * @property {string} section - amount/recepient email / delivery date/ recipient name / message / quantity / Who’s The Gift Card for?/For someone else/For myself/buy now button
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - ID of gift card template
 * @property {string} value - {fixed amount: numeric,Custom amount: numeric,recipient email: string,quantity: numeric, deliveryDate:date,who'stTheGiftCardFor?:boolean}
 * @return {LogObject<changeGcQuantityParams>} LogObject<changeGcQuantityParams>
 */
export function changeGcQuantity(params) {
    return {
        evid: 50,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInGiftCardPageAddedBanner' event (evid: 51)
 *
 * Event description: click in gift card page added banner
 *
 * @param {clickInGiftCardPageAddedBannerParams} params - The parameters for this event
 * @property {GUID} giftCardId - ID of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickInGiftCardPageAddedBannerParams>} LogObject<clickInGiftCardPageAddedBannerParams>
 */
export function clickInGiftCardPageAddedBanner(params) {
    return {
        evid: 51,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editorCheckUncheckShowButtonOfAddToCartBuyNow' event (evid: 52)
 *
 * Event description: When a user check/uncheck add to cart/buy now option in the editor
 *
 * @param {editorCheckUncheckShowButtonOfAddToCartBuyNowParams} params - The parameters for this event
 * @property {string} button - Button - add to cart/buy now
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} action - checked/unchecked
 * @return {LogObject<editorCheckUncheckShowButtonOfAddToCartBuyNowParams>} LogObject<editorCheckUncheckShowButtonOfAddToCartBuyNowParams>
 */
export function editorCheckUncheckShowButtonOfAddToCartBuyNow(params) {
    return {
        evid: 52,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editorClickOnActionOptionToAddToCart' event (evid: 53)
 *
 * Event description: When a user clicks on add to cart action option in the editor
 *
 * @param {editorClickOnActionOptionToAddToCartParams} params - The parameters for this event
 * @property {string} action - Show success pop-up/open mini cart/Go to cart page/Stay on gift card page
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<editorClickOnActionOptionToAddToCartParams>} LogObject<editorClickOnActionOptionToAddToCartParams>
 */
export function editorClickOnActionOptionToAddToCart(params) {
    return {
        evid: 53,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnWhoSTheGiftForOption' event (evid: 54)
 *
 * Event description: When uou click on for someone else/for myself
 *
 * @param {clickOnWhoSTheGiftForOptionParams} params - The parameters for this event
 * @property {string} button - ‘For someone else’ / ‘For myself’
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<clickOnWhoSTheGiftForOptionParams>} LogObject<clickOnWhoSTheGiftForOptionParams>
 */
export function clickOnWhoSTheGiftForOption(params) {
    return {
        evid: 54,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewGcProductPageInEditor' event (evid: 6)
 *
 * Event description: User view Gift card page in Editor / preview mode OR UoU view GC product page in live site
 *
 * @param {viewGcProductPageInEditorParams} params - The parameters for this event
 * @property {string} viewMode - site / editor
 * @property {string} priceOptions - List of available price options
 * @property {boolean} isBuyNowDisplayed - True - when the buy now button is showed in the GC product page
 * @property {boolean} isAddToCartDisplayed - True - when the add to cart button is showed in the GC product page
 * @property {string} editorMode - mobile / desktop
 * @property {string} settingBuyGcFor - The option of giving the gift card as a gift that the uou sees in the GC page - both/gift/themself
 * @property {string} currency - currency
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - Id of gift card template
 * @property {boolean} hasDeliveryDate - If delivery date is shown
 * @return {LogObject<viewGcProductPageInEditorParams>} LogObject<viewGcProductPageInEditorParams>
 */
export function viewGcProductPageInEditor(params) {
    return {
        evid: 6,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'openGcSettingsNEditor' event (evid: 7)
 *
 * Event description: User clicked on settings in Editor in Gift Card product page
 *
 * @param {openGcSettingsNEditorParams} params - The parameters for this event
 * @property {string} productId - Id of gift card template
 * @property {GUID} providerAppDefId - provider_app_id
 * @return {LogObject<openGcSettingsNEditorParams>} LogObject<openGcSettingsNEditorParams>
 */
export function openGcSettingsNEditor(params) {
    return {
        evid: 7,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCtaInGcSettingsInEditor' event (evid: 8)
 *
 * Event description: User clicked on Customize / manage CTA in  settings in Editor in Gift Card product page
 *
 * @param {clickOnCtaInGcSettingsInEditorParams} params - The parameters for this event
 * @property {string} name - customize/mange
 * @property {GUID} providerAppDefId - provider_app_id
 * @property {string} productId - Id of gift card template
 * @return {LogObject<clickOnCtaInGcSettingsInEditorParams>} LogObject<clickOnCtaInGcSettingsInEditorParams>
 */
export function clickOnCtaInGcSettingsInEditor(params) {
    return {
        evid: 8,
        src: 125,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pickupLocationCreated' event (evid: 1067)
 *
 * Event description: When a user creates a new shipping rule with pickup:
 *
 * @param {pickupLocationCreatedParams} params - The parameters for this event
 * @property {string} externalId - at the moment = shipping_rule_guid
 * @property {string} pickupTimeText - When will the order be ready - optional
 * @property {string} pickupInstructions - Pickup instructions
 * @property {string} country - The country where the pickup location is (not the region, the pickup address)
 * @property {string} pickupName - The name that the users gave to the pickup
 * @property {string} pickupLocationId - The id of the pickup location
 * @property {string} subdivision - The subdivision where the pickup location is (not the region, the pickup address)
 * @property {boolean} isShowed - True = pick-up option in showed in checkout.
 * False - pickup option is hide
 * @property {string} rates - jason with all rates rules- conditions and amounts
 * @return {LogObject<pickupLocationCreatedParams>} LogObject<pickupLocationCreatedParams>
 */
export function pickupLocationCreated(params) {
    return {
        evid: 1067,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pickupLocationUpdated' event (evid: 1068)
 *
 * Event description: When a user update a shipping rule with pickup
 *
 * @param {pickupLocationUpdatedParams} params - The parameters for this event
 * @property {string} externalId - at the moment = shipping_rule_guid
 * @property {string} pickupTimeText - When will the order be ready - optional
 * @property {string} pickupInstructions - Pickup instructions
 * @property {string} country - The country where the pickup Location is
 * @property {string} pickupName - The name that the users gave to the pickup
 * @property {string} pickupLocationId - The id of the pickup location
 * @property {string} subdivision - The subdivision where the pickup location is (not the region, the pickup address)
 * @property {boolean} isShowed - True = pick-up option in showed in checkout.
 * False - pickup option is hide
 * @property {string} rates - jason with all rates rules- conditions and amounts
 * @return {LogObject<pickupLocationUpdatedParams>} LogObject<pickupLocationUpdatedParams>
 */
export function pickupLocationUpdated(params) {
    return {
        evid: 1068,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pickupLocationDeleted' event (evid: 1078)
 *
 * Event description: When a user delets a shipping rule with pickup
 *
 * @param {pickupLocationDeletedParams} params - The parameters for this event
 * @property {string} pickupLocationId - The id of the pickup location
 * @return {LogObject<pickupLocationDeletedParams>} LogObject<pickupLocationDeletedParams>
 */
export function pickupLocationDeleted(params) {
    return {
        evid: 1078,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickToPreviewRefundCancelEmail' event (evid: 108)
 *
 * Event description: When the user click to preview cancel/refund email in the cancel modal
 *
 * @param {ordersClickToPreviewRefundCancelEmailParams} params - The parameters for this event
 * @property {boolean} isFreeTextChanged - True if the user changed the free text content, otherwise false
 * @property {string} appName - app name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} actionType - cancel / refund / cancel with refund
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @return {LogObject<ordersClickToPreviewRefundCancelEmailParams>} LogObject<ordersClickToPreviewRefundCancelEmailParams>
 */
export function ordersClickToPreviewRefundCancelEmail(params) {
    return {
        evid: 108,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageYourPayPalRefundPermissionShownToUser' event (evid: 135)
 *
 * Event description: When the  Refund Permission modal is shown to the user
 *
 * @param {manageYourPayPalRefundPermissionShownToUserParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @return {LogObject<manageYourPayPalRefundPermissionShownToUserParams>} LogObject<manageYourPayPalRefundPermissionShownToUserParams>
 */
export function manageYourPayPalRefundPermissionShownToUser(params) {
    return {
        evid: 135,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageYourPayPalRefundPermissionClickGoToAcceptPayment' event (evid: 136)
 *
 * Event description: When the user click the 'Go To Accept Payment'
 *
 * @param {manageYourPayPalRefundPermissionClickGoToAcceptPaymentParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @return {LogObject<manageYourPayPalRefundPermissionClickGoToAcceptPaymentParams>} LogObject<manageYourPayPalRefundPermissionClickGoToAcceptPaymentParams>
 */
export function manageYourPayPalRefundPermissionClickGoToAcceptPayment(params) {
    return {
        evid: 136,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickPrintLabelAfterPurchaseBm' event (evid: 162)
 *
 * Event description: when a user clicks on "Print Label" after a purchase
 *
 * @param {shippingLabelClickPrintLabelAfterPurchaseBmParams} params - The parameters for this event
 * @property {boolean} emailDefined - true if "send shipping confirmation email" is marked - if for free :)
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} orderAvailability - true/false
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - shipment_id
 * @return {LogObject<shippingLabelClickPrintLabelAfterPurchaseBmParams>} LogObject<shippingLabelClickPrintLabelAfterPurchaseBmParams>
 */
export function shippingLabelClickPrintLabelAfterPurchaseBm(params) {
    return {
        evid: 162,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsSettingsTrackYourTipsSrc130Evid18' event (evid: 18)
 *
 * Event description: When a user clicks view reports in "Track your tips" section
 *
 * @param {tipsSettingsTrackYourTipsSrc130Evid18Params} params - The parameters for this event
 * @property {GUID} appId - app id
 * @return {LogObject<tipsSettingsTrackYourTipsSrc130Evid18Params>} LogObject<tipsSettingsTrackYourTipsSrc130Evid18Params>
 */
export function tipsSettingsTrackYourTipsSrc130Evid18(params) {
    return {
        evid: 18,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickVoidLabelBm' event (evid: 180)
 *
 * Event description: after the user successfully purchased a label he can "void" it (cancel) from 3dots menu on the order page
 *
 * @param {shippingLabelClickVoidLabelBmParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - shipment_id
 * @return {LogObject<shippingLabelClickVoidLabelBmParams>} LogObject<shippingLabelClickVoidLabelBmParams>
 */
export function shippingLabelClickVoidLabelBm(params) {
    return {
        evid: 180,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorPaymentCollectionPrepared' event (evid: 1801)
 *
 * Event description: Payment collection prepared- when the payment details are transferred to cashier. If the payment is approved, an event will be sent to 1155.
 *
 * @param {paymentCollectorPaymentCollectionPreparedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} paymentGatewayOrderId - order_id- similar to the order id in cashier events
 * @property {string} appDefId - The id of the vertical/TPA that called the navigation button
 * @property {string} currency - currency
 * @property {boolean} isCustomAmount - Check mark is marked
 * @property {number} requestedAmountLong - requested amount- user input*100000
 * @return {LogObject<paymentCollectorPaymentCollectionPreparedParams>} LogObject<paymentCollectorPaymentCollectionPreparedParams>
 */
export function paymentCollectorPaymentCollectionPrepared(params) {
    return {
        evid: 1801,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorPaymentCollectionPreparationFailed' event (evid: 1803)
 *
 * Event description: Payment collection failed order is not approved.
 * This event will be sent when the "check if MOTO is available" happens - The whole flow:  Press "Collect Payment - Credit Card" -> "check if MOTO is available" -> send prepare payment collection.
 *
 * Valid also when the APIs will be opened.
 *
 * @param {paymentCollectorPaymentCollectionPreparationFailedParams} params - The parameters for this event
 * @property {string} failureReason - order_not approved, no_supported_payment methods, order_already_paid, invalid_amount_requested
 * @property {string} orderId - order_id
 * @property {string} appDefId - The id of the vertical/TPA that called the navigation button
 * @property {number} collectableAmountLong - collectable amount- amount collected from cashier*100000
 * @property {string} currency - currency
 * @property {number} requestedAmountLong - requested_amount_long
 * @return {LogObject<paymentCollectorPaymentCollectionPreparationFailedParams>} LogObject<paymentCollectorPaymentCollectionPreparationFailedParams>
 */
export function paymentCollectorPaymentCollectionPreparationFailed(params) {
    return {
        evid: 1803,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelConfirmVoidShippingLabelInWarningPopupBm' event (evid: 181)
 *
 * Event description: after user clicked "void shipping label" (cancel) from 3dots menu from order page user confirms cancelling label in the warning popup
 *
 * @param {shippingLabelConfirmVoidShippingLabelInWarningPopupBmParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - shipment_id
 * @return {LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupBmParams>} LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupBmParams>
 */
export function shippingLabelConfirmVoidShippingLabelInWarningPopupBm(params) {
    return {
        evid: 181,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickToAddTrackingNumber' event (evid: 191)
 *
 * Event description: User clicks on Add tracking number the order info (old Order page) / Fulfiller Action Menu (New order page). Click Add trac
 *
 * @param {ordersClickToAddTrackingNumberParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill, Modalist, FBA,...
 * @property {string} appName - app name
 * @property {string} fulfillerId - null for self fulfillment
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} origin - mainCTA/ 3 dots
 * @return {LogObject<ordersClickToAddTrackingNumberParams>} LogObject<ordersClickToAddTrackingNumberParams>
 */
export function ordersClickToAddTrackingNumber(params) {
    return {
        evid: 191,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnGoToMarketing' event (evid: 192)
 *
 * Event description: Click on "Go to Wix Marketing Tools " from BO . (e.g. from empty state of orders list page)
 *
 * @param {ordersClickOnGoToMarketingParams} params - The parameters for this event
 * @property {string} origin - e.g. orders.list
 * @property {string} appName - app_name
 * @return {LogObject<ordersClickOnGoToMarketingParams>} LogObject<ordersClickOnGoToMarketingParams>
 */
export function ordersClickOnGoToMarketing(params) {
    return {
        evid: 192,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnGoToTpaSDashboard' event (evid: 194)
 *
 * Event description: User clicks on "Go to.." (with link to TPA “orders” dashboard) inside fulfiller's menu of Order page
 *
 * @param {ordersClickOnGoToTpaSDashboardParams} params - The parameters for this event
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill )
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order/ fulfill
 * @return {LogObject<ordersClickOnGoToTpaSDashboardParams>} LogObject<ordersClickOnGoToTpaSDashboardParams>
 */
export function ordersClickOnGoToTpaSDashboard(params) {
    return {
        evid: 194,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickInSelectTrackingNumberToEditPopup' event (evid: 202)
 *
 * Event description: User clicks on "Next" in "Select tracking number to edit" popup (edit tracking number flow - appears only if user has multiple tracking numbers per order)
 *
 * @param {ordersClickInSelectTrackingNumberToEditPopupParams} params - The parameters for this event
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill )
 * @property {string} appName - app name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} carrierName - carrier name..
 * @return {LogObject<ordersClickInSelectTrackingNumberToEditPopupParams>} LogObject<ordersClickInSelectTrackingNumberToEditPopupParams>
 */
export function ordersClickInSelectTrackingNumberToEditPopup(params) {
    return {
        evid: 202,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickSortInOrdersTable' event (evid: 206)
 *
 * Event description: user click on the column name to sort by payment/fulfillment/
 *
 * @param {ordersClickSortInOrdersTableParams} params - The parameters for this event
 * @property {string} appName - wixstore (for oneApp); storeManagerApp / businessManagerStores for web
 * @property {string} direction - ascending/descending
 * @property {string} column - payment/fulfillment/order/date/customer/total
 * @return {LogObject<ordersClickSortInOrdersTableParams>} LogObject<ordersClickSortInOrdersTableParams>
 */
export function ordersClickSortInOrdersTable(params) {
    return {
        evid: 206,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChooseProductsToAddTrackingNumberOaSrc130Evid214' event (evid: 214)
 *
 * Event description: User clicks Click "To Some items" in add tracking number popup OA, leads to Open ChooseProducts screen
 *
 * @param {clickToChooseProductsToAddTrackingNumberOaSrc130Evid214Params} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} origin - fulfill/add tracking number
 * @return {LogObject<clickToChooseProductsToAddTrackingNumberOaSrc130Evid214Params>} LogObject<clickToChooseProductsToAddTrackingNumberOaSrc130Evid214Params>
 */
export function clickToChooseProductsToAddTrackingNumberOaSrc130Evid214(params) {
    return {
        evid: 214,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsChosenToAddTrackingNumberOa' event (evid: 215)
 *
 * Event description: User clicks "Add  tracking number" in choose product dialog OR clicks on "Apply to all products" in AddTracking Dialog in OneApp. Start of "Add tracking number flow" in OneApp (to scan barcode OR enter manually in Orders 3.0)
 *
 * @param {productsChosenToAddTrackingNumberOaParams} params - The parameters for this event
 * @property {number} quantity - number of item tracking number is applied
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {number} total - total number of items in order
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} productInfo - what is sent to server
 * @property {string} type - all / spesific
 * @return {LogObject<productsChosenToAddTrackingNumberOaParams>} LogObject<productsChosenToAddTrackingNumberOaParams>
 */
export function productsChosenToAddTrackingNumberOa(params) {
    return {
        evid: 215,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOn3DotsOrderSMenuOaSrc130Evid216' event (evid: 216)
 *
 * Event description: User clicks on 3dots  in Order's page in OneApp
 *
 * @param {clickOn3DotsOrderSMenuOaSrc130Evid216Params} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} channelType - POS / WEB
 * @return {LogObject<clickOn3DotsOrderSMenuOaSrc130Evid216Params>} LogObject<clickOn3DotsOrderSMenuOaSrc130Evid216Params>
 */
export function clickOn3DotsOrderSMenuOaSrc130Evid216(params) {
    return {
        evid: 216,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCopyShippingAddressOa' event (evid: 217)
 *
 * Event description: User clicks on Copy shipping address  in Order's page in OneApp
 *
 * @param {clickOnCopyShippingAddressOaParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} type - shipping
 * @return {LogObject<clickOnCopyShippingAddressOaParams>} LogObject<clickOnCopyShippingAddressOaParams>
 */
export function clickOnCopyShippingAddressOa(params) {
    return {
        evid: 217,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'refundDetailsShownToUserOa' event (evid: 220)
 *
 * Event description: When user clicked Issue refund for supported providers additional screen with ability to select spesific items to refund shown
 *
 * @param {refundDetailsShownToUserOaParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} origin - manage order
 * @property {string} paymentProvider - the payment
 * @return {LogObject<refundDetailsShownToUserOaParams>} LogObject<refundDetailsShownToUserOaParams>
 */
export function refundDetailsShownToUserOa(params) {
    return {
        evid: 220,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInRefundDetailsScreenOa' event (evid: 221)
 *
 * Event description: Click Next in Refund Options Screen in WixApp
 *
 * @param {clickInRefundDetailsScreenOaParams} params - The parameters for this event
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {string} orderId - order id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool)},{shipping: bool}
 * @property {string} origin - manage order
 * @property {string} paymentProvider - order payment provider
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {string} refundType - full / partial
 * @return {LogObject<clickInRefundDetailsScreenOaParams>} LogObject<clickInRefundDetailsScreenOaParams>
 */
export function clickInRefundDetailsScreenOa(params) {
    return {
        evid: 221,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnPrintPackingSlip' event (evid: 235)
 *
 * Event description: User clicks on "Print Packing Slip" inside fulfiller's menu (selffulfil) of Order page
 *
 * @param {ordersClickOnPrintPackingSlipParams} params - The parameters for this event
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - relevant for WixApp
 * @return {LogObject<ordersClickOnPrintPackingSlipParams>} LogObject<ordersClickOnPrintPackingSlipParams>
 */
export function ordersClickOnPrintPackingSlip(params) {
    return {
        evid: 235,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSendOrderToFulfillerClicked' event (evid: 240)
 *
 * Event description: User clicks on "Send to Fulfiller" in fulfiller bar view (from main CTA / 3dots menu)
 *
 * @param {ordersSendOrderToFulfillerClickedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - main / 3dots / OneApp
 * @return {LogObject<ordersSendOrderToFulfillerClickedParams>} LogObject<ordersSendOrderToFulfillerClickedParams>
 */
export function ordersSendOrderToFulfillerClicked(params) {
    return {
        evid: 240,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickEditContent' event (evid: 251)
 *
 * Event description: in settings tab - when click "edit content" to customize email
 *
 * @param {emailSettingsClickEditContentParams} params - The parameters for this event
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickEditContentParams>} LogObject<emailSettingsClickEditContentParams>
 */
export function emailSettingsClickEditContent(params) {
    return {
        evid: 251,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickPreview' event (evid: 252)
 *
 * Event description: in settings tab - when click "preview" in email notifications section
 *
 * @param {emailSettingsClickPreviewParams} params - The parameters for this event
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickPreviewParams>} LogObject<emailSettingsClickPreviewParams>
 */
export function emailSettingsClickPreview(params) {
    return {
        evid: 252,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickResetInEditModal' event (evid: 253)
 *
 * Event description: in edit email modal  - when click "reset"  to revert to default texts in email
 *
 * @param {emailSettingsClickResetInEditModalParams} params - The parameters for this event
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickResetInEditModalParams>} LogObject<emailSettingsClickResetInEditModalParams>
 */
export function emailSettingsClickResetInEditModal(params) {
    return {
        evid: 253,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickCancelInEditModal' event (evid: 254)
 *
 * Event description: in edit email modal  - when click "cancel "/closes the modal
 *
 * @param {emailSettingsClickCancelInEditModalParams} params - The parameters for this event
 * @property {string} emailType - email_type
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickCancelInEditModalParams>} LogObject<emailSettingsClickCancelInEditModalParams>
 */
export function emailSettingsClickCancelInEditModal(params) {
    return {
        evid: 254,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickSaveAndPreviewInEditModal' event (evid: 255)
 *
 * Event description: in edit email modal  - when click "ave and preview" to open Preview
 *
 * @param {emailSettingsClickSaveAndPreviewInEditModalParams} params - The parameters for this event
 * @property {string} footerSubtitle - deafult / changed
 * @property {string} subtitle - deafult / changed
 * @property {string} footerTitle - deafult / changed
 * @property {string} showEmail - deafult / changed
 * @property {string} email - deafult / changed
 * @property {string} appName - app_name
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {boolean} phoneChecked - true - if show phone checked in
 * @property {string} showPhone - deafult / changed
 * @property {boolean} emailChecked - true - if show email checked in
 * @property {string} title - deafult / changed
 * @property {boolean} isDefault - if user is saving default settings
 * @property {string} phone - deafult / changed
 * @return {LogObject<emailSettingsClickSaveAndPreviewInEditModalParams>} LogObject<emailSettingsClickSaveAndPreviewInEditModalParams>
 */
export function emailSettingsClickSaveAndPreviewInEditModal(params) {
    return {
        evid: 255,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickCloseInPreview' event (evid: 256)
 *
 * Event description: in Preview  - when user clicks "close" - the email customization is set,
 *
 * @param {emailSettingsClickCloseInPreviewParams} params - The parameters for this event
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickCloseInPreviewParams>} LogObject<emailSettingsClickCloseInPreviewParams>
 */
export function emailSettingsClickCloseInPreview(params) {
    return {
        evid: 256,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickEditInPreview' event (evid: 257)
 *
 * Event description: in Preview  - when user clicks "edit" and goes back to edit modal
 *
 * @param {emailSettingsClickEditInPreviewParams} params - The parameters for this event
 * @property {string} emailType - orderPlaced / orderShipped / digitalProductOrder / readyForPickup
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickEditInPreviewParams>} LogObject<emailSettingsClickEditInPreviewParams>
 */
export function emailSettingsClickEditInPreview(params) {
    return {
        evid: 257,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailSettingsClickLearnMoreInEditModal' event (evid: 258)
 *
 * Event description: in Preview  - when user clicks "edit" and goes back to edit modal
 *
 * @param {emailSettingsClickLearnMoreInEditModalParams} params - The parameters for this event
 * @property {string} emailType - email_type
 * @property {string} appName - app_name
 * @return {LogObject<emailSettingsClickLearnMoreInEditModalParams>} LogObject<emailSettingsClickLearnMoreInEditModalParams>
 */
export function emailSettingsClickLearnMoreInEditModal(params) {
    return {
        evid: 258,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingPickupAddressOa' event (evid: 274)
 *
 * Event description: User clicks on shipping address  in Order's page in OneApp to expand/ collapse it
 *
 * @param {clickOnShippingPickupAddressOaParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} type - shipping / pickup
 * @property {string} value - expand / collapse
 * @return {LogObject<clickOnShippingPickupAddressOaParams>} LogObject<clickOnShippingPickupAddressOaParams>
 */
export function clickOnShippingPickupAddressOa(params) {
    return {
        evid: 274,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOn3DotsInOrderItemSSectionMenu' event (evid: 275)
 *
 * Event description: User clicks on 3 dots in fulfiller's menu (selffulfil/TPA)
 *
 * @param {ordersClickOn3DotsInOrderItemSSectionMenuParams} params - The parameters for this event
 * @property {string} sectionType - SelfFulfillment / CustomFulfiller / Dropshipper / Digital / Pos / Pickup / Invoice / GiftCard
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} appName - app_name
 * @property {string} fulfillerId - Null for self fulfilment
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfil/TPA
 * @return {LogObject<ordersClickOn3DotsInOrderItemSSectionMenuParams>} LogObject<ordersClickOn3DotsInOrderItemSSectionMenuParams>
 */
export function ordersClickOn3DotsInOrderItemSSectionMenu(params) {
    return {
        evid: 275,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeMethodOfAddingTrackingNumberOa' event (evid: 277)
 *
 * Event description: User clicks on  scan barcode in adding tracking number manually screen or "enter code manually" / back in scan barcode screen
 *
 * @param {changeMethodOfAddingTrackingNumberOaParams} params - The parameters for this event
 * @property {string} method - manually / scan
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} type - button / close
 * @return {LogObject<changeMethodOfAddingTrackingNumberOaParams>} LogObject<changeMethodOfAddingTrackingNumberOaParams>
 */
export function changeMethodOfAddingTrackingNumberOa(params) {
    return {
        evid: 277,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickAddCarrierOa' event (evid: 278)
 *
 * Event description: User clicks add Carrier in Shipping Carrier Screen OA
 *
 * @param {clickAddCarrierOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @return {LogObject<clickAddCarrierOaParams>} LogObject<clickAddCarrierOaParams>
 */
export function clickAddCarrierOa(params) {
    return {
        evid: 278,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'newCarrierAddedOa' event (evid: 279)
 *
 * Event description: User successfully added carrier in Add Carrier Screen OA
 *
 * @param {newCarrierAddedOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill, Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} carrierName - carrier_name
 * @return {LogObject<newCarrierAddedOaParams>} LogObject<newCarrierAddedOaParams>
 */
export function newCarrierAddedOa(params) {
    return {
        evid: 279,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsSettingsDefaultSelectedTipSrc130Evid28' event (evid: 28)
 *
 * Event description: When a user adds default selected tip
 *
 *
 * @param {tipsSettingsDefaultSelectedTipSrc130Evid28Params} params - The parameters for this event
 * @property {string} value - the selected value from the dropdown
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsSettingsDefaultSelectedTipSrc130Evid28Params>} LogObject<tipsSettingsDefaultSelectedTipSrc130Evid28Params>
 */
export function tipsSettingsDefaultSelectedTipSrc130Evid28(params) {
    return {
        evid: 28,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDropDownToChangeCarrierOa' event (evid: 280)
 *
 * Event description: User clicks clicks on drop-down in add tracking number screen  to change carrier OA
 *
 * @param {clickOnDropDownToChangeCarrierOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill, Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @return {LogObject<clickOnDropDownToChangeCarrierOaParams>} LogObject<clickOnDropDownToChangeCarrierOaParams>
 */
export function clickOnDropDownToChangeCarrierOa(params) {
    return {
        evid: 280,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'closeAddTrackingNumberScreenOa' event (evid: 281)
 *
 * Event description: User clicks clicks on "x" in add/edit tracking number screen (did not save)
 *
 * @param {closeAddTrackingNumberScreenOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @return {LogObject<closeAddTrackingNumberScreenOaParams>} LogObject<closeAddTrackingNumberScreenOaParams>
 */
export function closeAddTrackingNumberScreenOa(params) {
    return {
        evid: 281,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pdfOfOrderLoadedOa' event (evid: 284)
 *
 * Event description: after user  clicked on "print packing slip" of order in OA pdf successfully loaded
 *
 * @param {pdfOfOrderLoadedOaParams} params - The parameters for this event
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} type - order / packing_slip / shipping_label
 * @return {LogObject<pdfOfOrderLoadedOaParams>} LogObject<pdfOfOrderLoadedOaParams>
 */
export function pdfOfOrderLoadedOa(params) {
    return {
        evid: 284,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderSentToPrintOa' event (evid: 285)
 *
 * Event description: after of order in OA pdf successfully loaded, user sends it to print
 *
 * @param {orderSentToPrintOaParams} params - The parameters for this event
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} type - order / packing_slip / shipping_label
 * @return {LogObject<orderSentToPrintOaParams>} LogObject<orderSentToPrintOaParams>
 */
export function orderSentToPrintOa(params) {
    return {
        evid: 285,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInDiscardChangesTrackingNumberPopupOa' event (evid: 287)
 *
 * Event description: user clicks "discard" / cancel" in discard changes popup,  after he clicked on "x" in add/edit tracking number screen (did not save) and warning popup appeared
 *
 * @param {clickInDiscardChangesTrackingNumberPopupOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - add / edit
 * @property {string} fulfillerType - selffulfill/TPA/customFulfil
 * @property {string} value - discard / cancel
 * @return {LogObject<clickInDiscardChangesTrackingNumberPopupOaParams>} LogObject<clickInDiscardChangesTrackingNumberPopupOaParams>
 */
export function clickInDiscardChangesTrackingNumberPopupOa(params) {
    return {
        evid: 287,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersOrdersFilterChange' event (evid: 296)
 *
 * Event description: When the user changes the orders filter
 *
 * @param {ordersOrdersFilterChangeParams} params - The parameters for this event
 * @property {string} filterValue - true if filter added, false if filter removed
 * @property {string} appName - app_name
 * @property {string} origin - the origin the filter was changed from ('orders list' / ''panel')
 * @property {string} filterSubcategory - the subcategory chosen (not all categories have BI for their sub-categories)
 * @property {string} filterCategory - 'Fulfillment' / 'Payment Status' / 'Dates' / 'Products' / 'Subscription' / 'Sales Channel' / 'Archive' / 'Clear All'
 * @return {LogObject<ordersOrdersFilterChangeParams>} LogObject<ordersOrdersFilterChangeParams>
 */
export function ordersOrdersFilterChange(params) {
    return {
        evid: 296,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersFilterMoreFiltersClicked' event (evid: 297)
 *
 * Event description: When the user clicks on "More Filters"
 *
 * @param {ordersFilterMoreFiltersClickedParams} params - The parameters for this event
 * @property {string} appName - appName
 * @return {LogObject<ordersFilterMoreFiltersClickedParams>} LogObject<ordersFilterMoreFiltersClickedParams>
 */
export function ordersFilterMoreFiltersClicked(params) {
    return {
        evid: 297,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersFilterPanelOpened' event (evid: 298)
 *
 * Event description: Orders Filter -> Panel Opened.
 *
 * @param {ordersFilterPanelOpenedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersFilterPanelOpenedParams>} LogObject<ordersFilterPanelOpenedParams>
 */
export function ordersFilterPanelOpened(params) {
    return {
        evid: 298,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsSettingsAdditionalSettingsSrc130Evid30' event (evid: 30)
 *
 * Event description: When a user chose additional settings
 *
 *
 * @param {tipsSettingsAdditionalSettingsSrc130Evid30Params} params - The parameters for this event
 * @property {string} value - the selected value from the radio buttons (proportionally / evenly)
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsSettingsAdditionalSettingsSrc130Evid30Params>} LogObject<tipsSettingsAdditionalSettingsSrc130Evid30Params>
 */
export function tipsSettingsAdditionalSettingsSrc130Evid30(params) {
    return {
        evid: 30,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoadBm' event (evid: 313)
 *
 * Event description: BM page load
 *
 * @param {pageLoadBmParams} params - The parameters for this event
 * @property {string} referralInfo - referral_info
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {boolean} withProductTaxGroups - true if page was loaded with productTaxGroups enabled (only for Tax tb and product page)
 * @property {string} listView - this field contains the data about the list view, if the page contain a list that can be edited
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} paidStatus - relevant only for orders page: paid, notPaid, partiallyRefunded , refunded
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} previousPage - last page seen by the user(product_page,products_catalog, editor...)
 * @property {string} shippingStatus - relevant only for orders page:    fulfilled, notFulfilled, partiallyFulfilled, cancelled
 * @property {string} origin - store manager / place order / order paid
 * @property {string} pageState - can be different for each page, e.g. empty state, with orders...
 * @property {boolean} hasOnlineStoreInstalled - if user at the opening ecom platform pages has online store installed (215..)
 * @property {number} loadTime - load_time
 * @property {boolean} isPremium - is the user a premium user when opening store manager
 * @property {string} pageName - page name in BO
 * @return {LogObject<pageLoadBmParams>} LogObject<pageLoadBmParams>
 */
export function pageLoadBm(params) {
    return {
        evid: 313,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingChangeCheckoutSetting' event (evid: 315)
 *
 * Event description: in eCommerce settings - when toggling on/off the SF visibility toggle or mark the mandatory checkbox
 *
 * @param {settingChangeCheckoutSettingParams} params - The parameters for this event
 * @property {string} field - company_name/address/phone/policy_agreement/subscription/ custom
 * @property {string} appName - app_name
 * @property {string} type - visibility / mandatory / default_state/ title (for custom)
 * @property {string} value - on/off (for type =visibility ) | checked / unchecked (for type = mandatory / default_state) | user's string value (for title)
 * @return {LogObject<settingChangeCheckoutSettingParams>} LogObject<settingChangeCheckoutSettingParams>
 */
export function settingChangeCheckoutSetting(params) {
    return {
        evid: 315,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingChangeECommerceSettingsField' event (evid: 319)
 *
 * Event description: in settings tab - when changing one of the text fields or the eCommerce logo
 *
 * @param {settingChangeECommerceSettingsFieldParams} params - The parameters for this event
 * @property {string} parameter - logo, busines name, phone, email address, address, email to buyer, mandatory cpf/cnpj tax (BR), minimum order
 * @property {string} appName - app_name
 * @property {string} origin - home/ bisiness info tab
 * @property {string} type - currently only in minimum order enable / input
 * @property {string} newValue - only for relevant fields
 * @return {LogObject<settingChangeECommerceSettingsFieldParams>} LogObject<settingChangeECommerceSettingsFieldParams>
 */
export function settingChangeECommerceSettingsField(params) {
    return {
        evid: 319,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsAppInstallationsLoadAndClicksSrc130Evid32' event (evid: 32)
 *
 * Event description: load and clicks on all installations modals of the new app
 * app ID only from v2 of the app (September 2024)
 *
 *
 * @param {tipsAppInstallationsLoadAndClicksSrc130Evid32Params} params - The parameters for this event
 * @property {string} action - load/click
 * @property {string} component - name of the component clicked
 * @property {string} value - value
 * @property {string} page_name - the name of the page the model is in
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsAppInstallationsLoadAndClicksSrc130Evid32Params>} LogObject<tipsAppInstallationsLoadAndClicksSrc130Evid32Params>
 */
export function tipsAppInstallationsLoadAndClicksSrc130Evid32(params) {
    return {
        evid: 32,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingChangeECommercePolicies' event (evid: 320)
 *
 * Event description: in settings tab - when checking / unchecking a eCommerce policy
 *
 * @param {settingChangeECommercePoliciesParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} policyType - policy type
 * @property {string} oldValue - checked / unchecked
 * @property {string} newValue - checked / unchecked
 * @return {LogObject<settingChangeECommercePoliciesParams>} LogObject<settingChangeECommercePoliciesParams>
 */
export function settingChangeECommercePolicies(params) {
    return {
        evid: 320,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingChangeECommercePoliciesTitle' event (evid: 321)
 *
 * Event description: in settings tab - when checking / unchecking / changing text / changing title for a store policy
 *
 * @param {settingChangeECommercePoliciesTitleParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} policyType - policy type
 * @property {string} title - policy title
 * @return {LogObject<settingChangeECommercePoliciesTitleParams>} LogObject<settingChangeECommercePoliciesTitleParams>
 */
export function settingChangeECommercePoliciesTitle(params) {
    return {
        evid: 321,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingChangeECommercePoliciesText' event (evid: 322)
 *
 * Event description: in settings tab - when changing text in a eCommerce policy
 *
 * @param {settingChangeECommercePoliciesTextParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} text - text
 * @property {string} policyType - policy type
 * @return {LogObject<settingChangeECommercePoliciesTextParams>} LogObject<settingChangeECommercePoliciesTextParams>
 */
export function settingChangeECommercePoliciesText(params) {
    return {
        evid: 322,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oaDebugRequestToAddEditTrackingNumber' event (evid: 358)
 *
 * Event description: After user clicked Save on Add edit tracking info screen, OneApp sends request to server with info
 *
 * @param {oaDebugRequestToAddEditTrackingNumberParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} trackingInfo - what is sent to server with request
 * @return {LogObject<oaDebugRequestToAddEditTrackingNumberParams>} LogObject<oaDebugRequestToAddEditTrackingNumberParams>
 */
export function oaDebugRequestToAddEditTrackingNumber(params) {
    return {
        evid: 358,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersExportOrdersClicked' event (evid: 374)
 *
 * Event description: Export orders in orders tab clicked.
 *
 * @param {ordersExportOrdersClickedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersExportOrdersClickedParams>} LogObject<ordersExportOrdersClickedParams>
 */
export function ordersExportOrdersClicked(params) {
    return {
        evid: 374,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersAddTrackingNumber' event (evid: 410)
 *
 * Event description: User add tracking number of carrier to the order info
 *
 * @param {ordersAddTrackingNumberParams} params - The parameters for this event
 * @property {string} method - manually / scan (for OA)
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill )
 * @property {boolean} emailDefined - true if tracking number was added with "send email" checked
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - true if tracking number was added with "send email" checked
 * @property {GUID} storeId - add_tracking / fulfill / manage order / manage tracking number
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} trackingInfo - what is sent to server with request (relevant for OA)
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (not sent from OneApp)
 * @property {string} carrierName - carrier name..
 * @property {string} origin - order id
 * @property {string} type - code/link (for OA)
 * @return {LogObject<ordersAddTrackingNumberParams>} LogObject<ordersAddTrackingNumberParams>
 */
export function ordersAddTrackingNumber(params) {
    return {
        evid: 410,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersUpdateTracking' event (evid: 411)
 *
 * Event description: User change/update tracking number of an order
 *
 * @param {ordersUpdateTrackingParams} params - The parameters for this event
 * @property {string} method - manual / scan (for OA)
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill )
 * @property {boolean} emailDefined - true if tracking number was edited with "send email" checked
 * @property {string} appName - app_name
 * @property {string} fulfillerId - Null for self fulfilled
 * @property {string} orderId - order id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} trackingInfo - what is sent to server with request (relevant for OA
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (not sent from OneApp)
 * @property {string} carrierName - carrier name..
 * @property {string} origin - add_tracking, fulfill_order...
 * @property {string} type - code/link (for OA)
 * @return {LogObject<ordersUpdateTrackingParams>} LogObject<ordersUpdateTrackingParams>
 */
export function ordersUpdateTracking(params) {
    return {
        evid: 411,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickToTrackPackageInOrderPage' event (evid: 412)
 *
 * Event description: User clicked on tracking number link (on the sidebar) that leads to carrier website (or clicked on "Track package" in Manage tracking number popup in OneApp that leads to carrier website )
 *
 * @param {ordersClickToTrackPackageInOrderPageParams} params - The parameters for this event
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill / notApplicable )
 * @property {string} appName - app_name
 * @property {string} fulfillerId - null for self fulfillment
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} applyToPartItems - true when tracking number is applied not to all items (not sent from OneApp)
 * @property {string} origin - manage order / manage tracking number
 * @return {LogObject<ordersClickToTrackPackageInOrderPageParams>} LogObject<ordersClickToTrackPackageInOrderPageParams>
 */
export function ordersClickToTrackPackageInOrderPage(params) {
    return {
        evid: 412,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersPrintOrder' event (evid: 413)
 *
 * Event description: when a user clicks on print order in SM. In new Order page also sent from orders list (bulk action). since 03.2020 also sent from OneApp for click on "export" in 3dots menu of order
 *
 * @param {ordersPrintOrderParams} params - The parameters for this event
 * @property {string} paymentStatus - payment_status
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order page, orders tab, order OneApp
 * @property {string} fulfillmentStatus - fulfillment_status
 * @return {LogObject<ordersPrintOrderParams>} LogObject<ordersPrintOrderParams>
 */
export function ordersPrintOrder(params) {
    return {
        evid: 413,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'contactBuyerClickedOa' event (evid: 415)
 *
 * Event description: when a users click on email/call from order view (right now only available in mobile)
 *
 * @param {contactBuyerClickedOaParams} params - The parameters for this event
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} origin - order page/engage
 * @property {string} action - email/call
 * @return {LogObject<contactBuyerClickedOaParams>} LogObject<contactBuyerClickedOaParams>
 */
export function contactBuyerClickedOa(params) {
    return {
        evid: 415,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageActivityOa' event (evid: 416)
 *
 * Event description: when a user adds/edits/deletes  a comment in activity & comments section of the order
 *
 * @param {orderPageActivityOaParams} params - The parameters for this event
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} action - delete/edit/create
 * @return {LogObject<orderPageActivityOaParams>} LogObject<orderPageActivityOaParams>
 */
export function orderPageActivityOa(params) {
    return {
        evid: 416,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersOrderInfoClickOnViewMap' event (evid: 417)
 *
 * Event description: Click on view map from order page. since december 2020 also sent from WixApp
 *
 * @param {ordersOrderInfoClickOnViewMapParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order page
 * @return {LogObject<ordersOrderInfoClickOnViewMapParams>} LogObject<ordersOrderInfoClickOnViewMapParams>
 */
export function ordersOrderInfoClickOnViewMap(params) {
    return {
        evid: 417,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewOrderClicked' event (evid: 418)
 *
 * Event description: View order clicked
 *
 * @param {ordersViewOrderClickedParams} params - The parameters for this event
 * @property {string} appName - wixstore (for oneApp); storeManagerApp / businessManagerStores for web
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} channelType - Sales channel that submitted the order. Supported values: UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES.
 * @property {string} origin - 'orders prev/next', 'orders_list','card_feed' (for oneApp).
 * @return {LogObject<ordersViewOrderClickedParams>} LogObject<ordersViewOrderClickedParams>
 */
export function ordersViewOrderClicked(params) {
    return {
        evid: 418,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCardClickOnOrderHistoryOaSrc130Evid419' event (evid: 419)
 *
 * Event description: Users clicks on activity & Comments in Order in OA
 *
 * @param {ordersCardClickOnOrderHistoryOaSrc130Evid419Params} params - The parameters for this event
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} orderId - order_id
 * @return {LogObject<ordersCardClickOnOrderHistoryOaSrc130Evid419Params>} LogObject<ordersCardClickOnOrderHistoryOaSrc130Evid419Params>
 */
export function ordersCardClickOnOrderHistoryOaSrc130Evid419(params) {
    return {
        evid: 419,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSendPickupReadyEmailClicked' event (evid: 421)
 *
 * Event description: event happens when the merchant sends pickup ready email to the buyer
 *
 * @param {ordersSendPickupReadyEmailClickedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} origin - Order page/ fulfill modal
 * @return {LogObject<ordersSendPickupReadyEmailClickedParams>} LogObject<ordersSendPickupReadyEmailClickedParams>
 */
export function ordersSendPickupReadyEmailClicked(params) {
    return {
        evid: 421,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersOrderPageSendDownloadLink' event (evid: 422)
 *
 * Event description: merchant sends download link to buyer, from order page
 *
 * @param {ordersOrderPageSendDownloadLinkParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - marked_as_paid/action_button
 * @return {LogObject<ordersOrderPageSendDownloadLinkParams>} LogObject<ordersOrderPageSendDownloadLinkParams>
 */
export function ordersOrderPageSendDownloadLink(params) {
    return {
        evid: 422,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSendEmailShippingConfirmationToBuyer' event (evid: 423)
 *
 * Event description: User send email shipping confirmation to buyer (can holds the tracking information if has one)
 *
 * @param {ordersSendEmailShippingConfirmationToBuyerParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill, Modalist, FBA
 * @property {string} appName - app_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} origin - fulfill,bulk_fulfill,add_tracking (also for edit tracking) ,side_bar (in oneApp action_button)
 * @property {boolean} isTruckingNumber - if the email holds the tracking number
 * @return {LogObject<ordersSendEmailShippingConfirmationToBuyerParams>} LogObject<ordersSendEmailShippingConfirmationToBuyerParams>
 */
export function ordersSendEmailShippingConfirmationToBuyer(params) {
    return {
        evid: 423,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnCreateInvoice' event (evid: 427)
 *
 * Event description: when user clicks on create invoices in the orders list page/order page.
 *
 * @param {ordersClickOnCreateInvoiceParams} params - The parameters for this event
 * @property {string} paymentStatus - partiallyRefunded/refunded/paid/notPaid (from Feb-2022)
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - origin
 * @return {LogObject<ordersClickOnCreateInvoiceParams>} LogObject<ordersClickOnCreateInvoiceParams>
 */
export function ordersClickOnCreateInvoice(params) {
    return {
        evid: 427,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnViewInvoice' event (evid: 428)
 *
 * Event description: when user clicks on view invoice (also after the invoice in created)
 *
 * @param {ordersClickOnViewInvoiceParams} params - The parameters for this event
 * @property {string} paymentStatus - partiallyRefunded/refunded/paid/notPaid (from Feb-2022)
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order page / order list page
 * @property {GUID} invoice_id - invoice id
 * @return {LogObject<ordersClickOnViewInvoiceParams>} LogObject<ordersClickOnViewInvoiceParams>
 */
export function ordersClickOnViewInvoice(params) {
    return {
        evid: 428,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnInvoiceConfirmationPopup' event (evid: 429)
 *
 * Event description: Click on confirmation popup (after clicking on 'create invoice' , there is a pop up shown
 *
 * @param {ordersClickOnInvoiceConfirmationPopupParams} params - The parameters for this event
 * @property {string} paymentStatus - partiallyRefunded/refunded/paid/notPaid (from Feb-2022)
 * @property {string} appName - app_name
 * @property {string} orderId - orderId in case it is one order
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} clickType - cancel / send_invoice..
 * @property {string} origin - order page / order list page
 * @property {string} orderIds - array of order guids in case of more than one order
 * @property {string} type - popup type
 * @property {boolean} isEmail - the resend order confirmation checkbox is marked
 * @return {LogObject<ordersClickOnInvoiceConfirmationPopupParams>} LogObject<ordersClickOnInvoiceConfirmationPopupParams>
 */
export function ordersClickOnInvoiceConfirmationPopup(params) {
    return {
        evid: 429,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'trackingNumberCopiedOa' event (evid: 468)
 *
 * Event description: When tracking number is copied from OneApp
 *
 * @param {trackingNumberCopiedOaParams} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} origin - order/action_button
 * @return {LogObject<trackingNumberCopiedOaParams>} LogObject<trackingNumberCopiedOaParams>
 */
export function trackingNumberCopiedOa(params) {
    return {
        evid: 468,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageBuyerProfileClickedOa' event (evid: 481)
 *
 * Event description: when a users click on buyer profile from order view in OA
 *
 * @param {orderPageBuyerProfileClickedOaParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} contactId - Contact id of the customer that have been edit
 * @return {LogObject<orderPageBuyerProfileClickedOaParams>} LogObject<orderPageBuyerProfileClickedOaParams>
 */
export function orderPageBuyerProfileClickedOa(params) {
    return {
        evid: 481,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'trackingNumberScannedOa' event (evid: 483)
 *
 * Event description: User clicks Add after inputting tracking number manually or by scanning (old) . Since June 2020 sent when user scans tracking number (not sent for manual adding tracking number)
 *
 * @param {trackingNumberScannedOaParams} params - The parameters for this event
 * @property {string} method - manually / scan
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - adding_method
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} origin - fulfill / manage tracking number / manage order
 * @property {string} type - type
 * @return {LogObject<trackingNumberScannedOaParams>} LogObject<trackingNumberScannedOaParams>
 */
export function trackingNumberScannedOa(params) {
    return {
        evid: 483,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectCarrierClickedOaSrc130Evid484' event (evid: 484)
 *
 * Event description: User clicks Apply after selecting Carrier in Select Shipping carrier screen
 *
 * @param {selectCarrierClickedOaSrc130Evid484Params} params - The parameters for this event
 * @property {string} fulfillerName - selffulfill,  Modalist, FBA
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} adding_method - deprecated
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {string} carrierName - carrier_name
 * @property {string} origin - add tracking number  (in case when tracking number is added) / 3dots (in case when tracking number is edited)
 * @return {LogObject<selectCarrierClickedOaSrc130Evid484Params>} LogObject<selectCarrierClickedOaSrc130Evid484Params>
 */
export function selectCarrierClickedOaSrc130Evid484(params) {
    return {
        evid: 484,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersEditOrderInfoClicked' event (evid: 497)
 *
 * Event description: When the user clicks on “edit order info” to edit the order. since december 2020 also sent from WixApp
 *
 * @param {ordersEditOrderInfoClickedParams} params - The parameters for this event
 * @property {string} appName - businessManagerStores
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - where the click was made from
 * @property {string} type - order type : shipping / pickup
 * @return {LogObject<ordersEditOrderInfoClickedParams>} LogObject<ordersEditOrderInfoClickedParams>
 */
export function ordersEditOrderInfoClicked(params) {
    return {
        evid: 497,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersEditOrderInfoOptionClicked' event (evid: 498)
 *
 * Event description: When the user clicks on one of the edit order options to edit the order.
 *
 * @param {ordersEditOrderInfoOptionClickedParams} params - The parameters for this event
 * @property {string} appName - businessManagerStores
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} type - email address / shipping address / billing address / delivery method
 * @return {LogObject<ordersEditOrderInfoOptionClickedParams>} LogObject<ordersEditOrderInfoOptionClickedParams>
 */
export function ordersEditOrderInfoOptionClicked(params) {
    return {
        evid: 498,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersEditOrderInfoUpdateClicked' event (evid: 499)
 *
 * Event description: When the user clicks on “update” in the edit order popup. since december 2020 also sent from WixApp when user clicked Save in Edit Order screen
 *
 * @param {ordersEditOrderInfoUpdateClickedParams} params - The parameters for this event
 * @property {string} appName - businessManagerStores
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * email address / shipping address / billing address / delivery method
 * @property {boolean} shippingAddressChanged - only for OneApp . true if shipping address was changed
 * @property {string} type - only for OneApp order type : shipping / pickup
 * @property {boolean} isEmail - if the user checks v in the “resend order confirmation email to the new email address” check box
 * @property {boolean} emailChanged - only for OneApp. true if email was changed
 * @return {LogObject<ordersEditOrderInfoUpdateClickedParams>} LogObject<ordersEditOrderInfoUpdateClickedParams>
 */
export function ordersEditOrderInfoUpdateClicked(params) {
    return {
        evid: 499,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInFilterScreenOaSrc130Evid500' event (evid: 500)
 *
 * Event description: When user clicks clear / close (x) filter
 *
 * @param {clickInFilterScreenOaSrc130Evid500Params} params - The parameters for this event
 * @property {string} value - clear / close
 * @property {string} origin - products / orders
 * @return {LogObject<clickInFilterScreenOaSrc130Evid500Params>} LogObject<clickInFilterScreenOaSrc130Evid500Params>
 */
export function clickInFilterScreenOaSrc130Evid500(params) {
    return {
        evid: 500,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersEditOrderInfoToastIsShown' event (evid: 502)
 *
 * Event description: When a toast is shown after updating an order. Can be a success toast or an error toast.
 *
 * @param {ordersEditOrderInfoToastIsShownParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} appName - businessManagerStores
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {boolean} isSuccess - is the toast a success toast or an error toast
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * @return {LogObject<ordersEditOrderInfoToastIsShownParams>} LogObject<ordersEditOrderInfoToastIsShownParams>
 */
export function ordersEditOrderInfoToastIsShown(params) {
    return {
        evid: 502,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterOaSrc130Evid506' event (evid: 506)
 *
 * Event description: user clicked on filter icon in OA
 *
 * @param {clickOnFilterOaSrc130Evid506Params} params - The parameters for this event
 * @property {string} origin - products / orders /pos
 * @return {LogObject<clickOnFilterOaSrc130Evid506Params>} LogObject<clickOnFilterOaSrc130Evid506Params>
 */
export function clickOnFilterOaSrc130Evid506(params) {
    return {
        evid: 506,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'searchResultsShownOa' event (evid: 508)
 *
 * Event description: when search results shown  OA
 *
 * @param {searchResultsShownOaParams} params - The parameters for this event
 * @property {string} results - an array on returned ids (limit to 1000)
 * @property {string} origin - pos / products / orders / StoreFront
 * @property {number} resultsCount - number of results
 * @return {LogObject<searchResultsShownOaParams>} LogObject<searchResultsShownOaParams>
 */
export function searchResultsShownOa(params) {
    return {
        evid: 508,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickInSearchResultsOa' event (evid: 509)
 *
 * Event description: When user clicks close (x) - clears search results
 *
 * @param {clickInSearchResultsOaParams} params - The parameters for this event
 * @property {string} results - an array on returned ids (limit to 1000)
 * @property {string} origin - pos / products / orders / StoreFront
 * @property {string} value - cancel / close
 * @property {number} resultsCount - number of results
 * @return {LogObject<clickInSearchResultsOaParams>} LogObject<clickInSearchResultsOaParams>
 */
export function clickInSearchResultsOa(params) {
    return {
        evid: 509,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsManageTipInOrderPageSrc130Evid51' event (evid: 51)
 *
 * Event description: When the user clicks on manage Tip in order page
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsManageTipInOrderPageSrc130Evid51Params} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} action - manage tips/ add tips
 * @property {string} draftOrderID - draft_order_id
 * @property {string} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsManageTipInOrderPageSrc130Evid51Params>} LogObject<tipsManageTipInOrderPageSrc130Evid51Params>
 */
export function tipsManageTipInOrderPageSrc130Evid51(params) {
    return {
        evid: 51,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxCollectSameRateForEntireCountry' event (evid: 52)
 *
 * Event description: in country page - when user toggles on/off collect same rate (by default for countries with states its turned on)
 *
 * @param {taxCollectSameRateForEntireCountryParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} origin - shipping and tax / tax - send "shipping and tax" when shipping and tax are not separated (old flow)
 * @property {string} taxCountry - the country of the country page (Null for old flow)
 * @property {string} newValue - true/false/no tax(for old flow)
 * @return {LogObject<taxCollectSameRateForEntireCountryParams>} LogObject<taxCollectSameRateForEntireCountryParams>
 */
export function taxCollectSameRateForEntireCountry(params) {
    return {
        evid: 52,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersTotalGpvInteraction' event (evid: 523)
 *
 * Event description: When the user interacts with the total GMV presented in the orders list.
 *
 * @param {ordersTotalGpvInteractionParams} params - The parameters for this event
 * @property {string} type - hover/click
 * @property {string} appName - app_name
 * @return {LogObject<ordersTotalGpvInteractionParams>} LogObject<ordersTotalGpvInteractionParams>
 */
export function ordersTotalGpvInteraction(params) {
    return {
        evid: 523,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnGoToGiftCardInOrder' event (evid: 537)
 *
 * Event description: User clicks on "Go to Dift Card" (with link to Gift App dashboard) inside order page
 *
 * @param {ordersClickOnGoToGiftCardInOrderParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} type - purchase / redeem
 * @return {LogObject<ordersClickOnGoToGiftCardInOrderParams>} LogObject<ordersClickOnGoToGiftCardInOrderParams>
 */
export function ordersClickOnGoToGiftCardInOrder(params) {
    return {
        evid: 537,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'giftCardClickLearnMoreSrc130Evid538' event (evid: 538)
 *
 * Event description: in ecom settings - when user cicks "learn more" (leads to open the App Market with Gifted App opened)
 *
 * @param {giftCardClickLearnMoreSrc130Evid538Params} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} value - gift card/ merchant initiated etc.
 * @return {LogObject<giftCardClickLearnMoreSrc130Evid538Params>} LogObject<giftCardClickLearnMoreSrc130Evid538Params>
 */
export function giftCardClickLearnMoreSrc130Evid538(params) {
    return {
        evid: 538,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickViewMoreInWidgetOa' event (evid: 547)
 *
 * Event description: when user clicks on View More in orders / products widget in OneApp dashboard
 *
 * @param {clickViewMoreInWidgetOaParams} params - The parameters for this event
 * @property {string} origin - product_list_widget / order_list_widget
 * @return {LogObject<clickViewMoreInWidgetOaParams>} LogObject<clickViewMoreInWidgetOaParams>
 */
export function clickViewMoreInWidgetOa(params) {
    return {
        evid: 547,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnLearnMore' event (evid: 55)
 *
 * Event description: When user clicks on "Learn more" or "i" to get more info about tax
 *
 * @param {taxClickOnLearnMoreParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} origin - empty state / countries list / states list / tax on shipping / tax on digital / tax settings / tax calculation /avalara terms/avalara rates / productTaxGroupMain / productTaxGroupInner / productTaxGroupPopup/ avalaraBeta
 * @return {LogObject<taxClickOnLearnMoreParams>} LogObject<taxClickOnLearnMoreParams>
 */
export function taxClickOnLearnMore(params) {
    return {
        evid: 55,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChooseRegionModalStartedToRender' event (evid: 56)
 *
 * Event description: When choose country or choose state Modal started to render
 *
 * @param {taxChooseRegionModalStartedToRenderParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} type - country / state
 * @return {LogObject<taxChooseRegionModalStartedToRenderParams>} LogObject<taxChooseRegionModalStartedToRenderParams>
 */
export function taxChooseRegionModalStartedToRender(params) {
    return {
        evid: 56,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxIsIncludedInMyProductsPrices' event (evid: 560)
 *
 * Event description: When the user changes the toggle in the Tax list under settings - True when the user marks - Tax is already included in the price of my items False - Tax should be added at checkout
 *
 * @param {taxTaxIsIncludedInMyProductsPricesParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} newValue - true/false
 * @return {LogObject<taxTaxIsIncludedInMyProductsPricesParams>} LogObject<taxTaxIsIncludedInMyProductsPricesParams>
 */
export function taxTaxIsIncludedInMyProductsPrices(params) {
    return {
        evid: 560,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAddTaxRegionClicked' event (evid: 561)
 *
 * Event description: When user click to add new tax country or state
 *
 * @param {taxAddTaxRegionClickedParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} origin - empty state / countries list / states list
 * @return {LogObject<taxAddTaxRegionClickedParams>} LogObject<taxAddTaxRegionClickedParams>
 */
export function taxAddTaxRegionClicked(params) {
    return {
        evid: 561,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChooseRegionModalRendered' event (evid: 562)
 *
 * Event description: Old tax service - When choose country or choose state Modal rendered. These event is not sent from OA (no modal - separate screen)
 *
 * @param {taxChooseRegionModalRenderedParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} type - country / state
 * @return {LogObject<taxChooseRegionModalRenderedParams>} LogObject<taxChooseRegionModalRenderedParams>
 */
export function taxChooseRegionModalRendered(params) {
    return {
        evid: 562,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickAddOnTheChooseRegionModalSrc130Evid563' event (evid: 563)
 *
 * Event description: When the user click add on the choose country or choose state modal
 *
 * @param {taxClickAddOnTheChooseRegionModalSrc130Evid563Params} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} taxState - state chosen in modal
 * @property {string} taxCountry - country chosen in modal
 * @property {string} subDivision - states chosen in modal
 * @property {boolean} isRegionIndividually - true/ false is the user adds a country/state and decides to set up different tax rates for every sub-division. Null if the option isn't shown to the user
 * @property {string} type - country / state
 * @property {string} calculationMethod - avalara/ manual etc.
 * @return {LogObject<taxClickAddOnTheChooseRegionModalSrc130Evid563Params>} LogObject<taxClickAddOnTheChooseRegionModalSrc130Evid563Params>
 */
export function taxClickAddOnTheChooseRegionModalSrc130Evid563(params) {
    return {
        evid: 563,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleCreated' event (evid: 565)
 *
 * Event description: merchant  saved a new tax rule (with all the info that client sent to server). origin since 11/03/2019
 *
 * @param {taxTaxRuleCreatedParams} params - The parameters for this event
 * @property {string} ratePerGroup - a json object where the key is the group_id and the value is the rate.
 * @property {boolean} calcTaxAfterShipping - calc_tax_after_shipping
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {number} taxRate - the tax rate INTEGER! (multiply by 100000)
 * @property {string} taxState - the state in the rule
 * @property {string} origin - onboarding/user/auto. starts since 11/03/2019 (onboarding/user since 25/02/2019)
 * @property {string} taxCountry - the country of the rule
 * @property {boolean} taxOnDigital - tax_on_digital
 * @property {string} sameTaxToggle - same tax for entire country - true / false / not applicable
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleCreatedParams>} LogObject<taxTaxRuleCreatedParams>
 */
export function taxTaxRuleCreated(params) {
    return {
        evid: 565,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxDeleteTaxRule' event (evid: 566)
 *
 * Event description: merchant deletes an existing tax rule from  the 3 dots menu for whole country or deleting tax rule for state
 *
 * @param {taxDeleteTaxRuleParams} params - The parameters for this event
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {string} origin - user / auto
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxDeleteTaxRuleParams>} LogObject<taxDeleteTaxRuleParams>
 */
export function taxDeleteTaxRule(params) {
    return {
        evid: 566,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRuleUpdated' event (evid: 567)
 *
 * Event description: merchant updated a tax rule (with indicators of success)
 *
 * @param {taxTaxRuleUpdatedParams} params - The parameters for this event
 * @property {string} ratePerGroup - a json object where the key is the group_id and the value is the rate.
 * @property {boolean} isValid - send TRUE if all the fields were updated successfully
 * @property {boolean} calcTaxAfterShipping - calc_tax_after_shipping
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {number} taxRate - the tax rate INTEGER! (multiply by 100000)
 * @property {string} errorReason - list of fields with errors
 * @property {string} taxState - the state in the rule
 * @property {string} taxCountry - the country in the rule
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} sameTaxToggle - same tax for entire country - true / false / not applicable
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleUpdatedParams>} LogObject<taxTaxRuleUpdatedParams>
 */
export function taxTaxRuleUpdated(params) {
    return {
        evid: 567,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRemoveRegionModalStartedToRender' event (evid: 57)
 *
 * Event description: when modal started to render because user deletes the country or state / saves the country or state with 0% tax rate
 *
 * @param {taxRemoveRegionModalStartedToRenderParams} params - The parameters for this event
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {string} taxIdList - the list of tax_rule_id that can be removed after this
 * @property {string} type - remove country / remove last state / zero tax country / zero tax rate / remove state
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxRemoveRegionModalStartedToRenderParams>} LogObject<taxRemoveRegionModalStartedToRenderParams>
 */
export function taxRemoveRegionModalStartedToRender(params) {
    return {
        evid: 57,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRemoveRegionModalRendered' event (evid: 570)
 *
 * Event description: old tax service
 *
 * @param {taxRemoveRegionModalRenderedParams} params - The parameters for this event
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {string} appName - app_name
 * @property {string} type - remove country / remove last state / zero tax country / zero tax rate / remove state
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxRemoveRegionModalRenderedParams>} LogObject<taxRemoveRegionModalRenderedParams>
 */
export function taxRemoveRegionModalRendered(params) {
    return {
        evid: 570,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCustomizeColumnsClicked' event (evid: 583)
 *
 * Event description: When customize columns is clicked.
 *
 * @param {ordersCustomizeColumnsClickedParams} params - The parameters for this event
 * @property {string} pageName - orders.list
 * @property {string} appName - app_name
 * @return {LogObject<ordersCustomizeColumnsClickedParams>} LogObject<ordersCustomizeColumnsClickedParams>
 */
export function ordersCustomizeColumnsClicked(params) {
    return {
        evid: 583,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCustomizeColumnsChange' event (evid: 584)
 *
 * Event description: When a column is check/uncheck using the customize columns feature.
 *
 * @param {ordersCustomizeColumnsChangeParams} params - The parameters for this event
 * @property {string} columnName - column_name
 * @property {string} appName - app_name
 * @property {boolean} status - true - check, false -uncheck
 * @property {string} pageName - orders.list
 * @return {LogObject<ordersCustomizeColumnsChangeParams>} LogObject<ordersCustomizeColumnsChangeParams>
 */
export function ordersCustomizeColumnsChange(params) {
    return {
        evid: 584,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnTabsInWidgetOa' event (evid: 590)
 *
 * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard
 *
 * @param {clickOnTabsInWidgetOaParams} params - The parameters for this event
 * @property {string} tabName - recentlyUpdated / OutOfStock / hidden / topViewed
 * @property {string} origin - product_list_widget / order_list_widget
 * @return {LogObject<clickOnTabsInWidgetOaParams>} LogObject<clickOnTabsInWidgetOaParams>
 */
export function clickOnTabsInWidgetOa(params) {
    return {
        evid: 590,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnCollectPayment' event (evid: 60)
 *
 * Event description: The user clicks on "Collect payment"
 *
 * @param {paymentCollectorClickOnCollectPaymentParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment, manage-participants
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorClickOnCollectPaymentParams>} LogObject<paymentCollectorClickOnCollectPaymentParams>
 */
export function paymentCollectorClickOnCollectPayment(params) {
    return {
        evid: 60,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOn3DotsOa' event (evid: 607)
 *
 * Event description: user clicks on 3 dots in Orders screen
 *
 * @param {ordersClickOn3DotsOaParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersClickOn3DotsOaParams>} LogObject<ordersClickOn3DotsOaParams>
 */
export function ordersClickOn3DotsOa(params) {
    return {
        evid: 607,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnPayWithCreditCard' event (evid: 61)
 *
 * Event description: The user clicks on "Pay with credit card" on the order page.
 *
 * @param {paymentCollectorClickOnPayWithCreditCardParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {boolean} isActive - Is active (available) payment method
 * @return {LogObject<paymentCollectorClickOnPayWithCreditCardParams>} LogObject<paymentCollectorClickOnPayWithCreditCardParams>
 */
export function paymentCollectorClickOnPayWithCreditCard(params) {
    return {
        evid: 61,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickLearnMoreInOrdersListEmptyState' event (evid: 610)
 *
 * Event description: When the user clicks on "learn more" (link to the KB) to the KB in the orders list page in the empty state (without premium).
 *
 * @param {ordersClickLearnMoreInOrdersListEmptyStateParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} text - The clickable text
 * @property {string} link - The KB link
 * @return {LogObject<ordersClickLearnMoreInOrdersListEmptyStateParams>} LogObject<ordersClickLearnMoreInOrdersListEmptyStateParams>
 */
export function ordersClickLearnMoreInOrdersListEmptyState(params) {
    return {
        evid: 610,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorCollectPaymentByCreditCardOpened' event (evid: 62)
 *
 * Event description: Collect payment by credit card window is open.
 *
 * @param {paymentCollectorCollectPaymentByCreditCardOpenedParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {boolean} isCreateAuthorization - is create authorization window opened
 * @return {LogObject<paymentCollectorCollectPaymentByCreditCardOpenedParams>} LogObject<paymentCollectorCollectPaymentByCreditCardOpenedParams>
 */
export function paymentCollectorCollectPaymentByCreditCardOpened(params) {
    return {
        evid: 62,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersLoadingMoreRows' event (evid: 639)
 *
 * Event description: When the user loads more rows to the orders list table.
 *
 * @param {ordersLoadingMoreRowsParams} params - The parameters for this event
 * @property {string} numberOfLoadedItems - Number of items who were loaded to the table in the current loading
 * @property {string} appName - app_name
 * @property {string} numberOfOriginalItems - Number of items in the table before the current loading
 * @return {LogObject<ordersLoadingMoreRowsParams>} LogObject<ordersLoadingMoreRowsParams>
 */
export function ordersLoadingMoreRows(params) {
    return {
        evid: 639,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorCollectPaymentClickOnCharge' event (evid: 64)
 *
 * Event description: In the collect payment window- the user clicks on 'Charge'.
 *
 * @param {paymentCollectorCollectPaymentClickOnChargeParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} appDefId - app_def_id
 * @property {number} amount - Int multiplied by 100,000, amount entered by the user
 * @property {string} origin - order_page_header, order_page_payment
 * @property {string} currency - currency
 * @property {boolean} isCustomAmount - Check mark is checked
 * @property {boolean} isCreateAuthorization - is create authorization window opened
 * @property {string} scheduledAction - VOID / CAPTURE
 * @return {LogObject<paymentCollectorCollectPaymentClickOnChargeParams>} LogObject<paymentCollectorCollectPaymentClickOnChargeParams>
 */
export function paymentCollectorCollectPaymentClickOnCharge(params) {
    return {
        evid: 64,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToChangeOrderStatusOa' event (evid: 643)
 *
 * Event description: user clicks to mark order as paid / fulfilled
 *
 * @param {clickToChangeOrderStatusOaParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - list of all catalog_app ids
 * @property {string} origin - bottom panel / manage order / fulfill modal
 * @property {string} statusType - payment / shipping
 * @return {LogObject<clickToChangeOrderStatusOaParams>} LogObject<clickToChangeOrderStatusOaParams>
 */
export function clickToChangeOrderStatusOa(params) {
    return {
        evid: 643,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersExportCsvModalOpen' event (evid: 644)
 *
 * Event description: When the export order new window opens
 *
 * @param {ordersExportCsvModalOpenParams} params - The parameters for this event
 * @property {string} columns - A list with the columns that was marked when the modal opened
 * @property {string} appName - app_name
 * @return {LogObject<ordersExportCsvModalOpenParams>} LogObject<ordersExportCsvModalOpenParams>
 */
export function ordersExportCsvModalOpen(params) {
    return {
        evid: 644,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersExportCsvApprovedClicked' event (evid: 645)
 *
 * Event description: When the user approves the export in the modal
 *
 * @param {ordersExportCsvApprovedClickedParams} params - The parameters for this event
 * @property {number} numberOfOrders - number_of_orders
 * @property {string} appName - app_name
 * @property {number} numerOfLineItems - numer_of_line_items
 * @property {string} currentView - json with categories, subcategories
 * @property {string} type - export line items or orders
 * @return {LogObject<ordersExportCsvApprovedClickedParams>} LogObject<ordersExportCsvApprovedClickedParams>
 */
export function ordersExportCsvApprovedClicked(params) {
    return {
        evid: 645,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersOrdersListLoaded' event (evid: 648)
 *
 * Event description: When the orders list is being loaded in the order list page (when page is loading/more orders load/filter applied/views applied etc...)
 *
 * @param {ordersOrdersListLoadedParams} params - The parameters for this event
 * @property {string} viewId - view_id
 * @property {number} numberOfOrders - The number of orders that are shown in the table.
 * @property {string} viewName - The name of the view that is applied on the table - TBD
 * @property {string} appName - app name
 * @property {string} filtersApplied - A list of filter’s categories that applies on the table
 * @property {string} columns - columns
 * @property {string} sources - source
 * @property {string} action - The action that triggered the loading of the list (page loading, load more orders, filter change etc...) - TBD
 * @return {LogObject<ordersOrdersListLoadedParams>} LogObject<ordersOrdersListLoadedParams>
 */
export function ordersOrdersListLoaded(params) {
    return {
        evid: 648,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingClickOnKb' event (evid: 652)
 *
 * Event description: in settings tab - Click on KB in store settings
 *
 * @param {settingClickOnKbParams} params - The parameters for this event
 * @property {GUID} articleId - the KB article id
 * @property {string} appName - app_name
 * @return {LogObject<settingClickOnKbParams>} LogObject<settingClickOnKbParams>
 */
export function settingClickOnKb(params) {
    return {
        evid: 652,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickToOpenViewsList' event (evid: 656)
 *
 * Event description: When the user clicks to open the views list
 *
 * @param {ordersViewsClickToOpenViewsListParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersViewsClickToOpenViewsListParams>} LogObject<ordersViewsClickToOpenViewsListParams>
 */
export function ordersViewsClickToOpenViewsList(params) {
    return {
        evid: 656,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnASpecificView' event (evid: 657)
 *
 * Event description: When clicks on a specific view:
 *
 * @param {ordersViewsClickOnASpecificViewParams} params - The parameters for this event
 * @property {string} viewId - view_id
 * @property {string} name - name of the view
 * @property {string} appName - app_name
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} filters - a list of the filters applied, separated by “ , “ for example: "salesChannels,archiveStatus,paymentStatus"
 * @property {string} sort - a list of Jsons with: [{name: <column name>, type: <asc/desc>}, {name:..., type:....}....]
 * @return {LogObject<ordersViewsClickOnASpecificViewParams>} LogObject<ordersViewsClickOnASpecificViewParams>
 */
export function ordersViewsClickOnASpecificView(params) {
    return {
        evid: 657,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnCreateNewView' event (evid: 658)
 *
 * Event description: When the user clicks on “create new view”
 *
 * @param {ordersViewsClickOnCreateNewViewParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersViewsClickOnCreateNewViewParams>} LogObject<ordersViewsClickOnCreateNewViewParams>
 */
export function ordersViewsClickOnCreateNewView(params) {
    return {
        evid: 658,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnSaveThisView' event (evid: 659)
 *
 * Event description: When the user clicks on “save this view
 *
 * @param {ordersViewsClickOnSaveThisViewParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} origin - table header/filters panel
 * @property {string} filters - a list of the filters applied, separated by “ , “. for example:"salesChannels,archiveStatus,paymentStatus"
 * @property {string} sort - a list of Jsons with: [{name: <column name>, type: <asc/desc>}, {name:..., type:....}....]
 * @return {LogObject<ordersViewsClickOnSaveThisViewParams>} LogObject<ordersViewsClickOnSaveThisViewParams>
 */
export function ordersViewsClickOnSaveThisView(params) {
    return {
        evid: 659,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnGrouperButton' event (evid: 66)
 *
 * Event description: When a user clicks on the grouper button in the orders page
 *
 * @param {ordersClickOnGrouperButtonParams} params - The parameters for this event
 * @property {string} area - primary (blue color)/ secondary (grey color)/ more actions (three dots)
 * @property {string} internalDashboardUrl - internal_dashboard_url
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - orders' catalog_app_id
 * @property {string} externalDashboardUrl - external_dashboard_url
 * @property {string} appDefId - The id of the vertical/TPA that called the navigation button
 * @property {string} action - action - the CTA that we click on, for example 'go to Bookings Calendar''
 * @return {LogObject<ordersClickOnGrouperButtonParams>} LogObject<ordersClickOnGrouperButtonParams>
 */
export function ordersClickOnGrouperButton(params) {
    return {
        evid: 66,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsViewCreated' event (evid: 660)
 *
 * Event description: When the user save a new view
 *
 * @param {ordersViewsViewCreatedParams} params - The parameters for this event
 * @property {string} viewId - view_id
 * @property {string} name - the name of the view
 * @property {string} appName - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} columns - a list of the columns applied, separated by “ , “. For example:"order,customer,payment,fulfillment,total"
 * @property {string} filters - a list of the filters applied, separated by “ , “ for example: "salesChannels,archiveStatus,paymentStatus"
 * @return {LogObject<ordersViewsViewCreatedParams>} LogObject<ordersViewsViewCreatedParams>
 */
export function ordersViewsViewCreated(params) {
    return {
        evid: 660,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnChargeWithCardReaderOa' event (evid: 67)
 *
 * Event description: Payment Collector > Click on "Charge with Card reader" OA
 *
 * @param {paymentCollectorClickOnChargeWithCardReaderOaParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} cardReaderDeviceType - card_reader_device_type
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {boolean} isActive - Is active (available) payment method
 * @property {string} cardReaderId - cardReaderId
 * @return {LogObject<paymentCollectorClickOnChargeWithCardReaderOaParams>} LogObject<paymentCollectorClickOnChargeWithCardReaderOaParams>
 */
export function paymentCollectorClickOnChargeWithCardReaderOa(params) {
    return {
        evid: 67,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickToDeleteView' event (evid: 678)
 *
 * Event description: When the user clicks to delete a view
 *
 * @param {ordersViewsClickToDeleteViewParams} params - The parameters for this event
 * @property {string} viewId - view_id
 * @property {string} name - the name of the view
 * @property {string} appName - app_name
 * @return {LogObject<ordersViewsClickToDeleteViewParams>} LogObject<ordersViewsClickToDeleteViewParams>
 */
export function ordersViewsClickToDeleteView(params) {
    return {
        evid: 678,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsViewDeleted' event (evid: 681)
 *
 * Event description: When the user approves the deletion of a view
 *
 * @param {ordersViewsViewDeletedParams} params - The parameters for this event
 * @property {string} viewId - view_id
 * @property {string} name - The name of the view
 * @property {string} appName - app_name
 * @return {LogObject<ordersViewsViewDeletedParams>} LogObject<ordersViewsViewDeletedParams>
 */
export function ordersViewsViewDeleted(params) {
    return {
        evid: 681,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnCreateNewOrder' event (evid: 682)
 *
 * Event description: When the user clicks on “+Add New Order” in the Orders list page:
 *
 * @param {manualOrderClickOnCreateNewOrderParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} appDefId - app_def_id
 * @property {string} origin - orders_list
 * @return {LogObject<manualOrderClickOnCreateNewOrderParams>} LogObject<manualOrderClickOnCreateNewOrderParams>
 */
export function manualOrderClickOnCreateNewOrder(params) {
    return {
        evid: 682,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ownerCheckoutClickOnAddItem' event (evid: 683)
 *
 * Event description: User clicks on "Add Product" or on "Add custom item" on the New Order page.
 *
 * @param {ownerCheckoutClickOnAddItemParams} params - The parameters for this event
 * @property {GUID} appDefId - app_def_id
 * @property {boolean} isCustomItem - true for custom item
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @return {LogObject<ownerCheckoutClickOnAddItemParams>} LogObject<ownerCheckoutClickOnAddItemParams>
 */
export function ownerCheckoutClickOnAddItem(params) {
    return {
        evid: 683,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderItemAddedToOrder' event (evid: 684)
 *
 * Event description: Item is added after the user clicks on "Add" in the add product section
 *
 * @param {manualOrderItemAddedToOrderParams} params - The parameters for this event
 * @property {string} catalogAppId - Item's catalog_app_id
 * @property {GUID} appDefId - app_def_id
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @return {LogObject<manualOrderItemAddedToOrderParams>} LogObject<manualOrderItemAddedToOrderParams>
 */
export function manualOrderItemAddedToOrder(params) {
    return {
        evid: 684,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderModifyLineItem' event (evid: 685)
 *
 * Event description: User decreases/increases the number of item for a specific lime item
 *
 * @param {manualOrderModifyLineItemParams} params - The parameters for this event
 * @property {number} quantity - quantity
 * @property {string} catalogAppId - catalog_app_id
 * @property {GUID} appDefId - app_def_id
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @return {LogObject<manualOrderModifyLineItemParams>} LogObject<manualOrderModifyLineItemParams>
 */
export function manualOrderModifyLineItem(params) {
    return {
        evid: 685,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnAddCustomItem' event (evid: 686)
 *
 * Event description: When the user clicks on “Add” in the add custom Item section:
 *
 * @param {manualOrderClickOnAddCustomItemParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {number} price - The price of the item int! (*100000)
 * @property {GUID} appDefId - app_def_id
 * @property {string} itemInfo - Item info (optional)
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} title - Title of the Custom Item
 * @return {LogObject<manualOrderClickOnAddCustomItemParams>} LogObject<manualOrderClickOnAddCustomItemParams>
 */
export function manualOrderClickOnAddCustomItem(params) {
    return {
        evid: 686,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnEdit' event (evid: 687)
 *
 * Event description: When the user clicked on “edit”
 *
 * @param {manualOrderClickOnEditParams} params - The parameters for this event
 * @property {GUID} appDefId - app_def_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} itemType - discount / shipping / items / contact
 * @property {string} contactId - Contact id of the customer that have been edit
 * @return {LogObject<manualOrderClickOnEditParams>} LogObject<manualOrderClickOnEditParams>
 */
export function manualOrderClickOnEdit(params) {
    return {
        evid: 687,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderDiscountAdded' event (evid: 688)
 *
 * Event description: when the user clicks on "Apply" in the discount section and adds a discount to the orders.
 *
 * @param {manualOrderDiscountAddedParams} params - The parameters for this event
 * @property {number} discountasAmount - The amount that the users entered
 * @property {GUID} appDefId - app_def_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} discountDescription - The discount description that the user entered
 * @property {number} discountAmount - The amount that the users entered
 * @return {LogObject<manualOrderDiscountAddedParams>} LogObject<manualOrderDiscountAddedParams>
 */
export function manualOrderDiscountAdded(params) {
    return {
        evid: 688,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderClickOnRemove' event (evid: 689)
 *
 * Event description: When the user clicks on "remove" in one of the sections - discount / shipping / item / contact
 *
 * @param {manualOrderClickOnRemoveParams} params - The parameters for this event
 * @property {GUID} appDefId - app_def_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} itemType - discount / shipping / item / contact
 * @property {string} contactId - Contact id of the customer that have been removed
 * @return {LogObject<manualOrderClickOnRemoveParams>} LogObject<manualOrderClickOnRemoveParams>
 */
export function manualOrderClickOnRemove(params) {
    return {
        evid: 689,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'applyFilterInStoresOa' event (evid: 69)
 *
 * Event description: when user applies filter in Stores (orders, products, coupons) Screen OneApp or POS OneApp
 *
 * @param {applyFilterInStoresOaParams} params - The parameters for this event
 * @property {number} productsFiltered - number of products filtered by in Order filter
 * @property {DateTime} dateRangeEnd - orderDate filter (for custom orderDateType)
 * @property {DateTime} dateRangeStart - orderDate filter (for custom orderDateType)
 * @property {string} paymentStatus - paid/unpaid
 * @property {string} productType - not in use
 * @property {boolean} archievedStatus - true / false
 * @property {string} salesChannels - WEB, EBAY, POS, WIX_APP_STORE, OTHER_PLATFORM
 * @property {string} origin - name of current page (orders/products - from products dashboard / coupons_products - products from apply coupon / SF_products - from list of products in StoreFront/coupons)
 * @property {string} itemType - list of item types (orders filter)
 * @property {string} dateRange - today, lastTwoDays, thisWeek, lastTwoWeeks, custom
 * @property {number} collectionsFiltered - number of collections filtered in products filter
 * @property {string} inventoryStatus - product inventory status: in_stock, out_of_stock, partially_out_of_stock
 * @property {string} visibility - product visibility : visible , hidden
 * @property {string} fulfillmentStatus - fulfilled, partiallyFulfilled, canceled, notFulfilled
 * @property {string} subscriptions - withSubscription, withoutSubscription
 * @return {LogObject<applyFilterInStoresOaParams>} LogObject<applyFilterInStoresOaParams>
 */
export function applyFilterInStoresOa(params) {
    return {
        evid: 69,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleSetManualOrder' event (evid: 690)
 *
 * Event description: When the user clicked on “Add” in the shipping section:
 *
 * @param {shippingRuleSetManualOrderParams} params - The parameters for this event
 * @property {string} customShippingName - customShippingName
 * @property {string} appName - app_name
 * @property {boolean} isPickup - is_pickup
 * @property {GUID} appDefId - app_def_id
 * @property {number} shippingRate - shipping_rate
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} shippingMethodType - The name of the shipping option that have been chosen
 * @property {boolean} isCustomScheduling - isCustomScheduling
 * @return {LogObject<shippingRuleSetManualOrderParams>} LogObject<shippingRuleSetManualOrderParams>
 */
export function shippingRuleSetManualOrder(params) {
    return {
        evid: 690,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ownerCheckoutOrderPlacedClicked' event (evid: 691)
 *
 * Event description: When the user clicked on “Create Order” and saves the new order.
 *
 * @param {ownerCheckoutOrderPlacedClickedParams} params - The parameters for this event
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {GUID} appDefId - app_def_id
 * @return {LogObject<ownerCheckoutOrderPlacedClickedParams>} LogObject<ownerCheckoutOrderPlacedClickedParams>
 */
export function ownerCheckoutOrderPlacedClicked(params) {
    return {
        evid: 691,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelCreateShippingLabelButtonRendered' event (evid: 692)
 *
 * Event description: Shipping label -> create shipping label button rendered.
 *
 * @param {shippingLabelCreateShippingLabelButtonRenderedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} toCountry - to_country
 * @property {string} carrierName - carrier_name
 * @property {string} fromCountry - from_country
 * @property {boolean} isEnabled - is_enabled (button might be disabled)
 * @return {LogObject<shippingLabelCreateShippingLabelButtonRenderedParams>} LogObject<shippingLabelCreateShippingLabelButtonRenderedParams>
 */
export function shippingLabelCreateShippingLabelButtonRendered(params) {
    return {
        evid: 692,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersExchangeClickOnOrderLinkInOrderPage' event (evid: 693)
 *
 * Event description: When the user clicks on a link to another exchanged order
 *
 * @param {ordersExchangeClickOnOrderLinkInOrderPageParams} params - The parameters for this event
 * @property {string} exchangeOrderId - exchange/original
 * @property {string} appName - app_name
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} originalOrderId - The original order id
 * @property {string} origin - The original order id
 * @return {LogObject<ordersExchangeClickOnOrderLinkInOrderPageParams>} LogObject<ordersExchangeClickOnOrderLinkInOrderPageParams>
 */
export function ordersExchangeClickOnOrderLinkInOrderPage(params) {
    return {
        evid: 693,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderToastShown' event (evid: 694)
 *
 * Event description: When toast is shown to user
 *
 * @param {manualOrderToastShownParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {boolean} isSuccess - is_success
 * @property {GUID} appDefId - app_def_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @return {LogObject<manualOrderToastShownParams>} LogObject<manualOrderToastShownParams>
 */
export function manualOrderToastShown(params) {
    return {
        evid: 694,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersOpenAnalyticsSidePanelClicked' event (evid: 695)
 *
 * Event description: when the user clicks on analytics side panel
 *
 * @param {ordersOpenAnalyticsSidePanelClickedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @return {LogObject<ordersOpenAnalyticsSidePanelClickedParams>} LogObject<ordersOpenAnalyticsSidePanelClickedParams>
 */
export function ordersOpenAnalyticsSidePanelClicked(params) {
    return {
        evid: 695,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersViewsClickOnDone' event (evid: 696)
 *
 * Event description: When the user clicks on “Done” in the filters side pannel in the orders page
 *
 * @param {ordersViewsClickOnDoneParams} params - The parameters for this event
 * @property {string} filters - a list of the filters applied, separated by “ , “
 * @property {string} appName - app_name
 * @return {LogObject<ordersViewsClickOnDoneParams>} LogObject<ordersViewsClickOnDoneParams>
 */
export function ordersViewsClickOnDone(params) {
    return {
        evid: 696,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickSendResendReceipt' event (evid: 697)
 *
 * Event description: Click send/resend receipt from Orders menu in order (for POS order)
 *
 * @param {ordersClickSendResendReceiptParams} params - The parameters for this event
 * @property {string} instanceId - instance_id of ecom platform
 * @property {GUID} orderId - order_id
 * @property {string} type - send / resend
 * @return {LogObject<ordersClickSendResendReceiptParams>} LogObject<ordersClickSendResendReceiptParams>
 */
export function ordersClickSendResendReceipt(params) {
    return {
        evid: 697,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnViewContact' event (evid: 699)
 *
 * Event description: The user clicks on "View Contact" on the order page under order info.
 *
 * @param {ordersClickOnViewContactParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order_page
 * @property {string} contactId - contact_id
 * @return {LogObject<ordersClickOnViewContactParams>} LogObject<ordersClickOnViewContactParams>
 */
export function ordersClickOnViewContact(params) {
    return {
        evid: 699,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOnMessageCustomer' event (evid: 700)
 *
 * Event description: Order page > Click on ‘Message customer’.
 *
 * @param {ordersClickOnMessageCustomerParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} origin - order_page
 * @property {string} contactId - contact_id
 * @return {LogObject<ordersClickOnMessageCustomerParams>} LogObject<ordersClickOnMessageCustomerParams>
 */
export function ordersClickOnMessageCustomer(params) {
    return {
        evid: 700,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'fulfillmentClickOnTheLinkToTheAppMarketShippingLabels' event (evid: 703)
 *
 * Event description: when the user clicks on the link on the fulfillment page to open the App market to look for shipping labels (Fulfilling your own orders? Explore shipping label apps on the)
 *
 * @param {fulfillmentClickOnTheLinkToTheAppMarketShippingLabelsParams} params - The parameters for this event
 * @return {LogObject<fulfillmentClickOnTheLinkToTheAppMarketShippingLabelsParams>} LogObject<fulfillmentClickOnTheLinkToTheAppMarketShippingLabelsParams>
 */
export function fulfillmentClickOnTheLinkToTheAppMarketShippingLabels(params) {
    return {
        evid: 703,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSearchStoresOa' event (evid: 71)
 *
 * Event description: when user clicks on search in  OneApp
 *
 * @param {clickOnSearchStoresOaParams} params - The parameters for this event
 * @property {string} previousPage - where the user came from
 * @property {string} pageName - current page
 * @return {LogObject<clickOnSearchStoresOaParams>} LogObject<clickOnSearchStoresOaParams>
 */
export function clickOnSearchStoresOa(params) {
    return {
        evid: 71,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippoShippingLabelsClickOnCreateShippingLabel' event (evid: 710)
 *
 * Event description: When users click on “create shipping label" on an order page (CTA for Shippo shipping labels)
 *
 * @param {shippoShippingLabelsClickOnCreateShippingLabelParams} params - The parameters for this event
 * @property {string} source - Where the manage shipping label action was sent from: order page/
 * orders list-bulk. If null- from order page (before field was implemented)
 * @property {string} orderId - List of order ids (for bulk)/ order_id for single purchase
 * @property {string} country - The stores country
 * @property {string} flow - ‘First timer shippo installed’/
 * ‘First timer shippo not installed’/
 * ‘Not first timer’
 * @return {LogObject<shippoShippingLabelsClickOnCreateShippingLabelParams>} LogObject<shippoShippingLabelsClickOnCreateShippingLabelParams>
 */
export function shippoShippingLabelsClickOnCreateShippingLabel(params) {
    return {
        evid: 710,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippoShippingLabelsClickOnGetStartedBuyShippingLabelFirstTimeFlows' event (evid: 711)
 *
 * Event description: When first-time flow (installed/uninstalled) click on “get started”/buy a shipping label
 *
 * @param {shippoShippingLabelsClickOnGetStartedBuyShippingLabelFirstTimeFlowsParams} params - The parameters for this event
 * @property {string} source - order page/
 * orders list-bulk. If null- from order page (before field was implemented)
 * @property {string} bottom - First time Shippo installed - “Buy shipping label” / First timer Shippo not installed - “Start now
 * @property {string} orderId - List of order ids (for bulk)/ order_id for single purchase
 * @property {string} country - The stores country
 * @return {LogObject<shippoShippingLabelsClickOnGetStartedBuyShippingLabelFirstTimeFlowsParams>} LogObject<shippoShippingLabelsClickOnGetStartedBuyShippingLabelFirstTimeFlowsParams>
 */
export function shippoShippingLabelsClickOnGetStartedBuyShippingLabelFirstTimeFlows(params) {
    return {
        evid: 711,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentInfoOpenedOaSrc130Evid714' event (evid: 714)
 *
 * Event description: Payment Info - Opened OA
 *
 * @param {paymentInfoOpenedOaSrc130Evid714Params} params - The parameters for this event
 * @property {string} type - amount paid/refunded/paid with Paid Plans
 * @property {string} catalogAppId - List of catalogs representing items in order (Stores app id, Bookings app id..)
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {GUID} orderId - ecom order id
 * @return {LogObject<paymentInfoOpenedOaSrc130Evid714Params>} LogObject<paymentInfoOpenedOaSrc130Evid714Params>
 */
export function paymentInfoOpenedOaSrc130Evid714(params) {
    return {
        evid: 714,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentInfoClickOnLinkOaSrc130Evid715' event (evid: 715)
 *
 * Event description: Payment Info - click on link OA
 *
 * @param {paymentInfoClickOnLinkOaSrc130Evid715Params} params - The parameters for this event
 * @property {string} type - amount paid/refunded/paid with Paid Plans
 * @property {string} catalogAppId - List of catalogs representing items in order (Stores app id, Bookings app id..)
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {GUID} orderId - ecom order id
 * @property {GUID} paymentId - paymentId
 * @return {LogObject<paymentInfoClickOnLinkOaSrc130Evid715Params>} LogObject<paymentInfoClickOnLinkOaSrc130Evid715Params>
 */
export function paymentInfoClickOnLinkOaSrc130Evid715(params) {
    return {
        evid: 715,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippoShippingLabelsManageShippingLabelIsPresented' event (evid: 716)
 *
 * Event description: When “Manage shipping label” option is presented to the user
 *
 * @param {shippoShippingLabelsManageShippingLabelIsPresentedParams} params - The parameters for this event
 * @property {string} source - order page/
 * orders list-bulk. If null- from order page (before field was implemented)
 * @property {string} shippingLabelAppName - The name of the shipping label app. In this case Shippo (in the feature it can be other options)
 * @property {string} orderId - order id
 * @property {string} country - The stores country
 * @return {LogObject<shippoShippingLabelsManageShippingLabelIsPresentedParams>} LogObject<shippoShippingLabelsManageShippingLabelIsPresentedParams>
 */
export function shippoShippingLabelsManageShippingLabelIsPresented(params) {
    return {
        evid: 716,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersAddManualOrderActivity' event (evid: 720)
 *
 * Event description: When the user adds a manual activity to the order page
 *
 * @param {ordersAddManualOrderActivityParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} description - Manual activity description - limit to 300 chars
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @return {LogObject<ordersAddManualOrderActivityParams>} LogObject<ordersAddManualOrderActivityParams>
 */
export function ordersAddManualOrderActivity(params) {
    return {
        evid: 720,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxAvalaraPopupShownBm' event (evid: 721)
 *
 * Event description: pop up for user who chooses Automated tax calculation shown (in it user should create his Avalara account. creating of account has 6 phases: welcome popup/personal_details/loader/success)
 *
 * @param {taxAvalaraPopupShownBmParams} params - The parameters for this event
 * @property {string} name - welcome/personal_details/loader/success
 * @property {string} origin - empty_state/ switch_to_auto /in_progress
 * @return {LogObject<taxAvalaraPopupShownBmParams>} LogObject<taxAvalaraPopupShownBmParams>
 */
export function taxAvalaraPopupShownBm(params) {
    return {
        evid: 721,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxChoseFlowTypeForTaxCalculation' event (evid: 722)
 *
 * Event description: When new user first opens Tax Tab (empty state) and clicks to use specific flow type of calculating tax (with avalara or manual)
 *
 * @param {taxChoseFlowTypeForTaxCalculationParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} flowType - chosen flow type: avalara/manual
 * @return {LogObject<taxChoseFlowTypeForTaxCalculationParams>} LogObject<taxChoseFlowTypeForTaxCalculationParams>
 */
export function taxChoseFlowTypeForTaxCalculation(params) {
    return {
        evid: 722,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnSwitchToManualSwitchToAutomatedTaxSm' event (evid: 723)
 *
 * Event description: When clicks on "Switch to manual"/"Switch to Automated tax" to change the flow type (in case of swithching from avalara to manual - after confirming in Warning popup) in BO
 *
 * @param {taxClickOnSwitchToManualSwitchToAutomatedTaxSmParams} params - The parameters for this event
 * @property {boolean} needsOnboarding - true - if user clicks "Switch to Auto" and doesn't have Avalara account yet, in all other cases - false
 * @property {string} flowType - flow_type
 * @property {string} origin - button / tooltip
 * @return {LogObject<taxClickOnSwitchToManualSwitchToAutomatedTaxSmParams>} LogObject<taxClickOnSwitchToManualSwitchToAutomatedTaxSmParams>
 */
export function taxClickOnSwitchToManualSwitchToAutomatedTaxSm(params) {
    return {
        evid: 723,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToAvalaraManual' event (evid: 724)
 *
 * Event description: the list of taxRuleIds that change flowType of tax calculation to avalara/manual
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToAvalaraManualParams} params - The parameters for this event
 * @property {boolean} needsOnboarding - true - if user clicks "Switch to Auto" and doesn't have Avalara account yet, in all other cases - false
 * @property {string} flowType - chosen flow type: avalara/manual
 * @property {string} appName - app_name
 * @property {string} taxIdList - button / tooltip
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraManualParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToAvalaraManualParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToAvalaraManual(params) {
    return {
        evid: 724,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAvalaraPopup' event (evid: 725)
 *
 * Event description: a click in Avalara popup on button or "X" (close) : in welcome popup options are close/continue; in personal_details options are close/back/continue (in SM "Create Account"); in loader popups only close ; in success popup close/continue (in SM"Done")
 *
 * @param {taxClickOnAvalaraPopupParams} params - The parameters for this event
 * @property {string} name - welcome/personal_details/loader/success
 * @property {string} taxState - state of future default Nexus
 * @property {string} taxCountry - country of future deafult Nexus
 * @property {string} value - close/back/continue
 * @return {LogObject<taxClickOnAvalaraPopupParams>} LogObject<taxClickOnAvalaraPopupParams>
 */
export function taxClickOnAvalaraPopup(params) {
    return {
        evid: 725,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickEditOrderActivity' event (evid: 726)
 *
 * Event description: When the user clicks to edit / delete a manual activity on the order page
 *
 * @param {ordersClickEditOrderActivityParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} activity_type - edit/delete
 * @property {string} appDefId - app_def_id
 * @return {LogObject<ordersClickEditOrderActivityParams>} LogObject<ordersClickEditOrderActivityParams>
 */
export function ordersClickEditOrderActivity(params) {
    return {
        evid: 726,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersPaymentInfoCardClick' event (evid: 727)
 *
 * Event description: when the user expands/collapses a specific section in the order page payment info
 *
 * @param {ordersPaymentInfoCardClickParams} params - The parameters for this event
 * @property {string} paymentStatus - partiallyRefunded/refunded/paid/notPaid
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} sectionName - amount paid / refund...
 * @property {string} action - expand / collapse
 * @return {LogObject<ordersPaymentInfoCardClickParams>} LogObject<ordersPaymentInfoCardClickParams>
 */
export function ordersPaymentInfoCardClick(params) {
    return {
        evid: 727,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsActivateTipOnCheckoutIsCheckUncheck' event (evid: 728)
 *
 * Event description: When a user checks/uncheck the visibility of tip checkout
 *
 * app ID and type sent only from v2 of the app (September 2024)
 *
 * @param {tipsActivateTipOnCheckoutIsCheckUncheckParams} params - The parameters for this event
 * @property {string} action - check/uncheck
 * @property {GUID} appId - app id to distinguish between the app versions
 * @property {string} type - which toggle was activated - client or admin
 * @return {LogObject<tipsActivateTipOnCheckoutIsCheckUncheckParams>} LogObject<tipsActivateTipOnCheckoutIsCheckUncheckParams>
 */
export function tipsActivateTipOnCheckoutIsCheckUncheck(params) {
    return {
        evid: 728,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsClickOnOptionType' event (evid: 729)
 *
 * Event description: When a user changes the calculation type for the tip options
 * app ID sent only from v2 of the app (September 2024)
 *
 * @param {tipsClickOnOptionTypeParams} params - The parameters for this event
 * @property {string} optionType - Percentage/Fixed amount
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsClickOnOptionTypeParams>} LogObject<tipsClickOnOptionTypeParams>
 */
export function tipsClickOnOptionType(params) {
    return {
        evid: 729,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipClickOnAddDeleteTippingRateOption' event (evid: 730)
 *
 * Event description: When a user add/delete tipping rate option
 *
 * app ID only from v2 of the app (September 2024)
 *
 *
 * @param {tipClickOnAddDeleteTippingRateOptionParams} params - The parameters for this event
 * @property {string} action - Add/Delete
 * @property {string} optionType - Percentage/Fixed amount
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipClickOnAddDeleteTippingRateOptionParams>} LogObject<tipClickOnAddDeleteTippingRateOptionParams>
 */
export function tipClickOnAddDeleteTippingRateOption(params) {
    return {
        evid: 730,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsModifyTipOptionRate' event (evid: 731)
 *
 * Event description: When a user changes the value of a tipping rate
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsModifyTipOptionRateParams} params - The parameters for this event
 * @property {number} rate - The new value * 100000
 * @property {string} optionType - Percentage/Fixed amount
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsModifyTipOptionRateParams>} LogObject<tipsModifyTipOptionRateParams>
 */
export function tipsModifyTipOptionRate(params) {
    return {
        evid: 731,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsActivateCustomTip' event (evid: 732)
 *
 * Event description: When a user checked ‘Let customers leave custom tip amounts'
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsActivateCustomTipParams} params - The parameters for this event
 * @property {string} action - check/uncheck
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsActivateCustomTipParams>} LogObject<tipsActivateCustomTipParams>
 */
export function tipsActivateCustomTip(params) {
    return {
        evid: 732,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsClickOnSave' event (evid: 733)
 *
 * Event description: When a user clicks on save
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsClickOnSaveParams} params - The parameters for this event
 * @property {string} origin - top/bottom
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsClickOnSaveParams>} LogObject<tipsClickOnSaveParams>
 */
export function tipsClickOnSave(params) {
    return {
        evid: 733,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsLeavingPageModalIsShown' event (evid: 734)
 *
 * Event description: When leaving modal is shown
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsLeavingPageModalIsShownParams} params - The parameters for this event
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsLeavingPageModalIsShownParams>} LogObject<tipsLeavingPageModalIsShownParams>
 */
export function tipsLeavingPageModalIsShown(params) {
    return {
        evid: 734,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsClickCancelLeaveInTheLeavingModal' event (evid: 735)
 *
 * Event description: When a user clicks on an option in the  leaving modal
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsClickCancelLeaveInTheLeavingModalParams} params - The parameters for this event
 * @property {string} button - cancel/leave
 * @property {GUID} appId - app id to distinguish between the app versions
 *
 * @return {LogObject<tipsClickCancelLeaveInTheLeavingModalParams>} LogObject<tipsClickCancelLeaveInTheLeavingModalParams>
 */
export function tipsClickCancelLeaveInTheLeavingModal(params) {
    return {
        evid: 735,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsErrorMessage' event (evid: 736)
 *
 * Event description: When a user gets an error in the tip app
 * app ID + origin only from v2 of the app (September 2024)
 *
 *
 *
 *
 * @param {tipsErrorMessageParams} params - The parameters for this event
 * @property {string} errorType - 0 amount/Duplicated amount
 * @property {string} origin - the modal/page that shows the error
 * @property {GUID} appId - app id to distinguish between the app versions
 *
 * @return {LogObject<tipsErrorMessageParams>} LogObject<tipsErrorMessageParams>
 */
export function tipsErrorMessage(params) {
    return {
        evid: 736,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsSetDefaultTipOption' event (evid: 737)
 *
 * Event description: When a user set the default option
 *
 * @param {tipsSetDefaultTipOptionParams} params - The parameters for this event
 * @property {number} rate - The value of the default option * 100000
 * @return {LogObject<tipsSetDefaultTipOptionParams>} LogObject<tipsSetDefaultTipOptionParams>
 */
export function tipsSetDefaultTipOption(params) {
    return {
        evid: 737,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manualOrderErrorShown' event (evid: 738)
 *
 * Event description: When error is shown to user
 *
 * @param {manualOrderErrorShownParams} params - The parameters for this event
 * @property {string} errorMessage - Error presented to user
 * @property {GUID} appDefId - app_def_id
 * @property {string} tempOrderId - Id for the order from the moment the user clicks on “create new order” until the user saves the order
 * @property {string} modalName - discount/ shipping/
 * @return {LogObject<manualOrderErrorShownParams>} LogObject<manualOrderErrorShownParams>
 */
export function manualOrderErrorShown(params) {
    return {
        evid: 738,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnCreatePayLink' event (evid: 739)
 *
 * Event description: The user clicks on "Create Pay Link" on the order page - deprecated - changed to 130:740
 *
 * @param {paymentCollectorClickOnCreatePayLinkParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} appName - appName
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - appDefId
 * @property {string} origin - order_page_header, order_page_payment
 * @return {LogObject<paymentCollectorClickOnCreatePayLinkParams>} LogObject<paymentCollectorClickOnCreatePayLinkParams>
 */
export function paymentCollectorClickOnCreatePayLink(params) {
    return {
        evid: 739,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnItemInCollectPaymentMenu' event (evid: 740)
 *
 * Event description: When the user click on a specific item from the collect payment menu
 *
 * @param {paymentCollectorClickOnItemInCollectPaymentMenuParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} paymentmethod - chosen payment method
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {GUID} appId - chosen payment method app_id
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorClickOnItemInCollectPaymentMenuParams>} LogObject<paymentCollectorClickOnItemInCollectPaymentMenuParams>
 */
export function paymentCollectorClickOnItemInCollectPaymentMenu(params) {
    return {
        evid: 740,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageClickOnUpdateStatusInUpdateFulfillmentStatus' event (evid: 741)
 *
 * Event description: When the user clicks on "Update Status" in update fulfillment status - currently for Menu items on the order page.
 *
 * @param {orderPageClickOnUpdateStatusInUpdateFulfillmentStatusParams} params - The parameters for this event
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} currentFulfillmentStatus - Fulfillment status chosen by the user- Pending, Accepted, Ready, Out for Delivery, Fulfilled
 * @property {string} fulfillmentStatus - Fulfillment status chosen by the user- Pending, Accepted, Ready, Out for Delivery, Fulfilled
 * @return {LogObject<orderPageClickOnUpdateStatusInUpdateFulfillmentStatusParams>} LogObject<orderPageClickOnUpdateStatusInUpdateFulfillmentStatusParams>
 */
export function orderPageClickOnUpdateStatusInUpdateFulfillmentStatus(params) {
    return {
        evid: 741,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tipsClickOnGetStarted' event (evid: 742)
 *
 * Event description: When a user clicks on 'Get Started' on the app page (in the BO)
 *
 * @param {tipsClickOnGetStartedParams} params - The parameters for this event
 * @return {LogObject<tipsClickOnGetStartedParams>} LogObject<tipsClickOnGetStartedParams>
 */
export function tipsClickOnGetStarted(params) {
    return {
        evid: 742,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxTaxRegionCreated' event (evid: 743)
 *
 * Event description: merchant saved a new tax region
 *
 * @param {taxTaxRegionCreatedParams} params - The parameters for this event
 * @property {GUID} taxRegionId - tax_region_id
 * @property {string} taxCountry - the country of the region
 * @property {string} subDivision - the state in the region
 * @property {string} calculationMethod - avalara/ manual etc.
 * @return {LogObject<taxTaxRegionCreatedParams>} LogObject<taxTaxRegionCreatedParams>
 */
export function taxTaxRegionCreated(params) {
    return {
        evid: 743,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddInChangeCalculationMethodModal' event (evid: 744)
 *
 * Event description: merchant clicks on 'Add' in 'Change calculation method' modal
 *
 * @param {taxClickOnAddInChangeCalculationMethodModalParams} params - The parameters for this event
 * @property {GUID} taxRegionId - tax_region_id
 * @property {string} origin - origin
 * @property {string} taxCountry - the country of the region
 * @property {string} subDivision - the state in the region
 * @property {string} calculationMethod - avalara/ manual etc.
 * @return {LogObject<taxClickOnAddInChangeCalculationMethodModalParams>} LogObject<taxClickOnAddInChangeCalculationMethodModalParams>
 */
export function taxClickOnAddInChangeCalculationMethodModal(params) {
    return {
        evid: 744,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnSaveInEditThisGroupModal' event (evid: 745)
 *
 * Event description: merchant clicks on 'Save' in 'Edit this group' modal
 *
 * @param {taxClickOnSaveInEditThisGroupModalParams} params - The parameters for this event
 * @property {string} taxGroupId - tax_group_id
 * @property {string} avalaraTaxCode - avalara_tax_code
 * @property {string} taxGroupName - tax_group_name
 * @return {LogObject<taxClickOnSaveInEditThisGroupModalParams>} LogObject<taxClickOnSaveInEditThisGroupModalParams>
 */
export function taxClickOnSaveInEditThisGroupModal(params) {
    return {
        evid: 745,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnRemoveGroupInRemoveGroupModal' event (evid: 746)
 *
 * Event description: merchant clicks on 'Remove Group' in 'Remove Group' modal
 *
 * @param {taxClickOnRemoveGroupInRemoveGroupModalParams} params - The parameters for this event
 * @property {string} taxGroupId - tax_group_id
 * @property {string} taxGroupName - tax_group_name
 * @return {LogObject<taxClickOnRemoveGroupInRemoveGroupModalParams>} LogObject<taxClickOnRemoveGroupInRemoveGroupModalParams>
 */
export function taxClickOnRemoveGroupInRemoveGroupModal(params) {
    return {
        evid: 746,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddCustomGroup' event (evid: 747)
 *
 * Event description: merchant clicks on 'Add Custom Group'
 *
 * @param {taxClickOnAddCustomGroupParams} params - The parameters for this event
 * @return {LogObject<taxClickOnAddCustomGroupParams>} LogObject<taxClickOnAddCustomGroupParams>
 */
export function taxClickOnAddCustomGroup(params) {
    return {
        evid: 747,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOn3Dots' event (evid: 748)
 *
 * Event description: merchant cicks on 3 dots
 *
 * @param {taxClickOn3DotsParams} params - The parameters for this event
 * @property {GUID} taxRegionId - tax_region_id
 * @property {string} origin - origin
 * @property {string} taxCountry - the country of the region
 * @property {string} subDivision - the state in the region
 * @property {string} calculationMethod - avalara/ manual etc.
 * @return {LogObject<taxClickOn3DotsParams>} LogObject<taxClickOn3DotsParams>
 */
export function taxClickOn3Dots(params) {
    return {
        evid: 748,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddOverrides' event (evid: 749)
 *
 * Event description: Click on add in Products Picker
 *
 * @param {taxClickOnAddOverridesParams} params - The parameters for this event
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} taxGroupId - tax_group_id
 * @property {number} numberOfItems - number_of_items
 * @property {string} taxGroupName - tax_group_name
 * @return {LogObject<taxClickOnAddOverridesParams>} LogObject<taxClickOnAddOverridesParams>
 */
export function taxClickOnAddOverrides(params) {
    return {
        evid: 749,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnOneOfStoreSettingsCardConnectPaymentSetShippingSetTaxUpgradeOa' event (evid: 75)
 *
 * Event description: merchant clicks on Shipping /Tax in Settings tab Stores OA or when goes through dashboard on-boarding OA clicks on Add a Product / Connect Payment / Set up shipping  / Set up tax / Upgrade step
 *
 * @param {clickOnOneOfStoreSettingsCardConnectPaymentSetShippingSetTaxUpgradeOaParams} params - The parameters for this event
 * @property {string} type - shipping / tax / product / payment / premium
 * @property {string} origin - settings / onboarding / orders
 * @return {LogObject<clickOnOneOfStoreSettingsCardConnectPaymentSetShippingSetTaxUpgradeOaParams>} LogObject<clickOnOneOfStoreSettingsCardConnectPaymentSetShippingSetTaxUpgradeOaParams>
 */
export function clickOnOneOfStoreSettingsCardConnectPaymentSetShippingSetTaxUpgradeOa(params) {
    return {
        evid: 75,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddInAddOverrides' event (evid: 750)
 *
 * Event description: Products added to group
 *
 * @param {taxClickOnAddInAddOverridesParams} params - The parameters for this event
 * @property {string} lineItems - line_items_list
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} taxGroupId - tax_group_id
 * @property {string} taxGroupName - tax_group_name
 * @return {LogObject<taxClickOnAddInAddOverridesParams>} LogObject<taxClickOnAddInAddOverridesParams>
 */
export function taxClickOnAddInAddOverrides(params) {
    return {
        evid: 750,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnAddInAddANewGroupModal' event (evid: 751)
 *
 * Event description: merchant clicks on 'Add' in 'Add a New Group' modal
 *
 * @param {taxClickOnAddInAddANewGroupModalParams} params - The parameters for this event
 * @property {GUID} taxGroupID - tax_group_id
 * @property {string} avalaraTaxCode - avalara_tax_code
 * @property {string} taxGroupName - tax_group_name
 * @return {LogObject<taxClickOnAddInAddANewGroupModalParams>} LogObject<taxClickOnAddInAddANewGroupModalParams>
 */
export function taxClickOnAddInAddANewGroupModal(params) {
    return {
        evid: 751,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxClickOnRemoveInRemoveLocationModal' event (evid: 752)
 *
 * Event description: merchant clicks on 'Remove' in 'Remove Location' modal
 *
 * @param {taxClickOnRemoveInRemoveLocationModalParams} params - The parameters for this event
 * @property {string} origin - origin
 * @property {GUID} taxRegionId - tax_region_id
 * @return {LogObject<taxClickOnRemoveInRemoveLocationModalParams>} LogObject<taxClickOnRemoveInRemoveLocationModalParams>
 */
export function taxClickOnRemoveInRemoveLocationModal(params) {
    return {
        evid: 752,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageMoreActionsMenuIsOpened' event (evid: 753)
 *
 * Event description: When the "more actions" menu is opened from the order page
 *
 * @param {orderPageMoreActionsMenuIsOpenedParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} actionsList - list of actions displayed to the user, and their status (disabled /enabled)
 * @property {string} origin - More actions- order page
 * @property {string} fulfillmentStatus - fulfillment_status
 * @return {LogObject<orderPageMoreActionsMenuIsOpenedParams>} LogObject<orderPageMoreActionsMenuIsOpenedParams>
 */
export function orderPageMoreActionsMenuIsOpened(params) {
    return {
        evid: 753,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderPageClickOnCtaInMoreActionsMenu' event (evid: 754)
 *
 * Event description: When the user clicks on a specific action in the "more actions" menu from the order page
 *
 * @param {orderPageClickOnCtaInMoreActionsMenuParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} origin - More actions- order page
 * @property {string} action - Edit order/ archive/ print order..
 * @property {string} fulfillmentStatus - fulfillment_status
 * @return {LogObject<orderPageClickOnCtaInMoreActionsMenuParams>} LogObject<orderPageClickOnCtaInMoreActionsMenuParams>
 */
export function orderPageClickOnCtaInMoreActionsMenu(params) {
    return {
        evid: 754,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderModifyLineItemQuantity' event (evid: 757)
 *
 * Event description: When the user clicks on increase quantity
 *
 * @param {draftOrderModifyLineItemQuantityParams} params - The parameters for this event
 * @property {number} quantity - new quantity
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderModifyLineItemQuantityParams>} LogObject<draftOrderModifyLineItemQuantityParams>
 */
export function draftOrderModifyLineItemQuantity(params) {
    return {
        evid: 757,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInSummaryCard' event (evid: 759)
 *
 * Event description: When the user clicks on CTA in the summary card
 *
 * @param {draftOrderClickOnCtaInSummaryCardParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} action - Manage shipping, manage fees&tips, manage discounts, delivery method
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnCtaInSummaryCardParams>} LogObject<draftOrderClickOnCtaInSummaryCardParams>
 */
export function draftOrderClickOnCtaInSummaryCard(params) {
    return {
        evid: 759,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSendEmailCancelRefundConfirmationToBuyer' event (evid: 76)
 *
 * Event description: When user sends an email about cancel/refund confirmation to the buyer
 *
 * @param {ordersSendEmailCancelRefundConfirmationToBuyerParams} params - The parameters for this event
 * @property {boolean} isFreeTextChanged - True if the user changed the free text content, otherwise false
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - cancel modal / issue refund / .......
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded
 * @property {string} type - cancel / refund
 * @return {LogObject<ordersSendEmailCancelRefundConfirmationToBuyerParams>} LogObject<ordersSendEmailCancelRefundConfirmationToBuyerParams>
 */
export function ordersSendEmailCancelRefundConfirmationToBuyer(params) {
    return {
        evid: 76,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInPriceModal' event (evid: 766)
 *
 * Event description: When the user clicks on CTA in in items price modal
 *
 * @param {draftOrderClickOnCtaInPriceModalParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {number} price - int*100,000
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} modalName - Set price, edit price
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnCtaInPriceModalParams>} LogObject<draftOrderClickOnCtaInPriceModalParams>
 */
export function draftOrderClickOnCtaInPriceModal(params) {
    return {
        evid: 766,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderClickOnAddCustomItem' event (evid: 768)
 *
 * Event description: When the user clicks on "Add" Custom Item
 *
 * @param {draftOrderClickOnAddCustomItemParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {number} price - int*100,000
 * @property {string} itemInfo - item_info
 * @property {string} title - title
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnAddCustomItemParams>} LogObject<draftOrderClickOnAddCustomItemParams>
 */
export function draftOrderClickOnAddCustomItem(params) {
    return {
        evid: 768,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderToastShown' event (evid: 769)
 *
 * Event description: Toast is shown to the user
 *
 * @param {draftOrderToastShownParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} orderId - order_id
 * @property {boolean} isSuccess - is_success
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderToastShownParams>} LogObject<draftOrderToastShownParams>
 */
export function draftOrderToastShown(params) {
    return {
        evid: 769,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderCommitOrder' event (evid: 770)
 *
 * Event description: Draft order commit- send from confirmation to BE after clicking on update order
 *
 * @param {draftOrderCommitOrderParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} orderId - order_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderCommitOrderParams>} LogObject<draftOrderCommitOrderParams>
 */
export function draftOrderCommitOrder(params) {
    return {
        evid: 770,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingClicksOnPreviewCustomizeCheckout' event (evid: 771)
 *
 * Event description: When a user clicks on ‘Preview’ for the checkout on the commerce Setting page (checkout composer)
 *
 * @param {settingClicksOnPreviewCustomizeCheckoutParams} params - The parameters for this event
 * @return {LogObject<settingClicksOnPreviewCustomizeCheckoutParams>} LogObject<settingClicksOnPreviewCustomizeCheckoutParams>
 */
export function settingClicksOnPreviewCustomizeCheckout(params) {
    return {
        evid: 771,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingClicksOnEditCustomizeCheckout' event (evid: 772)
 *
 * Event description: When a user clicks on edit on the commerce setting page as an entry to the checkout composer.
 *
 * @param {settingClicksOnEditCustomizeCheckoutParams} params - The parameters for this event
 * @return {LogObject<settingClicksOnEditCustomizeCheckoutParams>} LogObject<settingClicksOnEditCustomizeCheckoutParams>
 */
export function settingClicksOnEditCustomizeCheckout(params) {
    return {
        evid: 772,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderAddDiscount' event (evid: 774)
 *
 * Event description: When the user clicks on “Add” in the add a discount
 *
 * @param {draftOrderAddDiscountParams} params - The parameters for this event
 * @property {string} name - discount name
 * @property {string} orderId - order_id
 * @property {number} amount - *100000 fee amount
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderAddDiscountParams>} LogObject<draftOrderAddDiscountParams>
 */
export function draftOrderAddDiscount(params) {
    return {
        evid: 774,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInManageFees' event (evid: 775)
 *
 * Event description: When the user clicks on CTA in the manage fees/tips window
 *
 * @param {draftOrderClickOnCtaInManageFeesParams} params - The parameters for this event
 * @property {string} selectedItems - json of selected items and prices
 * @property {string} orderId - order_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnCtaInManageFeesParams>} LogObject<draftOrderClickOnCtaInManageFeesParams>
 */
export function draftOrderClickOnCtaInManageFees(params) {
    return {
        evid: 775,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'draftOrderAddShipping' event (evid: 777)
 *
 * Event description: When the user clicks on “Add” in the Add delivery window
 *
 * @param {draftOrderAddShippingParams} params - The parameters for this event
 * @property {string} selectedOption - delivery/ pickup/ custom name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - order's catalogs
 * @property {string} draftOrderID - draft_order_id
 * @property {boolean} isCustom - is custom
 * @return {LogObject<draftOrderAddShippingParams>} LogObject<draftOrderAddShippingParams>
 */
export function draftOrderAddShipping(params) {
    return {
        evid: 777,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSelectOrderOrdersInOrdersList' event (evid: 778)
 *
 * Event description: User select order/orders in orders list (bulk action)
 *
 * @param {ordersSelectOrderOrdersInOrdersListParams} params - The parameters for this event
 * @property {string} orderIds - list of order/orders id selected
 * @return {LogObject<ordersSelectOrderOrdersInOrdersListParams>} LogObject<ordersSelectOrderOrdersInOrdersListParams>
 */
export function ordersSelectOrderOrdersInOrdersList(params) {
    return {
        evid: 778,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxErrorInSaveTaxBreakdowns' event (evid: 779)
 *
 * Event description: When the user is trying to save without filling all tax breakdowns that were added
 *
 * @param {taxErrorInSaveTaxBreakdownsParams} params - The parameters for this event
 * @property {GUID} taxMappingId - tax_mapping_id
 * @property {string} errorReason - Name already exist / Missing values- name/ Missing values- rate
 * @property {string} taxGroupId - tax_group_id - sends Stores catalog_app_id for products, Bookings for services
 * @property {GUID} taxRegionId - tax_region_id
 * @return {LogObject<taxErrorInSaveTaxBreakdownsParams>} LogObject<taxErrorInSaveTaxBreakdownsParams>
 */
export function taxErrorInSaveTaxBreakdowns(params) {
    return {
        evid: 779,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCancelRefundShownToUser' event (evid: 78)
 *
 * Event description: When the cancel/refund showed to the user. In WixApp Cancel/Refund details screen shown to user
 *
 * @param {ordersCancelRefundShownToUserParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - catalog_app_id
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} actionType - cancel with refund / refund
 * @property {string} paymentProvider - the payment
 * @property {string} pageType - modal / page
 * @return {LogObject<ordersCancelRefundShownToUserParams>} LogObject<ordersCancelRefundShownToUserParams>
 */
export function ordersCancelRefundShownToUser(params) {
    return {
        evid: 78,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingSpecificSectionOpenedClosed' event (evid: 780)
 *
 * Event description: When the user opened/ closed specific section in the settings
 *
 * @param {settingSpecificSectionOpenedClosedParams} params - The parameters for this event
 * @property {string} value - open/close
 * @property {string} section - Values:  customizeCheckout/checkoutPolicies/ payments/rules/ apps/emailNotifications
 * @return {LogObject<settingSpecificSectionOpenedClosedParams>} LogObject<settingSpecificSectionOpenedClosedParams>
 */
export function settingSpecificSectionOpenedClosed(params) {
    return {
        evid: 780,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingClickToDirectToExternalService' event (evid: 781)
 *
 * Event description: When the user clicks to be directed to external services such as: connect payments/ go to automation
 *
 * @param {settingClickToDirectToExternalServiceParams} params - The parameters for this event
 * @property {string} externalService - To which service the user will be directed:  connect payments/ go to automation, etc
 * @property {string} origin - From which section the user clicked on the service. Values: payments/ email notifications
 * @return {LogObject<settingClickToDirectToExternalServiceParams>} LogObject<settingClickToDirectToExternalServiceParams>
 */
export function settingClickToDirectToExternalService(params) {
    return {
        evid: 781,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxShowUnshowTaxBreakdowns' event (evid: 782)
 *
 * Event description: When the user turnes on/off the option to show tax breakdowns
 *
 * @param {taxShowUnshowTaxBreakdownsParams} params - The parameters for this event
 * @property {string} value - on/off (the toggle status)
 * @return {LogObject<taxShowUnshowTaxBreakdownsParams>} LogObject<taxShowUnshowTaxBreakdownsParams>
 */
export function taxShowUnshowTaxBreakdowns(params) {
    return {
        evid: 782,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersCancelRefundConfirmationModalShownToUser' event (evid: 80)
 *
 * Event description: When the cancel/refund confirmation modal shown to the user
 *
 * @param {ordersCancelRefundConfirmationModalShownToUserParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isSupported - true if payment provider is supported
 * @property {string} actionType - cancel with refund / refund / cancel
 * @property {boolean} hasLink - true if it is unsupported provider and click leads to payment provider's dashboard
 * @property {string} modalName - modal name
 * @return {LogObject<ordersCancelRefundConfirmationModalShownToUserParams>} LogObject<ordersCancelRefundConfirmationModalShownToUserParams>
 */
export function ordersCancelRefundConfirmationModalShownToUser(params) {
    return {
        evid: 80,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickOkConfirmationModalToCancelRefund' event (evid: 81)
 *
 * Event description: When the user click to cancel/refund order in confirmation modal
 *
 * @param {ordersClickOkConfirmationModalToCancelRefundParams} params - The parameters for this event
 * @property {GUID} clientRefundId - client_refund_id
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {boolean} updateInventory - true if the checkbox marked, false otherwize
 * @property {string} paymentStatus - order current payment status
 * @property {string} appName - app name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isSupported - true if payment provider is supported
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool),shipping}
 * @property {string} actionType - cancel with refund / refund / cancel
 * @property {string} origin - right bar / top menu
 * @property {string} paymentProvider - order payment providers
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded. Total amount refunded - sum of refunds.
 * @property {string} personalNoteInEmail - personal note in email (optional)
 * @property {string} refundType - full / partial / none
 * @property {boolean} isEmail - True if the email checkbox true, false otherwize
 * @property {boolean} hasLink - true if it is unsupported provider and click leads to payment provider's dashboard
 * @property {string} isAdditionalFees - false/ true if the user marked to refund additional fees. Null if the order doesn't have additional fees.
 * @property {string} refundDetails - refund amount per payment provider and transaction
 * @property {string} modalName - modal name
 * @return {LogObject<ordersClickOkConfirmationModalToCancelRefundParams>} LogObject<ordersClickOkConfirmationModalToCancelRefundParams>
 */
export function ordersClickOkConfirmationModalToCancelRefund(params) {
    return {
        evid: 81,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickToEditTrackingNumber' event (evid: 82)
 *
 * Event description: User clicks to edit tracking number of a carrier to the order info
 *
 * @param {ordersClickToEditTrackingNumberParams} params - The parameters for this event
 * @property {string} fulfillerName - e.g. Modalyst, FBA.. (+selffulfill )
 * @property {string} appName - app name
 * @property {string} fulfillerId - null for self fulfillment
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} fulfillerType - selffulfill/TPA/customFulfill
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all fulfiller items (in OneApp = true if choose tracking number screen)
 * @property {string} carrierName - carrier name..
 * @return {LogObject<ordersClickToEditTrackingNumberParams>} LogObject<ordersClickToEditTrackingNumberParams>
 */
export function ordersClickToEditTrackingNumber(params) {
    return {
        evid: 82,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersClickToCancelRefundInOrderPage' event (evid: 83)
 *
 * Event description: When the user click to cancel / refund in the top menu / right bar
 *
 * @param {ordersClickToCancelRefundInOrderPageParams} params - The parameters for this event
 * @property {string} appName - app name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} actionType - cancel / refund
 * @property {string} origin - top bar/ right bar
 * @return {LogObject<ordersClickToCancelRefundInOrderPageParams>} LogObject<ordersClickToCancelRefundInOrderPageParams>
 */
export function ordersClickToCancelRefundInOrderPage(params) {
    return {
        evid: 83,
        src: 130,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productSearchSearchApplied' event (evid: 1)
 *
 * Event description: When search applied and the results are shown to user
 *
 * @param {productSearchSearchAppliedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {number} duration - time from click to shown results
 * @property {number} resultsNum - supplier_product_id
 * @property {number} batchSize - batch size - data mostly for dev
 * @property {string} searchTerm - search term
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} orderingType - ordering details
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} categoryPath - List of categories user chosen (in order by hierarchy) - path
 * @property {GUID} msid - wix msid
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productSearchSearchAppliedParams>} LogObject<productSearchSearchAppliedParams>
 */
export function productSearchSearchApplied(params) {
    return {
        evid: 1,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'exportToCsvClicked' event (evid: 10)
 *
 * Event description: When user clicked to export cvs
 *
 * @param {exportToCsvClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isBulk - is bulk action
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - Number of variants
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - Import list/synced products list
 * @property {string} productName - product_name
 * @property {string} correlationId - helps to connect between client and server events
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier ProductI d
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<exportToCsvClickedParams>} LogObject<exportToCsvClickedParams>
 */
export function exportToCsvClicked(params) {
    return {
        evid: 10,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyNameSrc145Evid100' event (evid: 100)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc145Evid100Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc145Evid100Params>} LogObject<dummyNameSrc145Evid100Params>
 */
export function dummyNameSrc145Evid100(params) {
    return {
        evid: 100,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectModalystAccountToWix' event (evid: 1001)
 *
 * Event description: Connect modalyst account to wix
 *
 * @param {connectModalystAccountToWixParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - None - if source unknown
 * find_products_to_sell_pod - after clicking on existing POD card on FPTS page
 * find_products_to_sell_rts - after clicking on existing RTS card on FPTS page
 * fpwidget-pod - after clicking on Add Products from the new POD Products Widget
 * fpwidget-rts - after clicking on Add Products from the new RTS Products Widget
 * wix-sso - after installing Modalyst from login/signup page using Login with Wix button
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<connectModalystAccountToWixParams>} LogObject<connectModalystAccountToWixParams>
 */
export function connectModalystAccountToWix(params) {
    return {
        evid: 1001,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageLoaded' event (evid: 1002)
 *
 * Event description: Page Loaded
 *
 * @param {pageLoadedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} pageName - marketplace/product page
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<pageLoadedParams>} LogObject<pageLoadedParams>
 */
export function pageLoaded(params) {
    return {
        evid: 1002,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productDraftSaved' event (evid: 1003)
 *
 * Event description: Product Draft Saved
 *
 * @param {productDraftSavedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - marketplace/product page
 * @property {string} productName - productName
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productDraftSavedParams>} LogObject<productDraftSavedParams>
 */
export function productDraftSaved(params) {
    return {
        evid: 1003,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToImportList' event (evid: 1004)
 *
 * Event description: Product added to Import List
 *
 * @param {productAddedToImportListParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDynamicPrice - is_dynamic_price
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - is_shipping_in_cost
 * @property {string} itemsCost - JSON with variants origin prices
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} retailerPrices - JSON with retailer prices
 * @property {string} businessId - modalyst business id
 * @property {number} shippingRate - shipping_rate
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - variantsCount
 * @property {string} productDescription - productDescription
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - PODeditor/draft list/product page
 * @property {string} productName - productName
 * @property {string} currency - currency
 * @property {string} correlationId - correlation id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} pageName - marketplace/product page
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productAddedToImportListParams>} LogObject<productAddedToImportListParams>
 */
export function productAddedToImportList(params) {
    return {
        evid: 1004,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productAddedToSyncList' event (evid: 1005)
 *
 * Event description: Product Added to Sync List
 *
 * @param {productAddedToSyncListParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDynamicPrice - is_dynamic_price
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - is_shipping_in_cost
 * @property {string} itemsCost - JSON with variants origin prices
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} retailerPrices - JSON with retailer prices
 * @property {string} businessId - modalyst business id
 * @property {number} shippingRate - shipping_rate
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - variantsCount
 * @property {string} productDescription - productDescription
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - PODeditor/draft list/product page
 * @property {string} productName - productName
 * @property {string} currency - currency
 * @property {string} correlationId - id that helps connect between client and server events
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} pageName - marketplace/product page
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productAddedToSyncListParams>} LogObject<productAddedToSyncListParams>
 */
export function productAddedToSyncList(params) {
    return {
        evid: 1005,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'syncingProcessFinished' event (evid: 1006)
 *
 * Event description: Syncing process finished
 *
 * @param {syncingProcessFinishedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {boolean} isSuccess - isSuccess
 * @property {string} businessId - modalyst business id
 * @property {string} errorType - errorType
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailer_product_id
 * @property {string} errorDescription - errorDescription
 * @property {string} externalRetailerProductId - External_retailer_product_id (wix product id)
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - pod/rts
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<syncingProcessFinishedParams>} LogObject<syncingProcessFinishedParams>
 */
export function syncingProcessFinished(params) {
    return {
        evid: 1006,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productUnSynced' event (evid: 1007)
 *
 * Event description: Product UnSynced
 *
 * @param {productUnSyncedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} removalReason - removalReason
 * @property {string} businessId - modalyst business id
 * @property {string} triggeredBy - Modalyst/wix - who triggered this process
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailer_product_id
 * @property {string} externalRetailerProductId - External_retailer_product_id (wix product id)
 * @property {string} correlationId - correlation id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} pageName - marketplace/product page
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} destination - Syncing process finished
 * @property {string} marketplace - rts/pod
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productUnSyncedParams>} LogObject<productUnSyncedParams>
 */
export function productUnSynced(params) {
    return {
        evid: 1007,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'receiveOrder' event (evid: 1008)
 *
 * Event description: send it to each each retailer_product_id(for POD) and supplier - for RTS
 *
 * @param {receiveOrderParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} retailerProductIds - JSON with list of retailer products ids in order
 * @property {string} modalystProductIds - JSON with modalyst_product_ids in order
 * @property {string} modalystOrderId - Unic id from modalyst site
 * @property {number} modalystServiceFee - Modalyst_service_fee (retailer)
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included to cost
 * @property {string} accountId - modalyst account id
 * @property {string} supplierProductIds - JSON with Supplier product ids in order
 * @property {string} businessId - modalyst business id
 * @property {number} totalAmount - Retail order price (total price)
 * @property {number} shippingRate - Shipping cost
 * @property {boolean} isManual - Is order placed manually by retailer
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerOrderId - Retailer_order_id (wix)
 * @property {number} numProducts - Distinct products
 * @property {number} itemCost - Original cost
 * @property {number} itemsQuantity - Total variants
 * @property {number} modalystOrderNumber - number that is displayed for user in interface
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {number} numItems - Distinct variants
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<receiveOrderParams>} LogObject<receiveOrderParams>
 */
export function receiveOrder(params) {
    return {
        evid: 1008,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sendOrderToFulfiller' event (evid: 1009)
 *
 * Event description: Send order to fulfiller
 *
 * @param {sendOrderToFulfillerParams} params - The parameters for this event
 * @property {string} instanceId - instance_id
 * @property {string} retailerProductIds - list of retailer products ids in order
 * @property {string} modalystProductIds - list with modalyst_product_ids in order
 * @property {string} externalOrderId - External order id
 * @property {string} modalystOrderId - Unic id from modalyst site
 * @property {number} modalystServiceFee - Modalyst_service_fee (retailer)
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included to cost
 * @property {string} accountId - modalyst account id
 * @property {boolean} isSuccess - isSuccess
 * @property {string} supplierProductIds - list with Supplier product ids in order
 * @property {string} trackingNumber - Tracking number
 * @property {string} businessId - modalyst business id
 * @property {number} totalAmount - Retail order price (total price)
 * @property {number} shippingRate - Shipping cost
 * @property {boolean} isManual - Is order placed manually by retailer
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerOrderId - Retailer_order_id (wix)
 * @property {number} numProducts - Distinct products
 * @property {string} errorDescription - errorDescription
 * @property {number} itemCost - Original cost
 * @property {number} itemsQuantity - Total variants
 * @property {number} modalystOrderNumber - number that is displayed for user in interface
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {number} numItems - Distinct variants
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<sendOrderToFulfillerParams>} LogObject<sendOrderToFulfillerParams>
 */
export function sendOrderToFulfiller(params) {
    return {
        evid: 1009,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyNameSrc145Evid101' event (evid: 101)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc145Evid101Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc145Evid101Params>} LogObject<dummyNameSrc145Evid101Params>
 */
export function dummyNameSrc145Evid101(params) {
    return {
        evid: 101,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderFulfilled' event (evid: 1010)
 *
 * Event description: Order Fulfilled
 *
 * @param {orderFulfilledParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} retailerProductIds - list of retailer products ids in order
 * @property {string} modalystProductIds - modalyst_product_ids in order
 * @property {string} modalystOrderId - Unic id from modalyst site
 * @property {string} url - site's url. Null for Wix users
 * @property {number} modalystServiceFee - Modalyst_service_fee (retailer)
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included to cost
 * @property {string} accountId - modalyst account id
 * @property {string} supplierProductIds - list with Supplier product ids in order
 * @property {string} trackingNumber - Tracking number
 * @property {string} businessId - modalyst business id
 * @property {number} totalAmount - Retail order price (total price)
 * @property {number} shippingRate - Shipping cost
 * @property {boolean} isManual - is_manual
 * @property {string} carrierName - Courier name
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerOrderId - Retailer_order_id (wix)
 * @property {string} retailerProductId - retailerProductId
 * @property {number} numProducts - Distinct products
 * @property {number} itemCost - Original cost
 * @property {number} itemsQuantity - Total variants
 * @property {number} modalystOrderNumber - number that is displayed for user in interface
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {number} numItems - Distinct variants
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {DateTime} estimatedDeliveryDate - Estimated delivery date
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<orderFulfilledParams>} LogObject<orderFulfilledParams>
 */
export function orderFulfilled(params) {
    return {
        evid: 1010,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeDisconnected' event (evid: 1011)
 *
 * Event description: Store Disconnected
 *
 * @param {storeDisconnectedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<storeDisconnectedParams>} LogObject<storeDisconnectedParams>
 */
export function storeDisconnected(params) {
    return {
        evid: 1011,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPremiumUpgraded' event (evid: 1012)
 *
 * Event description: Modalyst Premium Upgraded
 *
 * @param {modalystPremiumUpgradedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} source - upgrade/bundle
 * @property {string} url - site's url. Null for Wix users
 * @property {string} subscriptionId - Subscription id
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} cycleName - Premium cycle
 * @property {string} prevSubscriptionId - Previous subscription id (null if it first)
 * @property {string} premiumPlanId - Package name
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<modalystPremiumUpgradedParams>} LogObject<modalystPremiumUpgradedParams>
 */
export function modalystPremiumUpgraded(params) {
    return {
        evid: 1012,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productCsvExported' event (evid: 1013)
 *
 * Event description: product's csv exported
 *
 * @param {productCsvExportedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {number} duration - exporting duration
 * @property {number} productCount - Number of products
 * @property {string} url - site's url. Null for Wix users
 * @property {GUID} biToken - wix msid
 * @property {boolean} isBulk - is bulk action
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {boolean} isSuccess - is_success
 * @property {string} businessId - modalyst business id
 * @property {number} variantsCount - variantsCount
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - Import list/synced products list
 * @property {string} errorDescription - Error description
 * @property {string} currency - currency
 * @property {string} correlationId - correlation_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} type - csv/shopify/bigcommerce
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productCsvExportedParams>} LogObject<productCsvExportedParams>
 */
export function productCsvExported(params) {
    return {
        evid: 1013,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productRemovedFromImportList' event (evid: 1014)
 *
 * Event description: Product removed from Import list
 *
 * @param {productRemovedFromImportListParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} url - site's url. Null for Wix users
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of variant ids
 * @property {boolean} isSuccess - is_success
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {string} retailerStorePlatform - retailer_store_platform
 * @property {string} retailerProductId - retailer_product_id
 * @property {string} errorDescription - Error description
 * @property {string} correlationId - correlation_id
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - Modalyst_product_id
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productRemovedFromImportListParams>} LogObject<productRemovedFromImportListParams>
 */
export function productRemovedFromImportList(params) {
    return {
        evid: 1014,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderSampleClicked' event (evid: 11)
 *
 * Event description: When user clicked on order sample
 *
 * @param {orderSampleClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - Number of variants in the order / sample order
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - Import list/synced products list/product page
 * @property {string} productName - product_name
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier ProductI d
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<orderSampleClickedParams>} LogObject<orderSampleClickedParams>
 */
export function orderSampleClicked(params) {
    return {
        evid: 11,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'placeAnOrderClicked' event (evid: 12)
 *
 * Event description: When user clicked place an order
 *
 * @param {placeAnOrderClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} modalystOrderId - Unique id from modalyst site
 * @property {number} modalystServiceFee - Modalyst_service_fee (retailer)
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included to cost
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {number} totalAmount - Retail order price (total price)
 * @property {number} shippingRate - Shipping cost
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - Number of variants in the order / sample order
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - Import list/synced products list/product page
 * @property {number} numProducts - Distinct products
 * @property {string} productName - product_name
 * @property {number} itemCost - Original cost
 * @property {number} itemsQuantity - Total number of variants
 * @property {string} correlationId - correlation_id
 * @property {number} modalystOrderNumber - number that is displayed for user in interface
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {number} numItems - Distinct variants
 * @property {string} supplierProductId - supplier ProductI d
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<placeAnOrderClickedParams>} LogObject<placeAnOrderClickedParams>
 */
export function placeAnOrderClicked(params) {
    return {
        evid: 12,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCategory' event (evid: 1201)
 *
 * Event description: Create Category
 *
 * @param {createCategoryParams} params - The parameters for this event
 * @property {boolean} isBulkAction - Is part of bulk action
 * @property {string} name - Category name.
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {boolean} isSlugProvided - Is slug provided by user
 * @property {boolean} visible - Whether the category is visible to site visitors in dynamic pages.
 * @property {string} description - Category description
 * @property {string} parentCategoryId - Parent Category (collections by legacy)
 * @property {string} slug - slug
 * @property {string} treeKey - tree key
 * @property {boolean} hasImage - Is category image attached
 * @property {string} namespace - application identifier
 * @return {LogObject<createCategoryParams>} LogObject<createCategoryParams>
 */
export function createCategory(params) {
    return {
        evid: 1201,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCategory' event (evid: 1202)
 *
 * Event description: Delete Category
 *
 * @param {deleteCategoryParams} params - The parameters for this event
 * @property {boolean} isBulkAction - is_bulk_action
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {boolean} isParentCategory - (collections by legacy)
 * @property {string} triggeredBy - parentId of the category which was directly deleted by the user. Only defined if isDirectlyDeleted=False
 * @property {boolean} isDirectlyDeleted - is_directly_deleted
 * @property {GUID} requestid - request_id (link to bulk metadata event)
 * @property {string} treeKey - tree key
 * @property {string} namespace - application identifier
 * @return {LogObject<deleteCategoryParams>} LogObject<deleteCategoryParams>
 */
export function deleteCategory(params) {
    return {
        evid: 1202,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'placeSubcategoryInCategory' event (evid: 1205)
 *
 * Event description: Place Subcategory in Category
 *
 * @param {placeSubcategoryInCategoryParams} params - The parameters for this event
 * @property {string} categoryId - collection_id
 * @property {boolean} visible - Whether the category is visible to site visitors in dynamic pages.
 * @property {string} parentCategoryId - Parent category ID (collections by legacy)
 * @property {string} treeKey - tree key
 * @property {number} indexInParentCategory - Subcategory place in direct hierarchy after placement in category.
 * @property {string} namespace - application identifier
 * @return {LogObject<placeSubcategoryInCategoryParams>} LogObject<placeSubcategoryInCategoryParams>
 */
export function placeSubcategoryInCategory(params) {
    return {
        evid: 1205,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateCategory' event (evid: 1206)
 *
 * Event description: Update Category
 *
 * @param {updateCategoryParams} params - The parameters for this event
 * @property {boolean} isBulkAction - Is part of bulk action
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {number} numberOfItems - Number of items in this category alone.
 * @property {string} updatedFields - List of fields that were provided by the user
 * @property {string} treeKey - tree key
 * @property {string} namespace - application identifier
 * @return {LogObject<updateCategoryParams>} LogObject<updateCategoryParams>
 */
export function updateCategory(params) {
    return {
        evid: 1206,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'itemAddedToCategory' event (evid: 1207)
 *
 * Event description: Item Added to Category
 *
 * @param {itemAddedToCategoryParams} params - The parameters for this event
 * @property {boolean} success - Whether the requested action was successful
 * @property {string} categoryId - categoryId, null in case of several categories (specified in collection_id_list) (collections by legacy)
 * @property {string} itemList - item_references (id + app_id)
 * @property {string} treeKey - tree key
 * @property {string} itemId - Item ID, null in case of several items (specified in item_id_list)
 * @property {GUID} appId - app id, null in case of several items
 * @property {string} categoryIdList - List of categories to which the item was added (collections by legacy)
 * @property {string} namespace - application identifier
 * @return {LogObject<itemAddedToCategoryParams>} LogObject<itemAddedToCategoryParams>
 */
export function itemAddedToCategory(params) {
    return {
        evid: 1207,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'moveItemInCategory' event (evid: 1208)
 *
 * Event description: Move Item in Category
 *
 * @param {moveItemInCategoryParams} params - The parameters for this event
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {number} indexInCategory - item’s position in category after replacement (collections by legacy)
 * @property {string} treeKey - tree key
 * @property {string} itemId - Item ID
 * @property {GUID} appId - ID of the catalog app. For example, the Wix Stores
 * @property {string} namespace - application identifier
 * @return {LogObject<moveItemInCategoryParams>} LogObject<moveItemInCategoryParams>
 */
export function moveItemInCategory(params) {
    return {
        evid: 1208,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'itemRemovedFromCategory' event (evid: 1209)
 *
 * Event description: Item Removed from Category
 *
 * @param {itemRemovedFromCategoryParams} params - The parameters for this event
 * @property {boolean} success - Whether the requested action was successful
 * @property {string} categoryId - categoryId, null in case of several categories (specified in collection_id_list) (collections by legacy)
 * @property {string} itemList - item_references (id + app_id)
 * @property {string} treeKey - tree key
 * @property {string} itemId - Item ID, null in case of several items (specified in item_id_list)
 * @property {GUID} appId - app def id, null in case of several items
 * @property {string} categoryIdList - List of categories to which the item was added (collections by legacy)
 * @property {string} namespace - application identifier
 * @return {LogObject<itemRemovedFromCategoryParams>} LogObject<itemRemovedFromCategoryParams>
 */
export function itemRemovedFromCategory(params) {
    return {
        evid: 1209,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkActionMetadata' event (evid: 1210)
 *
 * Event description: Bulk Action Metadata is sent with bulk actions that send an individual event for each instance of the bulk action.
 *
 * A link between Metadata and Bulk action can be made by requestid field.
 *
 * @param {bulkActionMetadataParams} params - The parameters for this event
 * @property {number} totalFailures - Number of failed actions out of bulk
 * @property {number} totalSuccesses - Number of successfully completed actions out of bulk
 * @return {LogObject<bulkActionMetadataParams>} LogObject<bulkActionMetadataParams>
 */
export function bulkActionMetadata(params) {
    return {
        evid: 1210,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'setCategoryVisibility' event (evid: 1211)
 *
 * Event description: Update Category Visibility
 *
 * @param {setCategoryVisibilityParams} params - The parameters for this event
 * @property {boolean} isBulkAction - is bulk
 * @property {string} categoryId - category ID
 * @property {boolean} visible - visible
 * @property {boolean} isSideEffect - isSideEffect
 * @property {string} triggeredBy - parentId of the category which was directly toggled by the user. Only defined if isSideEffect=true
 * @property {string} treeKey - tree key
 * @property {string} namespace - application identifier
 * @return {LogObject<setCategoryVisibilityParams>} LogObject<setCategoryVisibilityParams>
 */
export function setCategoryVisibility(params) {
    return {
        evid: 1211,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummy1' event (evid: 1212)
 *
 * Event description: dummy
 *
 * @param {dummy1Params} params - The parameters for this event
 * @return {LogObject<dummy1Params>} LogObject<dummy1Params>
 */
export function dummy1(params) {
    return {
        evid: 1212,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'setArrangedItems' event (evid: 1213)
 *
 * Event description: Set arranged items in category. Will be used when sort items by manual arrangement.
 *
 * @param {setArrangedItemsParams} params - The parameters for this event
 * @property {string} categoryId - Category ID (collections by legacy)
 * @property {string} items - Array of Item id with the id of the catalog app (For example, the Wix Stores)
 * @property {string} treeKey - tree key
 * @property {string} namespace - application identifier
 * @return {LogObject<setArrangedItemsParams>} LogObject<setArrangedItemsParams>
 */
export function setArrangedItems(params) {
    return {
        evid: 1213,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productEdited' event (evid: 13)
 *
 * Event description: When user edited a product
 *
 * @param {productEditedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} settingTab - In which tab user make change
 * @property {boolean} isDynamicPrice - is_dynamic_price
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included to cost
 * @property {string} itemsCost - JSON with variants origin prices
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - Null if user change smth in product level/variant id if change variant setting
 * @property {string} retailerPrices - JSON with retailer prices
 * @property {string} businessId - modalyst business id
 * @property {number} shippingRate - Shipping cost
 * @property {string} modalystVariantIds - Null if user change smth in product level/variant id if change variant setting
 * @property {number} variantsCount - Number of variants
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} oldValue - Old value
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - PODeditor/draft list/product page/import list
 * @property {string} currency - currency
 * @property {string} settingField - Which change made by the user: product description/product name/variant turned off/…
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - Supplier product id (sometimes can be null)
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @property {string} newValue - New value (for the variant change add variant_id:new value)
 * @return {LogObject<productEditedParams>} LogObject<productEditedParams>
 */
export function productEdited(params) {
    return {
        evid: 13,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userProfileMenuTriggered' event (evid: 14)
 *
 * Event description: User Profile Clicked
 *
 * @param {userProfileMenuTriggeredParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - main panel/ top actions
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<userProfileMenuTriggeredParams>} LogObject<userProfileMenuTriggeredParams>
 */
export function userProfileMenuTriggered(params) {
    return {
        evid: 14,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeSelectorTriggered' event (evid: 15)
 *
 * Event description: Stores Dropdown Clicked
 *
 * @param {storeSelectorTriggeredParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<storeSelectorTriggeredParams>} LogObject<storeSelectorTriggeredParams>
 */
export function storeSelectorTriggered(params) {
    return {
        evid: 15,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewStoreClicked' event (evid: 16)
 *
 * Event description: Add New Store Clicked
 *
 * @param {addNewStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - my stores page / stores dropdown
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<addNewStoreClickedParams>} LogObject<addNewStoreClickedParams>
 */
export function addNewStoreClicked(params) {
    return {
        evid: 16,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickPrintLabelAfterPurchaseSmSrc145Evid162' event (evid: 162)
 *
 * Event description: Shipping label -> Click "Print Label" after purchase SM.
 *
 * @param {shippingLabelClickPrintLabelAfterPurchaseSmSrc145Evid162Params} params - The parameters for this event
 * @property {boolean} emailDefined - true if "send shipping confirmation email" is marked - if for free :)
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {boolean} orderAvailability - order_availability
 * @property {string} carrierName - carrier_name
 * @property {string} origin - popup / 3dots / mainCTA
 * @property {GUID} shipmentId - id of shipping label
 * @return {LogObject<shippingLabelClickPrintLabelAfterPurchaseSmSrc145Evid162Params>} LogObject<shippingLabelClickPrintLabelAfterPurchaseSmSrc145Evid162Params>
 */
export function shippingLabelClickPrintLabelAfterPurchaseSmSrc145Evid162(params) {
    return {
        evid: 162,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewStoreModalShown' event (evid: 17)
 *
 * Event description: Modalyst Multi-stores: New Store Modal -> shown.
 *
 * @param {addNewStoreModalShownParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - sign up/retailer
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - subscription_plan_id
 * @return {LogObject<addNewStoreModalShownParams>} LogObject<addNewStoreModalShownParams>
 */
export function addNewStoreModalShown(params) {
    return {
        evid: 17,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewStoreModalNextClicked' event (evid: 18)
 *
 * Event description: Stores Dropdown Clicked
 *
 * @param {addNewStoreModalNextClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is_debug
 * @property {string} country - country
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - sign up/retailer
 * @property {string} storeName - storeName
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} action - action
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<addNewStoreModalNextClickedParams>} LogObject<addNewStoreModalNextClickedParams>
 */
export function addNewStoreModalNextClicked(params) {
    return {
        evid: 18,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelClickVoidLabelSmSrc145Evid180' event (evid: 180)
 *
 * Event description: after user successfully purchased a label he can "void" it (cancel) from 3dots menu from order page
 *
 * @param {shippingLabelClickVoidLabelSmSrc145Evid180Params} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - id of shipping label
 * @return {LogObject<shippingLabelClickVoidLabelSmSrc145Evid180Params>} LogObject<shippingLabelClickVoidLabelSmSrc145Evid180Params>
 */
export function shippingLabelClickVoidLabelSmSrc145Evid180(params) {
    return {
        evid: 180,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingLabelConfirmVoidShippingLabelInWarningPopupSmSrc145Evid181' event (evid: 181)
 *
 * Event description: after user clicked "void shipping label" (cancel) from 3dots menu from order page user confirms cancelling label in the warning popup
 *
 * @param {shippingLabelConfirmVoidShippingLabelInWarningPopupSmSrc145Evid181Params} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} carrierName - carrier_name
 * @property {string} origin - origin
 * @property {GUID} shipmentId - shipment_id
 * @return {LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupSmSrc145Evid181Params>} LogObject<shippingLabelConfirmVoidShippingLabelInWarningPopupSmSrc145Evid181Params>
 */
export function shippingLabelConfirmVoidShippingLabelInWarningPopupSmSrc145Evid181(params) {
    return {
        evid: 181,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectStoreModalStoreNameSubmitted' event (evid: 19)
 *
 * Event description: Connect Shopify store modal -> connect store
 *
 * @param {connectStoreModalStoreNameSubmittedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - name of the new store the use tries to connect/create
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<connectStoreModalStoreNameSubmittedParams>} LogObject<connectStoreModalStoreNameSubmittedParams>
 */
export function connectStoreModalStoreNameSubmitted(params) {
    return {
        evid: 19,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productSearchCategoryClicked' event (evid: 2)
 *
 * Event description: When user clicked on category in the category tabs
 *
 * @param {productSearchCategoryClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {number} resultsNum - supplier_product_id
 * @property {boolean} isDebug - is debug mode
 * @property {number} pathLength - number of levels in the hierarchy
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} categoryPath - List of categories user chosen (in order by hierarchy) - path
 * @property {GUID} msid - wix msid
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<productSearchCategoryClickedParams>} LogObject<productSearchCategoryClickedParams>
 */
export function productSearchCategoryClicked(params) {
    return {
        evid: 2,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'goToMyStoresClicked' event (evid: 20)
 *
 * Event description: Go To My Store Clicked
 *
 * @param {goToMyStoresClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - store selector/main navigation
 * @property {string} correlationId - correlation id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<goToMyStoresClickedParams>} LogObject<goToMyStoresClickedParams>
 */
export function goToMyStoresClicked(params) {
    return {
        evid: 20,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectStoreClicked' event (evid: 21)
 *
 * Event description: Select Store Clicked
 *
 * @param {selectStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants navigate to
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - account_id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - stores dropdown / my stores page
 * @property {string} storeName - the name of the store the user wants navigate to
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<selectStoreClickedParams>} LogObject<selectStoreClickedParams>
 */
export function selectStoreClicked(params) {
    return {
        evid: 21,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeCard3DotsClicked' event (evid: 22)
 *
 * Event description: Store Card-> 3Dots Clicked
 *
 * @param {storeCard3DotsClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants navigate to
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants navigate to
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<storeCard3DotsClickedParams>} LogObject<storeCard3DotsClickedParams>
 */
export function storeCard3DotsClicked(params) {
    return {
        evid: 22,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteStoreClicked' event (evid: 23)
 *
 * Event description: Delete store Clicked
 *
 * @param {deleteStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to delete
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - stores list
 * @property {string} storeName - the name of the store the user wants to delete
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<deleteStoreClickedParams>} LogObject<deleteStoreClickedParams>
 */
export function deleteStoreClicked(params) {
    return {
        evid: 23,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteStoreConfirmModalShown' event (evid: 24)
 *
 * Event description: Delete store Modal -> loaded
 *
 * @param {deleteStoreConfirmModalShownParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to delete
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is_debug
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants to delete
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<deleteStoreConfirmModalShownParams>} LogObject<deleteStoreConfirmModalShownParams>
 */
export function deleteStoreConfirmModalShown(params) {
    return {
        evid: 24,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteStoreConfirmModalConfirmed' event (evid: 25)
 *
 * Event description: Delete store Modal -> Delete Stores Clicked
 *
 * @param {deleteStoreConfirmModalConfirmedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to delete
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - account_id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants to delete
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<deleteStoreConfirmModalConfirmedParams>} LogObject<deleteStoreConfirmModalConfirmedParams>
 */
export function deleteStoreConfirmModalConfirmed(params) {
    return {
        evid: 25,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'disconnectStoreClicked' event (evid: 26)
 *
 * Event description: Disconnect store Clicked
 *
 * @param {disconnectStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to disconnect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is_debug
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants to disconnect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<disconnectStoreClickedParams>} LogObject<disconnectStoreClickedParams>
 */
export function disconnectStoreClicked(params) {
    return {
        evid: 26,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'disconnectStoreConfirmModalShown' event (evid: 27)
 *
 * Event description: Disconnect store modal -> loaded
 *
 * @param {disconnectStoreConfirmModalShownParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to disconnect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - account_id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants to disconnect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<disconnectStoreConfirmModalShownParams>} LogObject<disconnectStoreConfirmModalShownParams>
 */
export function disconnectStoreConfirmModalShown(params) {
    return {
        evid: 27,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'alibabaAliexpressSettingsClicked' event (evid: 28)
 *
 * Event description: when user clicks on Alibaba aliexpress settings
 *
 * @param {alibabaAliexpressSettingsClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - main panel/ top actions
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<alibabaAliexpressSettingsClickedParams>} LogObject<alibabaAliexpressSettingsClickedParams>
 */
export function alibabaAliexpressSettingsClicked(params) {
    return {
        evid: 28,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectStoreClicked' event (evid: 29)
 *
 * Event description: Multi-stores: Connect store Clicked
 *
 * @param {connectStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - id of the store users try to connect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - store card/ 3dots button/ alert
 * @property {string} storeName - the name of the store the user wants to disconnect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<connectStoreClickedParams>} LogObject<connectStoreClickedParams>
 */
export function connectStoreClicked(params) {
    return {
        evid: 29,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewProductDetailsClicked' event (evid: 3)
 *
 * Event description: When user clicks on view product details
 *
 * @param {viewProductDetailsClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} url - site's url. Null for Wix users
 * @property {string} appliedFilters - Applied filters when product was selected
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - dashboard / sync list
 * @property {string} ordering - Applied sorting when product was clicked
 * @property {string} productName - productName
 * @property {number} position - Product position in page
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<viewProductDetailsClickedParams>} LogObject<viewProductDetailsClickedParams>
 */
export function viewProductDetailsClicked(params) {
    return {
        evid: 3,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectStoreModalShown' event (evid: 30)
 *
 * Event description: when store connection modal is shown to user
 *
 * @param {connectStoreModalShownParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - id of the store users try to connect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - name of the store users try to connect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<connectStoreModalShownParams>} LogObject<connectStoreModalShownParams>
 */
export function connectStoreModalShown(params) {
    return {
        evid: 30,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'connectStoreModalNextClicked' event (evid: 31)
 *
 * Event description: when user clicked next in the Store Connection modal
 *
 * @param {connectStoreModalNextClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - id of the store users try to connect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - name of the store users try to connect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} action - Shopify / Wix
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<connectStoreModalNextClickedParams>} LogObject<connectStoreModalNextClickedParams>
 */
export function connectStoreModalNextClicked(params) {
    return {
        evid: 31,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'upgradeStoreClicked' event (evid: 32)
 *
 * Event description: when users clicks "upgrade your store button"
 *
 * @param {upgradeStoreClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - id of store the user want to upgrade
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - store card/ side navigation
 * @property {number} numProductsLeft - number of product left in the user plan
 * @property {string} storeName - name of store the user want to upgrade
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<upgradeStoreClickedParams>} LogObject<upgradeStoreClickedParams>
 */
export function upgradeStoreClicked(params) {
    return {
        evid: 32,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'disconnectStoreConfirmModalConfirmed' event (evid: 33)
 *
 * Event description: Disconnect store modal -> user clicked disconnect store button
 *
 * @param {disconnectStoreConfirmModalConfirmedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {GUID} targetStoreId - the id of the store the user wants to disconnect
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - account_id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} storeName - the name of the store the user wants to disconnect
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<disconnectStoreConfirmModalConfirmedParams>} LogObject<disconnectStoreConfirmModalConfirmedParams>
 */
export function disconnectStoreConfirmModalConfirmed(params) {
    return {
        evid: 33,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'logOutClicked' event (evid: 34)
 *
 * Event description: User Profile Clicked
 *
 * @param {logOutClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} uuid - uuid
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - main panel/ top actions
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {GUID} msid - msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<logOutClickedParams>} LogObject<logOutClickedParams>
 */
export function logOutClicked(params) {
    return {
        evid: 34,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetWidgetLoaded' event (evid: 35)
 *
 * Event description: When the product widget is loaded
 *
 * @param {productWidgetWidgetLoadedParams} params - The parameters for this event
 * @property {GUID} impression_id - Id of the user’s interaction with the widget. The value should be initialized when the widget is mounted and stay the same for all interactions - until it's unmounted/hidden.
 * @property {string} state - Shows the widget state.
 * @property {GUID} impressionId - Id of the user’s interaction with the widget. The value should be initialized when the widget is mounted and stay the same for all interactions - until it's unmounted/hidden.
 * @property {string} allProducts - List of all the product ids
 * @property {string} modelType - Returned value from model prediction. Showing what the models prediction was based on
 * @property {number} slideNum - Number of the slide that is currently visible to the user.
 * @property {string} displayedProducts - List of all the product IDs that are currently visible to the user. Those are modalyst products id. Those are the products in the current slide
 * @property {string} category - what is the category that displayed in the widget
 * @property {string} productsInSlides - [   [id1, id2, id3],   [id4, id5, id6],   [id7, id8], ]
 * @property {string} pageName - In what page the widget was loaded
 * @property {number} totalNumSlides - Total number of slides in the widget
 * @property {string} modelVersion - Returned value from model prediction. ‘modelName_version’ = example of data
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetWidgetLoadedParams>} LogObject<productWidgetWidgetLoadedParams>
 */
export function productWidgetWidgetLoaded(params) {
    return {
        evid: 35,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetClickAddProducts' event (evid: 36)
 *
 * Event description: Fired when user clicks any CTA in the product widget
 *
 * @param {productWidgetClickAddProductsParams} params - The parameters for this event
 * @property {GUID} impression_id - Id of the user’s interaction with the widget.
 * @property {string} selectedProducts - Array of the Modalyst product ids the user selected
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {number} totalNumProducts - Number of all products that were offered to the user
 * @property {string} allProducts - List of all the product ids
 * @property {string} ctaName - addProducts/modalystApp/howItWorks/LearMore
 * @property {number} numSelectedProducts - Number of products the user selected to be added
 * @property {string} displayedProducts - List of all the product IDs that are currently visible to the user. Those are modalyst products id. Those are the products in the current slide
 * @property {string} category - what is the chosen category in the widget when the user clicked on the CTA
 * @property {string} productPositions - List of the selected products location. Same order as in field selected_products
 * @property {string} pageName - In what page the widget was loaded
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetClickAddProductsParams>} LogObject<productWidgetClickAddProductsParams>
 */
export function productWidgetClickAddProducts(params) {
    return {
        evid: 36,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetClickChangeProductsSlide' event (evid: 37)
 *
 * Event description: When user click on navigation buttons in the product widget
 *
 * @param {productWidgetClickChangeProductsSlideParams} params - The parameters for this event
 * @property {GUID} impression_id - Id of the user’s interaction with the widget.
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {number} totalNumProducts - Number of all products that were offered to the user, from all slides
 * @property {string} allProducts - List of all the product ids, from all slides
 * @property {number} slideNum - Number of the slide that is currently visible to the user.before the click
 * @property {string} displayedProducts - List of all the product ids that are currently visible to the user. After the click
 * @property {string} productsInSlides - [   [id1, id2, id3],   [id4, id5, id6],   [id7, id8], ]
 * @property {string} pageName - In what page the widget was loaded
 * @property {number} totalNumSlides - Total number of slides in the widget
 * @property {number} nextSlide - next slide num. the slide that will be shown to the user after the click
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetClickChangeProductsSlideParams>} LogObject<productWidgetClickChangeProductsSlideParams>
 */
export function productWidgetClickChangeProductsSlide(params) {
    return {
        evid: 37,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetAddProductsModalLoaded' event (evid: 38)
 *
 * Event description: Fired when the products added modal is loaded (when the modal with the progress bar is shown to user)
 *
 * @param {productWidgetAddProductsModalLoadedParams} params - The parameters for this event
 * @property {GUID} impression_id - Id of the user’s interaction with the widget.
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} pageName - In what page the widget was loaded
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetAddProductsModalLoadedParams>} LogObject<productWidgetAddProductsModalLoadedParams>
 */
export function productWidgetAddProductsModalLoaded(params) {
    return {
        evid: 38,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetClickButtonInProductsModal' event (evid: 39)
 *
 * Event description: when user click a button in "products added" modal
 *
 * @param {productWidgetClickButtonInProductsModalParams} params - The parameters for this event
 * @property {GUID} impression_id - Id of the user’s interaction with the widget.
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} ctaName - done/close
 * @property {string} pageName - In what page the widget was loaded
 * @property {string} marketplace - POD / Dropshipping
 * @property {string} action - close/continueToProducts
 * @return {LogObject<productWidgetClickButtonInProductsModalParams>} LogObject<productWidgetClickButtonInProductsModalParams>
 */
export function productWidgetClickButtonInProductsModal(params) {
    return {
        evid: 39,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'designProductClicked' event (evid: 4)
 *
 * Event description: When user clicks on design product
 *
 * @param {designProductClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} appliedFilters - Applied filters when product was selected
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} businessId - modalyst business id
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - dashboard / sync list
 * @property {string} productName - productName
 * @property {number} position - Product position in page
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} appliedSort - Applied sorting when product was clicked
 * @property {string} supplierProductId - supplier_product_id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<designProductClickedParams>} LogObject<designProductClickedParams>
 */
export function designProductClicked(params) {
    return {
        evid: 4,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystInWixClickEditDesign' event (evid: 40)
 *
 * Event description: when user click Edit Design (currently from product list or product page)
 *
 * @param {modalystInWixClickEditDesignParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} origin - productPage/productList
 * @property {string} productId - Wix product id
 * @return {LogObject<modalystInWixClickEditDesignParams>} LogObject<modalystInWixClickEditDesignParams>
 */
export function modalystInWixClickEditDesign(params) {
    return {
        evid: 40,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystInWixOrderSampleClick' event (evid: 41)
 *
 * Event description: when user order sample of the product from Wix
 *
 * @param {modalystInWixOrderSampleClickParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} origin - wixProductPage
 * @property {string} productId - Wix product id
 * @return {LogObject<modalystInWixOrderSampleClickParams>} LogObject<modalystInWixOrderSampleClickParams>
 */
export function modalystInWixOrderSampleClick(params) {
    return {
        evid: 41,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorSaveDesignClicked' event (evid: 42)
 *
 * Event description: When user save design in Modlayst POD editor
 *
 * @param {modalystPodEditorSaveDesignClickedParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} ctaName - What CTA was clicked by the user: saveDesign/ saveAsDraft/saveToImportList
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} origin - Where the editor is shown: wixProductPage/wixProductlist/modalyst
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} instanceId - instance id
 * @return {LogObject<modalystPodEditorSaveDesignClickedParams>} LogObject<modalystPodEditorSaveDesignClickedParams>
 */
export function modalystPodEditorSaveDesignClicked(params) {
    return {
        evid: 42,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorEditorLoaded' event (evid: 43)
 *
 * Event description: fired when Modalyst POD editor is loaded
 *
 * @param {modalystPodEditorEditorLoadedParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} origin - marketplace, drafts, import list, sync list, and eventually Wix Admin
 * @property {string} productName - product name
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} pageName - in what page the editor is shown
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} supplierProductId - Supplier product id. If in Wix then Null
 * @property {string} instanceId - instance id
 * @return {LogObject<modalystPodEditorEditorLoadedParams>} LogObject<modalystPodEditorEditorLoadedParams>
 */
export function modalystPodEditorEditorLoaded(params) {
    return {
        evid: 43,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorNavigationButtonClicked' event (evid: 44)
 *
 * Event description: when user clicks a CTA to navigate in the editor
 *
 * @param {modalystPodEditorNavigationButtonClickedParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} productName - product name
 * @property {string} buttonName - back/next/review/mockup/..
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} pageName - in what page the editor is shown
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} supplierProductId - Supplier product id. If in Wix then Null
 * @return {LogObject<modalystPodEditorNavigationButtonClickedParams>} LogObject<modalystPodEditorNavigationButtonClickedParams>
 */
export function modalystPodEditorNavigationButtonClicked(params) {
    return {
        evid: 44,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorItemAddedToProduct' event (evid: 45)
 *
 * Event description: when user add design to the product in the editor
 *
 * @param {modalystPodEditorItemAddedToProductParams} params - The parameters for this event
 * @property {string} itemDetails - Image url/added text
 * @property {string} itemLocation - front/back
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {boolean} isSuccess - Is success upload
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} origin - Add panel/copy paste. how and from where the feature was added to the product
 * @property {string} itemType - image/text
 * @property {string} errorDescription - Error description
 * @property {string} productName - product name
 * @property {string} buttonName - back/next/review/mockup/..
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} pageName - in what page the editor is shown
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} supplierProductId - Supplier product id. If in Wix then Null
 * @return {LogObject<modalystPodEditorItemAddedToProductParams>} LogObject<modalystPodEditorItemAddedToProductParams>
 */
export function modalystPodEditorItemAddedToProduct(params) {
    return {
        evid: 45,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorItemDeletedFromProduct' event (evid: 46)
 *
 * Event description: when user delete design to the product in the editor
 *
 * @param {modalystPodEditorItemDeletedFromProductParams} params - The parameters for this event
 * @property {string} itemDetails - Image url/added text
 * @property {string} itemLocation - front/back
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {boolean} isSuccess - Is success upload
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} origin - Add panel/copy paste. how and from where the feature was added to the product
 * @property {string} itemType - image/text
 * @property {string} errorDescription - Error description
 * @property {string} productName - product name
 * @property {string} buttonName - back/next/review/mockup/..
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} pageName - in what page the editor is shown
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} supplierProductId - Supplier product id. If in Wix then Null
 * @return {LogObject<modalystPodEditorItemDeletedFromProductParams>} LogObject<modalystPodEditorItemDeletedFromProductParams>
 */
export function modalystPodEditorItemDeletedFromProduct(params) {
    return {
        evid: 46,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalystPodEditorCloseEditorClicked' event (evid: 47)
 *
 * Event description: when user delete design to the product in the editor
 *
 * @param {modalystPodEditorCloseEditorClickedParams} params - The parameters for this event
 * @property {GUID} impressionId - Guid that will help connect between this event and other in the design flow
 * @property {string} retailerProductId - retailer_product_id - if the editor is opened in wix so the NULL
 * @property {string} origin - close / finish design
 * @property {string} productName - product name
 * @property {GUID} productId - Wix product id - Null if the editor is shown out of Wix
 * @property {string} modalystProductId - Modalyst_product_id - if the editor is opened in wix so the NULL
 * @property {string} supplierProductId - Supplier product id. If in Wix then Null
 * @return {LogObject<modalystPodEditorCloseEditorClickedParams>} LogObject<modalystPodEditorCloseEditorClickedParams>
 */
export function modalystPodEditorCloseEditorClicked(params) {
    return {
        evid: 47,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetClickedCtaInAddProductModal' event (evid: 48)
 *
 * Event description: when user clicks on any CTA in the modal that opens after click on "add Products" button in the product widget
 *
 * @param {productWidgetClickedCtaInAddProductModalParams} params - The parameters for this event
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} ctaName - Close / addProducts
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetClickedCtaInAddProductModalParams>} LogObject<productWidgetClickedCtaInAddProductModalParams>
 */
export function productWidgetClickedCtaInAddProductModal(params) {
    return {
        evid: 48,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetExplainerModalLoaded' event (evid: 49)
 *
 * Event description: when the explainer modal is shown to user
 *
 * @param {productWidgetExplainerModalLoadedParams} params - The parameters for this event
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetExplainerModalLoadedParams>} LogObject<productWidgetExplainerModalLoadedParams>
 */
export function productWidgetExplainerModalLoaded(params) {
    return {
        evid: 49,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addProductToImportListClicked' event (evid: 5)
 *
 * Event description: When user clicked to add product to import list
 *
 * @param {addProductToImportListClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {string} podImagesDetails - JSON: front:3, back:5
 * @property {boolean} isDynamicPrice - Is dynamic price
 * @property {number} imagesNum - Num of images
 * @property {string} appliedFilters - Applied filters when product was selected
 * @property {string} productTags - Product tags
 * @property {string} searchTerm - Search term by which user find this product (null if origin is product page or drafts list)
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included in cost
 * @property {number} podTextAdded - Num of added text
 * @property {number} podDistinctImagesUploaded - Number of unique  uploaded POD images (from editor)
 * @property {string} itemsCost - JSON with variants origin prices
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} retailerPrices - JSON with retailer prices
 * @property {string} options - size/color
 * @property {string} businessId - modalyst business id
 * @property {number} shippingRate - shipping Rate for retailer (main) country
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - number of variants
 * @property {string} productDescription - Product description
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - dashboard / sync list
 * @property {string} ordering - Applied sorting when product was clicked
 * @property {string} productName - productName
 * @property {string} currency - currency
 * @property {string} productCategory - Product category from search. null if origin is product page or draft list
 * @property {number} position - Product position in page
 * @property {string} correlationId - id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {number} podTotalImagesUploaded - Number of total uploaded POD images
 * @property {string} productTypes - Product types
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} mainImageUrl - main_image_url
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<addProductToImportListClickedParams>} LogObject<addProductToImportListClickedParams>
 */
export function addProductToImportListClicked(params) {
    return {
        evid: 5,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetCtaClickedInExplainerModal' event (evid: 50)
 *
 * Event description: when user clicks on a CTA in the Explainer modal
 *
 * @param {productWidgetCtaClickedInExplainerModalParams} params - The parameters for this event
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} ctaName - The name of the cta that was clicked. Continue / close/ back
 * @property {number} slideNum - Number of the slide in the loaded explainer modal. The one is currently presented to user
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetCtaClickedInExplainerModalParams>} LogObject<productWidgetCtaClickedInExplainerModalParams>
 */
export function productWidgetCtaClickedInExplainerModal(params) {
    return {
        evid: 50,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'purchaseOrderScreenLoaded' event (evid: 500)
 *
 * Event description: purchase order TPA screen loaded
 *
 * @param {purchaseOrderScreenLoadedParams} params - The parameters for this event
 * @property {string} info - json with info
 * @property {string} screenName - screen name that was loaded
 * @return {LogObject<purchaseOrderScreenLoadedParams>} LogObject<purchaseOrderScreenLoadedParams>
 */
export function purchaseOrderScreenLoaded(params) {
    return {
        evid: 500,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'purchaseOrderClickInScreen' event (evid: 501)
 *
 * Event description: purchase order TPA screen loaded
 *
 * @param {purchaseOrderClickInScreenParams} params - The parameters for this event
 * @property {string} screenName - screen name that was loaded
 * @property {boolean} isMainCta - true/false
 * @property {string} origin - origin
 * @property {string} cta - cta
 * @return {LogObject<purchaseOrderClickInScreenParams>} LogObject<purchaseOrderClickInScreenParams>
 */
export function purchaseOrderClickInScreen(params) {
    return {
        evid: 501,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'purchaseOrderStatusUpdated' event (evid: 502)
 *
 * Event description: purchase order status was updated
 *
 * @param {purchaseOrderStatusUpdatedParams} params - The parameters for this event
 * @property {number} orderNumber - incremental order number
 * @property {GUID} orderId - purchase order id
 * @property {string} paymentType - payment_type
 * @property {string} vendorId - vendor_id
 * @property {string} orderStatus - status that order got
 * @property {string} info - additional info
 * @property {string} vendorName - vendor_name
 * @return {LogObject<purchaseOrderStatusUpdatedParams>} LogObject<purchaseOrderStatusUpdatedParams>
 */
export function purchaseOrderStatusUpdated(params) {
    return {
        evid: 502,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productWidgetCategorySelectedInWidget' event (evid: 51)
 *
 * Event description: Fired after user changes category in the dropdown in the product widget
 *
 * @param {productWidgetCategorySelectedInWidgetParams} params - The parameters for this event
 * @property {GUID} impressionId - Id of the user’s interaction with the widget.
 * @property {string} category - Selected category's slug
 * @property {string} pageName - In what page the widget was loaded
 * @property {string} marketplace - POD / Dropshipping
 * @return {LogObject<productWidgetCategorySelectedInWidgetParams>} LogObject<productWidgetCategorySelectedInWidgetParams>
 */
export function productWidgetCategorySelectedInWidget(params) {
    return {
        evid: 51,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pricingRuleManagePricingRuleClicked' event (evid: 52)
 *
 * Event description: This event is sent when user click to manage pricing rule inside wix (this event can be fired only from wix)
 *
 * @param {pricingRuleManagePricingRuleClickedParams} params - The parameters for this event
 * @property {string} origin - What is the origin of the action productList/productPage/dealerCard
 * @property {string} type - POD/RTS.
 * @property {GUID} productGuid - Have value only if origin = productPage
 * @return {LogObject<pricingRuleManagePricingRuleClickedParams>} LogObject<pricingRuleManagePricingRuleClickedParams>
 */
export function pricingRuleManagePricingRuleClicked(params) {
    return {
        evid: 52,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pricingRulesSubmitFormClicked' event (evid: 53)
 *
 * Event description: Fired when the user clicks on the save button to update a pricing rule. This event can be fired from Wix and Modalyst. the update of the rule will take place after the user will click continue in the confirmation modal.
 *
 * @param {pricingRulesSubmitFormClickedParams} params - The parameters for this event
 * @property {number} shippingRateLong - The value the user set in shipping rate x100000 In order to support having integer value in the field
 * @property {boolean} isPriceChanged - Is change price ending enabled?
 * @property {number} markupLong - The value the user set in markup x100000 In order to support having integer value in the field
 * @property {string} markupType - amount/multiply
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - wix/modalyst In what platform the rule created
 * @property {number} priceEnding - Value X100000  The value the user set multiplied by 100K
 * @property {boolean} isShippingIncluded - Does the user include shipping rate in the pricing rule
 * @property {string} type - POD/indieBrands/trendy/aliExpress/aliBaba/beauty Type of the pricing rule
 * @property {string} instanceId - instance id
 * @return {LogObject<pricingRulesSubmitFormClickedParams>} LogObject<pricingRulesSubmitFormClickedParams>
 */
export function pricingRulesSubmitFormClicked(params) {
    return {
        evid: 53,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pricingRulesConfirmSaveClicked' event (evid: 54)
 *
 * Event description: Fired when the user click continue in order to create/update a pricing rule.
 *
 * @param {pricingRulesConfirmSaveClickedParams} params - The parameters for this event
 * @property {number} shippingRateLong - The value the user set in shipping rate x100000 In order to support having integer value in the field
 * @property {boolean} isPriceChanged - Is change price ending enabled?
 * @property {number} markupLong - The value the user set in markup x100000 In order to support having integer value in the field
 * @property {string} markupType - amount/multiply
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} origin - wix/modalyst In what platform the rule created
 * @property {number} priceEnding - Value X100000  The value the user set multiplied by 100K
 * @property {boolean} isShippingIncluded - Does the user include shipping rate in the pricing rule
 * @property {string} type - POD/indieBrands/trendy/aliExpress/aliBaba/beauty Type of the pricing rule
 * @property {string} instanceId - instance id
 * @return {LogObject<pricingRulesConfirmSaveClickedParams>} LogObject<pricingRulesConfirmSaveClickedParams>
 */
export function pricingRulesConfirmSaveClicked(params) {
    return {
        evid: 54,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceCategoryInFindProductsSrc145Evid55' event (evid: 55)
 *
 * Event description: When the user select a category and views the related products
 *
 * @param {shubMarketplaceCategoryInFindProductsSrc145Evid55Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {string} category - the category that the user choose. with the structure of category--sub_category--sub_sub_category
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @return {LogObject<shubMarketplaceCategoryInFindProductsSrc145Evid55Params>} LogObject<shubMarketplaceCategoryInFindProductsSrc145Evid55Params>
 */
export function shubMarketplaceCategoryInFindProductsSrc145Evid55(params) {
    return {
        evid: 55,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceCtaSrc145Evid56' event (evid: 56)
 *
 * Event description: Click to Action event. every time the user call to action in the platform this event is fired with the value of that action in the cta field.
 * example for actions - design_product/view_product/explore_more_products/scroll_products_in_view/etc
 *
 * @param {shubMarketplaceCtaSrc145Evid56Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {GUID} app_id - The relevant id for that app (printful/modalyst app_id)
 * @property {string} cta - The action that the user call to
 * @property {GUID} wix_product_id - the product id (as in wix product table) of the relevant product - this is the product identifier of wix
 * @property {string} shub_product_id - the product identifier from shub marketplace ids. this is not the product_id of wix
 * @property {string} product_type - the type of the product from shub marketplace data
 * @property {string} action_category - gives information regarding a category of the section (product/filters/learn_more)
 * @property {string} product_name - the name of the product from shub marketplace data
 * @property {number} productPriceLong - the price of the product shown to the user (the price for the site owner, not for visitors). The price is multiplied by 100,000
 * @return {LogObject<shubMarketplaceCtaSrc145Evid56Params>} LogObject<shubMarketplaceCtaSrc145Evid56Params>
 */
export function shubMarketplaceCtaSrc145Evid56(params) {
    return {
        evid: 56,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceModalViewSrc145Evid57' event (evid: 57)
 *
 * Event description: The modal is a window that displays an external screen (like Printful's EDM). This event is triggered every time the modal is opened
 *
 * @param {shubMarketplaceModalViewSrc145Evid57Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {string} modal_name - the name of the modal that the user sees (edm/product_info_page/etc)
 * @property {string} screen_name - the name of the screen that the user sees
 * @property {GUID} wix_product_id - the product id (as in wix product table) of the relevant product - this is the product identifier of wix
 * @property {GUID} shub_product_id - the product identifier from shub marketplace ids. this is not the product_id of wix
 * @property {string} product_type - the type of the product from shub marketplace data
 * @property {string} product_name - the name of the product from shub marketplace data
 * @property {string} technique - the print technique
 * @property {GUID} modal_session_id - guid for each time the modal re-open
 * @property {number} productPriceLong - the price of the product shown to the user (the price for the site owner, not for visitors). The price is multiplied by 100,000
 * @return {LogObject<shubMarketplaceModalViewSrc145Evid57Params>} LogObject<shubMarketplaceModalViewSrc145Evid57Params>
 */
export function shubMarketplaceModalViewSrc145Evid57(params) {
    return {
        evid: 57,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceSearchSrc145Evid58' event (evid: 58)
 *
 * Event description: this event is fired every time the user execute a search in the platform
 *
 * @param {shubMarketplaceSearchSrc145Evid58Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {string} search_term - the term of the search
 * @property {string} search_location - where the user used the search? (search_products/search_region/etc)
 * @property {number} loading_time - how much time (in ms) did it take to load the results for search query
 * @return {LogObject<shubMarketplaceSearchSrc145Evid58Params>} LogObject<shubMarketplaceSearchSrc145Evid58Params>
 */
export function shubMarketplaceSearchSrc145Evid58(params) {
    return {
        evid: 58,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceFilterSrc145Evid59' event (evid: 59)
 *
 * Event description: this event is fired every time the user execute a filter request in the platform (when the user clicks on apply in the filter panel)
 *
 * @param {shubMarketplaceFilterSrc145Evid59Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {string} filters_value - Json with the filters. Only the filters that were selected. For example  {"color":"blue","price":"from 10$;to 50$","size":"S;M;L"}
 * @property {number} num_active_filters - how many filters are active after the exaction of this filter request
 * @property {number} num_of_categories - the number of active categories
 * @return {LogObject<shubMarketplaceFilterSrc145Evid59Params>} LogObject<shubMarketplaceFilterSrc145Evid59Params>
 */
export function shubMarketplaceFilterSrc145Evid59(params) {
    return {
        evid: 59,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'removeProductClicked' event (evid: 6)
 *
 * Event description: When user clicked to remove product from store
 *
 * @param {removeProductClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isBulk - is bulk action
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - number of variants
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - Import list/Synced products
 * @property {string} productName - productName
 * @property {string} correlationId - id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier_id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {GUID} msid - wix msid
 * @property {string} supplierProductId - supplier Product Id
 * @property {string} marketplace - RTS/POD
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<removeProductClickedParams>} LogObject<removeProductClickedParams>
 */
export function removeProductClicked(params) {
    return {
        evid: 6,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceProductBatchLoadSrc145Evid60' event (evid: 60)
 *
 * Event description: this event is fired every time the product list/search is change and the user sees different products on the screen
 *
 * @param {shubMarketplaceProductBatchLoadSrc145Evid60Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {string} filter_status - json of the status of all fields that affect the list
 * @property {string} search_term - if has any
 * @property {string} category - the category that the user choose. with the structure of category--sub_category--sub_sub_category
 * @property {number} num_of_products_on_screen - the number of products that shown in this batch on the screen
 * @property {string} product_ids - json with all product ids
 * @property {number} num_of_products_in_batch - the number of products that shown in this batch
 * @return {LogObject<shubMarketplaceProductBatchLoadSrc145Evid60Params>} LogObject<shubMarketplaceProductBatchLoadSrc145Evid60Params>
 */
export function shubMarketplaceProductBatchLoadSrc145Evid60(params) {
    return {
        evid: 60,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shubMarketplaceErrorSrc145Evid61' event (evid: 61)
 *
 * Event description: Every time that some error occurred in the platform this event is fired with the relevant data
 *
 * @param {shubMarketplaceErrorSrc145Evid61Params} params - The parameters for this event
 * @property {string} origin - Page Name of the relevant environment
 * @property {string} origin_id - Page id of the relevant environment
 * @property {GUID} impression_id - Guid that will help connect between this event and other in the design flow
 * @property {GUID} app_id - The relevant id for that app (printful/modalyst app_id)
 * @property {string} error_type - the type of the error
 * @property {string} error_environment - modal/search_page/product_page
 * @property {string} error_message - what the message that shown to the user regarding that error/what is the message for the error
 * @property {string} screen_name - if this error is for a modal then the name of the screen that the user sees
 * @return {LogObject<shubMarketplaceErrorSrc145Evid61Params>} LogObject<shubMarketplaceErrorSrc145Evid61Params>
 */
export function shubMarketplaceErrorSrc145Evid61(params) {
    return {
        evid: 61,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addProductToSyncListClicked' event (evid: 7)
 *
 * Event description: When user clicked to add product to sync list
 *
 * @param {addProductToSyncListClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isDynamicPrice - Is dynamic price
 * @property {number} imagesNum - Num of images
 * @property {boolean} isBulk - is bulk action
 * @property {string} hiddenVariantIds - string with list of variants
 * @property {boolean} isDebug - is debug mode
 * @property {boolean} isShippingInCost - Is shipping included in cost
 * @property {string} itemsCost - JSON with variants origin prices
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} retailerPrices - JSON with retailer prices
 * @property {number} hiddenVariantsCount - number of variants that were not synced
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - number of variants
 * @property {string} productDescription - Product description
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId. Null if bulk action
 * @property {string} origin - POD editor/draft list/product page
 * @property {string} productName - productName
 * @property {string} currency - currency
 * @property {string} correlationId - id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} mainImageUrl - main_image_url
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<addProductToSyncListClickedParams>} LogObject<addProductToSyncListClickedParams>
 */
export function addProductToSyncListClicked(params) {
    return {
        evid: 7,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'unsyncProductClicked' event (evid: 8)
 *
 * Event description: When user clicked to unsync product from sync list
 *
 * @param {unsyncProductClickedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isBulk - is bulk action
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - POD editor/draft list/product page
 * @property {string} correlationId - id to connect between client and server event
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<unsyncProductClickedParams>} LogObject<unsyncProductClickedParams>
 */
export function unsyncProductClicked(params) {
    return {
        evid: 8,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'autoPriceStatusChanged' event (evid: 9)
 *
 * Event description: When user changed auto price status
 *
 * @param {autoPriceStatusChangedParams} params - The parameters for this event
 * @property {string} instanceId - instanceId
 * @property {boolean} isBulk - is bulk action
 * @property {string} selectionType - toggle/auto price on button/auto price off button/auto(after user change price manually)
 * @property {boolean} isDebug - is debug mode
 * @property {string} accountId - modalyst account id
 * @property {string} retailerVariantIds - List of retailer variants id
 * @property {string} businessId - modalyst business id
 * @property {string} modalystVariantIds - List of variant ids
 * @property {number} variantsCount - Number of variants
 * @property {string} retailerStorePlatform - retailer store platform
 * @property {string} retailerProductId - retailerProductId
 * @property {string} origin - Import list/synced products list
 * @property {boolean} status - auto price status
 * @property {string} productName - product_name
 * @property {string} correlationId - correlation_id
 * @property {string} storeUrl - site's url. Null for Wix users
 * @property {string} supplierId - supplier Id
 * @property {boolean} isPremium - is modalyst premium
 * @property {string} modalystProductId - modalyst_product_id
 * @property {string} supplierProductId - supplier ProductI d
 * @property {string} marketplace - RTS/POD
 * @property {GUID} bi_token - wix msid
 * @property {string} subscriptionPlanId - package id in modalyst definition
 * @return {LogObject<autoPriceStatusChangedParams>} LogObject<autoPriceStatusChangedParams>
 */
export function autoPriceStatusChanged(params) {
    return {
        evid: 9,
        src: 145,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'errorEventSrc30Evid10' event (evid: 10)
 *
 * Event description: error event.
 *
 * @param {errorEventSrc30Evid10Params} params - The parameters for this event
 * @property {string} dsc - dsc
 * @property {number} response_time - Time in ms from load to error
 * @property {string} vsi - vsi
 * @property {number} time - Time in ms from load to error
 * @property {boolean} is_rollout - is_rollout
 * @property {string} initiator_name - initiator_name
 * @property {string} server - server
 * @property {string} builderType - builder_type
 * @property {string} errscp - error scope
 * @property {GUID} site_id - changed from did -> site_id on Oct 03, 2013
 * @property {string} errn - error name
 * @property {string} p4 - 4st extra parameter
 * @property {string} majorver - the major version of html editor
 * @property {string} trgt - target name, api call or class
 * @property {boolean} isLiveEditor - is_live_editor
 * @property {number} ts - Time in ms from load to error
 * @property {string} playerVersion - player_version
 * @property {string} artifactVersion - artifact_version
 * @property {GUID} visitor_id - visitor_id
 * @property {number} usersOnPageCount - users_on_page_count
 * @property {string} viewmode - viewmode
 * @property {string} error_description_short - error_description_short
 * @property {string} data_center - data_center
 * @property {string} screenResolution - screen_resolution
 * @property {string} p3 - 3rd extra parameter
 * @property {GUID} did - changed from did -> site_id on Oct 03, 2013
 * @property {GUID} cid - client/computer id
 * @property {boolean} isSg - is_sg
 * @property {string} dsOrigin - ds_origin
 * @property {string} p2 - 2nd extra parameter
 * @property {string} token - token
 * @property {string} ver - sender version
 * @property {string} sessionId - session_id
 * @property {number} errc - error code
 * @property {string} stack - stacktrace
 * @property {GUID} metasiteid - metasiteid
 * @property {string} viewerName - viewer_name
 * @property {string} app_id - app_id
 * @property {number} sev - severity of the error
 * @property {GUID} esi - esi
 * @property {number} cat - category id
 * @property {string} errormsg - dsc
 * @property {number} usersOnSiteCount - users_on_site_count
 * @property {string} p1 - 1st extra parameter
 * @property {GUID} msid - msid
 * @property {number} base_version - base_version
 * @property {number} iss - issue (sub-category)
 * @return {LogObject<errorEventSrc30Evid10Params>} LogObject<errorEventSrc30Evid10Params>
 */
export function errorEventSrc30Evid10(params) {
    return {
        evid: 10,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersChangedToViewAll' event (evid: 100)
 *
 * Event description: orders changed to view all.
 *
 * @param {ordersChangedToViewAllParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ordersChangedToViewAllParams>} LogObject<ordersChangedToViewAllParams>
 */
export function ordersChangedToViewAll(params) {
    return {
        evid: 100,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersChangedToViewOpen' event (evid: 101)
 *
 * Event description: orders changed to view open.
 *
 * @param {ordersChangedToViewOpenParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ordersChangedToViewOpenParams>} LogObject<ordersChangedToViewOpenParams>
 */
export function ordersChangedToViewOpen(params) {
    return {
        evid: 101,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ordersSortingChanged' event (evid: 102)
 *
 * Event description: orders sorting changed.
 *
 * @param {ordersSortingChangedParams} params - The parameters for this event
 * @property {string} sortOrdersBy - sort_order
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {boolean} isSortAscending - is_ascending
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ordersSortingChangedParams>} LogObject<ordersSortingChangedParams>
 */
export function ordersSortingChanged(params) {
    return {
        evid: 102,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderWindowOpened' event (evid: 103)
 *
 * Event description: order window opened.
 *
 * @param {orderWindowOpenedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} orderid - order_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<orderWindowOpenedParams>} LogObject<orderWindowOpenedParams>
 */
export function orderWindowOpened(params) {
    return {
        evid: 103,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderWindowClosed' event (evid: 104)
 *
 * Event description: order window closed.
 *
 * @param {orderWindowClosedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} orderid - order_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<orderWindowClosedParams>} LogObject<orderWindowClosedParams>
 */
export function orderWindowClosed(params) {
    return {
        evid: 104,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderNotesChanged' event (evid: 105)
 *
 * Event description: order notes changed.
 *
 * @param {orderNotesChangedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<orderNotesChangedParams>} LogObject<orderNotesChangedParams>
 */
export function orderNotesChanged(params) {
    return {
        evid: 105,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderTrackBtn' event (evid: 106)
 *
 * Event description: order track btn.
 *
 * @param {orderTrackBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<orderTrackBtnParams>} LogObject<orderTrackBtnParams>
 */
export function orderTrackBtn(params) {
    return {
        evid: 106,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'orderViewMapBtn' event (evid: 107)
 *
 * Event description: order view map btn.
 *
 * @param {orderViewMapBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<orderViewMapBtnParams>} LogObject<orderViewMapBtnParams>
 */
export function orderViewMapBtn(params) {
    return {
        evid: 107,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'completeOrder' event (evid: 108)
 *
 * Event description: complete order.
 *
 * @param {completeOrderParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} orderid - order_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<completeOrderParams>} LogObject<completeOrderParams>
 */
export function completeOrder(params) {
    return {
        evid: 108,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'acceptedCompleteOrder' event (evid: 109)
 *
 * Event description: accepted complete order.
 *
 * @param {acceptedCompleteOrderParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} orderid - order_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<acceptedCompleteOrderParams>} LogObject<acceptedCompleteOrderParams>
 */
export function acceptedCompleteOrder(params) {
    return {
        evid: 109,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'declinedCompleteOrder' event (evid: 110)
 *
 * Event description: declined complete order.
 *
 * @param {declinedCompleteOrderParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} orderid - order_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<declinedCompleteOrderParams>} LogObject<declinedCompleteOrderParams>
 */
export function declinedCompleteOrder(params) {
    return {
        evid: 110,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'paymentMethodSaved' event (evid: 120)
 *
 * Event description: payment method saved.
 *
 * @param {paymentMethodSavedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {string} paymenttype - type
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<paymentMethodSavedParams>} LogObject<paymentMethodSavedParams>
 */
export function paymentMethodSaved(params) {
    return {
        evid: 120,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageOptionsBtn' event (evid: 13)
 *
 * Event description: manage options btn.
 *
 * @param {manageOptionsBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<manageOptionsBtnParams>} LogObject<manageOptionsBtnParams>
 */
export function manageOptionsBtn(params) {
    return {
        evid: 13,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addOptionBtn' event (evid: 14)
 *
 * Event description: add option btn.
 *
 * @param {addOptionBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<addOptionBtnParams>} LogObject<addOptionBtnParams>
 */
export function addOptionBtn(params) {
    return {
        evid: 14,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutPageLoaded' event (evid: 150)
 *
 * Event description: checkout_page_loaded.
 *
 * @param {checkoutPageLoadedParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<checkoutPageLoadedParams>} LogObject<checkoutPageLoadedParams>
 */
export function checkoutPageLoaded(params) {
    return {
        evid: 150,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutPageCartLoadedSuccessfully' event (evid: 151)
 *
 * Event description: checkout_page_cart_loaded_successfully.
 *
 * @param {checkoutPageCartLoadedSuccessfullyParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<checkoutPageCartLoadedSuccessfullyParams>} LogObject<checkoutPageCartLoadedSuccessfullyParams>
 */
export function checkoutPageCartLoadedSuccessfully(params) {
    return {
        evid: 151,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutPageCartFailedLoading' event (evid: 152)
 *
 * Event description: checkout_page_cart_failed_loading.
 *
 * @param {checkoutPageCartFailedLoadingParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<checkoutPageCartFailedLoadingParams>} LogObject<checkoutPageCartFailedLoadingParams>
 */
export function checkoutPageCartFailedLoading(params) {
    return {
        evid: 152,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClosedTheCheckoutPage' event (evid: 153)
 *
 * Event description: user_closed_the_checkout_page.
 *
 * @param {userClosedTheCheckoutPageParams} params - The parameters for this event
 * @property {string} source - origin
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userClosedTheCheckoutPageParams>} LogObject<userClosedTheCheckoutPageParams>
 */
export function userClosedTheCheckoutPage(params) {
    return {
        evid: 153,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClickedNextOnCheckoutPage' event (evid: 154)
 *
 * Event description: user_clicked_next_on_checkout_page.
 *
 * @param {userClickedNextOnCheckoutPageParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} source - origin
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userClickedNextOnCheckoutPageParams>} LogObject<userClickedNextOnCheckoutPageParams>
 */
export function userClickedNextOnCheckoutPage(params) {
    return {
        evid: 154,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverFailedReturningSkrillIframeUrl' event (evid: 156)
 *
 * Event description: server_failed_returning_skrill_iframe_url.
 *
 * @param {serverFailedReturningSkrillIframeUrlParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<serverFailedReturningSkrillIframeUrlParams>} LogObject<serverFailedReturningSkrillIframeUrlParams>
 */
export function serverFailedReturningSkrillIframeUrl(params) {
    return {
        evid: 156,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'skrillIframeLoaded' event (evid: 157)
 *
 * Event description: skrill_iframe_loaded.
 *
 * @param {skrillIframeLoadedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<skrillIframeLoadedParams>} LogObject<skrillIframeLoadedParams>
 */
export function skrillIframeLoaded(params) {
    return {
        evid: 157,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClickedBackOnSkrillIframe' event (evid: 158)
 *
 * Event description: user_clicked_back_on_skrill_iframe.
 *
 * @param {userClickedBackOnSkrillIframeParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userClickedBackOnSkrillIframeParams>} LogObject<userClickedBackOnSkrillIframeParams>
 */
export function userClickedBackOnSkrillIframe(params) {
    return {
        evid: 158,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClickedPayNowOnSkrillIframe' event (evid: 159)
 *
 * Event description: user_clicked_pay_now_on_skrill_iframe.
 *
 * @param {userClickedPayNowOnSkrillIframeParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userClickedPayNowOnSkrillIframeParams>} LogObject<userClickedPayNowOnSkrillIframeParams>
 */
export function userClickedPayNowOnSkrillIframe(params) {
    return {
        evid: 159,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryCreated' event (evid: 16)
 *
 * Event description: category created.
 *
 * @param {categoryCreatedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<categoryCreatedParams>} LogObject<categoryCreatedParams>
 */
export function categoryCreated(params) {
    return {
        evid: 16,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'skrillIframeFormValidationError' event (evid: 160)
 *
 * Event description: skrill_iframe_form_validation_error.
 *
 * @param {skrillIframeFormValidationErrorParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<skrillIframeFormValidationErrorParams>} LogObject<skrillIframeFormValidationErrorParams>
 */
export function skrillIframeFormValidationError(params) {
    return {
        evid: 160,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userClickedRetryOnErrorIframe' event (evid: 162)
 *
 * Event description: user_clicked_retry_on_error_iframe.
 *
 * @param {userClickedRetryOnErrorIframeParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userClickedRetryOnErrorIframeParams>} LogObject<userClickedRetryOnErrorIframeParams>
 */
export function userClickedRetryOnErrorIframe(params) {
    return {
        evid: 162,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverReturnedWebmoneyUrl' event (evid: 163)
 *
 * Event description: server_returned_webmoney_url.
 *
 * @param {serverReturnedWebmoneyUrlParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<serverReturnedWebmoneyUrlParams>} LogObject<serverReturnedWebmoneyUrlParams>
 */
export function serverReturnedWebmoneyUrl(params) {
    return {
        evid: 163,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'serverReturnedOfflineSuccess' event (evid: 164)
 *
 * Event description: server_returned_offline_success.
 *
 * @param {serverReturnedOfflineSuccessParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<serverReturnedOfflineSuccessParams>} LogObject<serverReturnedOfflineSuccessParams>
 */
export function serverReturnedOfflineSuccess(params) {
    return {
        evid: 164,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryUpdated' event (evid: 17)
 *
 * Event description: category updated.
 *
 * @param {categoryUpdatedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<categoryUpdatedParams>} LogObject<categoryUpdatedParams>
 */
export function categoryUpdated(params) {
    return {
        evid: 17,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'categoryDeleted' event (evid: 18)
 *
 * Event description: category deleted.
 *
 * @param {categoryDeletedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<categoryDeletedParams>} LogObject<categoryDeletedParams>
 */
export function categoryDeleted(params) {
    return {
        evid: 18,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productUpdatedSrc30Evid19' event (evid: 19)
 *
 * Event description: product updated.
 *
 * @param {productUpdatedSrc30Evid19Params} params - The parameters for this event
 * @property {string} titlenew - titlenew
 * @property {string} priceold - priceold
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} pricenew - pricenew
 * @property {GUID} uid - uuid
 * @property {string} titleold - titleold
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productUpdatedSrc30Evid19Params>} LogObject<productUpdatedSrc30Evid19Params>
 */
export function productUpdatedSrc30Evid19(params) {
    return {
        evid: 19,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productCreated' event (evid: 20)
 *
 * Event description: product created.
 *
 * @param {productCreatedParams} params - The parameters for this event
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productCreatedParams>} LogObject<productCreatedParams>
 */
export function productCreated(params) {
    return {
        evid: 20,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productDeletedSrc30Evid21' event (evid: 21)
 *
 * Event description: product deleted.
 *
 * @param {productDeletedSrc30Evid21Params} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productDeletedSrc30Evid21Params>} LogObject<productDeletedSrc30Evid21Params>
 */
export function productDeletedSrc30Evid21(params) {
    return {
        evid: 21,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'settingsUpdated' event (evid: 22)
 *
 * Event description: settings updated.
 *
 * @param {settingsUpdatedParams} params - The parameters for this event
 * @property {string} desc - dsc
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {string} property - property
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} value - value
 * @return {LogObject<settingsUpdatedParams>} LogObject<settingsUpdatedParams>
 */
export function settingsUpdated(params) {
    return {
        evid: 22,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addProductBtn' event (evid: 23)
 *
 * Event description: add product btn.
 *
 * @param {addProductBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<addProductBtnParams>} LogObject<addProductBtnParams>
 */
export function addProductBtn(params) {
    return {
        evid: 23,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editProductSrc30Evid24' event (evid: 24)
 *
 * Event description: edit product.
 *
 * @param {editProductSrc30Evid24Params} params - The parameters for this event
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<editProductSrc30Evid24Params>} LogObject<editProductSrc30Evid24Params>
 */
export function editProductSrc30Evid24(params) {
    return {
        evid: 24,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'newOptionTypeSelected' event (evid: 25)
 *
 * Event description: new option type selected.
 *
 * @param {newOptionTypeSelectedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {string} optiontype - option_type
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<newOptionTypeSelectedParams>} LogObject<newOptionTypeSelectedParams>
 */
export function newOptionTypeSelected(params) {
    return {
        evid: 25,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'helpBtn' event (evid: 26)
 *
 * Event description: help btn.
 *
 * @param {helpBtnParams} params - The parameters for this event
 * @property {string} storeid - store_id
 * @property {string} viewmode - viewmode
 * @property {string} helpaddress - help_address
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<helpBtnParams>} LogObject<helpBtnParams>
 */
export function helpBtn(params) {
    return {
        evid: 26,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tooltipViewed' event (evid: 27)
 *
 * Event description: tooltip viewed.
 *
 * @param {tooltipViewedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @property {string} tooltipname - tooltip_name
 * @return {LogObject<tooltipViewedParams>} LogObject<tooltipViewedParams>
 */
export function tooltipViewed(params) {
    return {
        evid: 27,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageInventoryChecked' event (evid: 28)
 *
 * Event description: manage inventory checked.
 *
 * @param {manageInventoryCheckedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<manageInventoryCheckedParams>} LogObject<manageInventoryCheckedParams>
 */
export function manageInventoryChecked(params) {
    return {
        evid: 28,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'manageOptionsChecked' event (evid: 29)
 *
 * Event description: manage options checked.
 *
 * @param {manageOptionsCheckedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<manageOptionsCheckedParams>} LogObject<manageOptionsCheckedParams>
 */
export function manageOptionsChecked(params) {
    return {
        evid: 29,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'storeManagerOpened' event (evid: 30)
 *
 * Event description: store manager opened.
 *
 * @param {storeManagerOpenedParams} params - The parameters for this event
 * @property {string} storeid - store_id
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<storeManagerOpenedParams>} LogObject<storeManagerOpenedParams>
 */
export function storeManagerOpened(params) {
    return {
        evid: 30,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'tryingEditingANewProductBeforeThePreviousSaveReturnedFromTheServer' event (evid: 31)
 *
 * Event description: trying editing a new product before the previous save returned from the server.
 *
 * @param {tryingEditingANewProductBeforeThePreviousSaveReturnedFromTheServerParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<tryingEditingANewProductBeforeThePreviousSaveReturnedFromTheServerParams>} LogObject<tryingEditingANewProductBeforeThePreviousSaveReturnedFromTheServerParams>
 */
export function tryingEditingANewProductBeforeThePreviousSaveReturnedFromTheServer(params) {
    return {
        evid: 31,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageViewedByUser' event (evid: 33)
 *
 * Event description: product page viewed by user.
 *
 * @param {productPageViewedByUserParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {string} c1 - changed product_id -> product_name on Oct 03, 2013
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productPageViewedByUserParams>} LogObject<productPageViewedByUserParams>
 */
export function productPageViewedByUser(params) {
    return {
        evid: 33,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'goToManageStoreLink' event (evid: 34)
 *
 * Event description: go to manage store link.
 *
 * @param {goToManageStoreLinkParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<goToManageStoreLinkParams>} LogObject<goToManageStoreLinkParams>
 */
export function goToManageStoreLink(params) {
    return {
        evid: 34,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productsListSelectedCollectionChanged' event (evid: 35)
 *
 * Event description: products list selected collection changed.
 *
 * @param {productsListSelectedCollectionChangedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {GUID} c1 - collection_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productsListSelectedCollectionChangedParams>} LogObject<productsListSelectedCollectionChangedParams>
 */
export function productsListSelectedCollectionChanged(params) {
    return {
        evid: 35,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'viewCartLinkedToPage' event (evid: 36)
 *
 * Event description: view cart linked to page.
 *
 * @param {viewCartLinkedToPageParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - page_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<viewCartLinkedToPageParams>} LogObject<viewCartLinkedToPageParams>
 */
export function viewCartLinkedToPage(params) {
    return {
        evid: 36,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponCreated' event (evid: 39)
 *
 * Event description: coupon created.
 *
 * @param {couponCreatedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<couponCreatedParams>} LogObject<couponCreatedParams>
 */
export function couponCreated(params) {
    return {
        evid: 39,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponDeleted' event (evid: 40)
 *
 * Event description: coupon deleted.
 *
 * @param {couponDeletedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<couponDeletedParams>} LogObject<couponDeletedParams>
 */
export function couponDeleted(params) {
    return {
        evid: 40,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'facebookStoreBtnInStoreManager' event (evid: 41)
 *
 * Event description: facebook store : btn in store manager.
 *
 * @param {facebookStoreBtnInStoreManagerParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<facebookStoreBtnInStoreManagerParams>} LogObject<facebookStoreBtnInStoreManagerParams>
 */
export function facebookStoreBtnInStoreManager(params) {
    return {
        evid: 41,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'facebookStoreCloseDialog' event (evid: 42)
 *
 * Event description: facebook store : close dialog.
 *
 * @param {facebookStoreCloseDialogParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<facebookStoreCloseDialogParams>} LogObject<facebookStoreCloseDialogParams>
 */
export function facebookStoreCloseDialog(params) {
    return {
        evid: 42,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'facebookStoreOpenStoreAction' event (evid: 43)
 *
 * Event description: facebook store : open store action.
 *
 * @param {facebookStoreOpenStoreActionParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<facebookStoreOpenStoreActionParams>} LogObject<facebookStoreOpenStoreActionParams>
 */
export function facebookStoreOpenStoreAction(params) {
    return {
        evid: 43,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCouponBtn' event (evid: 46)
 *
 * Event description: add coupon btn.
 *
 * @param {addCouponBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<addCouponBtnParams>} LogObject<addCouponBtnParams>
 */
export function addCouponBtn(params) {
    return {
        evid: 46,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editingCoupon' event (evid: 47)
 *
 * Event description: editing coupon.
 *
 * @param {editingCouponParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<editingCouponParams>} LogObject<editingCouponParams>
 */
export function editingCoupon(params) {
    return {
        evid: 47,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveCouponBtn' event (evid: 48)
 *
 * Event description: save coupon btn.
 *
 * @param {saveCouponBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<saveCouponBtnParams>} LogObject<saveCouponBtnParams>
 */
export function saveCouponBtn(params) {
    return {
        evid: 48,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'duplicateProduct' event (evid: 49)
 *
 * Event description: duplicate product.
 *
 * @param {duplicateProductParams} params - The parameters for this event
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<duplicateProductParams>} LogObject<duplicateProductParams>
 */
export function duplicateProduct(params) {
    return {
        evid: 49,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteProductsBtn' event (evid: 50)
 *
 * Event description: delete products btn.
 *
 * @param {deleteProductsBtnParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} productids - changed product_id -> product_name on Oct 03, 2013
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<deleteProductsBtnParams>} LogObject<deleteProductsBtnParams>
 */
export function deleteProductsBtn(params) {
    return {
        evid: 50,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'saveProductBtn' event (evid: 51)
 *
 * Event description: save product btn.
 *
 * @param {saveProductBtnParams} params - The parameters for this event
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<saveProductBtnParams>} LogObject<saveProductBtnParams>
 */
export function saveProductBtn(params) {
    return {
        evid: 51,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createNewProduct' event (evid: 52)
 *
 * Event description: create new product.
 *
 * @param {createNewProductParams} params - The parameters for this event
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<createNewProductParams>} LogObject<createNewProductParams>
 */
export function createNewProduct(params) {
    return {
        evid: 52,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateProduct' event (evid: 53)
 *
 * Event description: update product.
 *
 * @param {updateProductParams} params - The parameters for this event
 * @property {string} titlenew - titlenew
 * @property {string} priceold - priceold
 * @property {string} productid - changed product_id -> product_name on Oct 03, 2013
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {string} pricenew - pricenew
 * @property {GUID} uid - uuid
 * @property {string} titleold - titleold
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<updateProductParams>} LogObject<updateProductParams>
 */
export function updateProduct(params) {
    return {
        evid: 53,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleUpdatedSrc30Evid54' event (evid: 54)
 *
 * Event description: shipping rule updated.
 *
 * @param {shippingRuleUpdatedSrc30Evid54Params} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<shippingRuleUpdatedSrc30Evid54Params>} LogObject<shippingRuleUpdatedSrc30Evid54Params>
 */
export function shippingRuleUpdatedSrc30Evid54(params) {
    return {
        evid: 54,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRuleCreatedSrc30Evid55' event (evid: 55)
 *
 * Event description: shipping rule created.
 *
 * @param {shippingRuleCreatedSrc30Evid55Params} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<shippingRuleCreatedSrc30Evid55Params>} LogObject<shippingRuleCreatedSrc30Evid55Params>
 */
export function shippingRuleCreatedSrc30Evid55(params) {
    return {
        evid: 55,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'shippingRulesDeleted' event (evid: 56)
 *
 * Event description: shipping rules deleted.
 *
 * @param {shippingRulesDeletedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<shippingRulesDeletedParams>} LogObject<shippingRulesDeletedParams>
 */
export function shippingRulesDeleted(params) {
    return {
        evid: 56,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRuleUpdated' event (evid: 57)
 *
 * Event description: tax rule updated.
 *
 * @param {taxRuleUpdatedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<taxRuleUpdatedParams>} LogObject<taxRuleUpdatedParams>
 */
export function taxRuleUpdated(params) {
    return {
        evid: 57,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRuleCreated' event (evid: 58)
 *
 * Event description: tax rule created.
 *
 * @param {taxRuleCreatedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<taxRuleCreatedParams>} LogObject<taxRuleCreatedParams>
 */
export function taxRuleCreated(params) {
    return {
        evid: 58,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'taxRulesDeleted' event (evid: 59)
 *
 * Event description: tax rules deleted.
 *
 * @param {taxRulesDeletedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<taxRulesDeletedParams>} LogObject<taxRulesDeletedParams>
 */
export function taxRulesDeleted(params) {
    return {
        evid: 59,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnDeleteOnlineStoreInConfirmationPopUp' event (evid: 61)
 *
 * Event description: click on delete online store in confirmation pop up
 *
 * @param {clickOnDeleteOnlineStoreInConfirmationPopUpParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<clickOnDeleteOnlineStoreInConfirmationPopUpParams>} LogObject<clickOnDeleteOnlineStoreInConfirmationPopUpParams>
 */
export function clickOnDeleteOnlineStoreInConfirmationPopUp(params) {
    return {
        evid: 61,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'siteSavedAfterRemovingOnlineStore' event (evid: 62)
 *
 * Event description: user saved his site after removing online store
 *
 * @param {siteSavedAfterRemovingOnlineStoreParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<siteSavedAfterRemovingOnlineStoreParams>} LogObject<siteSavedAfterRemovingOnlineStoreParams>
 */
export function siteSavedAfterRemovingOnlineStore(params) {
    return {
        evid: 62,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userProceededToCheckout' event (evid: 72)
 *
 * Event description: user proceeded to checkout.
 *
 * @param {userProceededToCheckoutParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} c2 - origin
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {string} c1 - cart_id
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userProceededToCheckoutParams>} LogObject<userProceededToCheckoutParams>
 */
export function userProceededToCheckout(params) {
    return {
        evid: 72,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'changeShippingForPreselectedDestination' event (evid: 73)
 *
 * Event description: change shipping for preselected destination.
 *
 * @param {changeShippingForPreselectedDestinationParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<changeShippingForPreselectedDestinationParams>} LogObject<changeShippingForPreselectedDestinationParams>
 */
export function changeShippingForPreselectedDestination(params) {
    return {
        evid: 73,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'userSharedProductPage' event (evid: 76)
 *
 * Event description: user shared product page.
 *
 * @param {userSharedProductPageParams} params - The parameters for this event
 * @property {string} c2 - referral
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - changed product_id -> product_name on Oct 03, 2013
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<userSharedProductPageParams>} LogObject<userSharedProductPageParams>
 */
export function userSharedProductPage(params) {
    return {
        evid: 76,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productPageAddProductToCart' event (evid: 77)
 *
 * Event description: product page add product to cart.
 *
 * @param {productPageAddProductToCartParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} productid - product_name
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {string} c1 - product_name
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<productPageAddProductToCartParams>} LogObject<productPageAddProductToCartParams>
 */
export function productPageAddProductToCart(params) {
    return {
        evid: 77,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addToCartBtnAddProductToCart' event (evid: 78)
 *
 * Event description: add to cart btn add product to cart.
 *
 * @param {addToCartBtnAddProductToCartParams} params - The parameters for this event
 * @property {string} productid - product_name
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - product_name
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<addToCartBtnAddProductToCartParams>} LogObject<addToCartBtnAddProductToCartParams>
 */
export function addToCartBtnAddProductToCart(params) {
    return {
        evid: 78,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'checkoutBlockedMessage' event (evid: 79)
 *
 * Event description: checkout blocked message.
 *
 * @param {checkoutBlockedMessageParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<checkoutBlockedMessageParams>} LogObject<checkoutBlockedMessageParams>
 */
export function checkoutBlockedMessage(params) {
    return {
        evid: 79,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'performanceData' event (evid: 80)
 *
 * Event description: performance data.
 *
 * @param {performanceDataParams} params - The parameters for this event
 * @property {GUID} c2 - uuid
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - event_data
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<performanceDataParams>} LogObject<performanceDataParams>
 */
export function performanceData(params) {
    return {
        evid: 80,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ecomCheckoutMessageUpgradeButton' event (evid: 81)
 *
 * Event description: ecom checkout message -> upgrade button.
 *
 * @param {ecomCheckoutMessageUpgradeButtonParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ecomCheckoutMessageUpgradeButtonParams>} LogObject<ecomCheckoutMessageUpgradeButtonParams>
 */
export function ecomCheckoutMessageUpgradeButton(params) {
    return {
        evid: 81,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'reloadGalleryDataAfterSave' event (evid: 83)
 *
 * Event description: reload gallery data after save.
 *
 * @param {reloadGalleryDataAfterSaveParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {number} c1 - count
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<reloadGalleryDataAfterSaveParams>} LogObject<reloadGalleryDataAfterSaveParams>
 */
export function reloadGalleryDataAfterSave(params) {
    return {
        evid: 83,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ecomFeedbackContinueShoppingClicked' event (evid: 84)
 *
 * Event description: ecom feedback -> continue shopping clicked.
 *
 * @param {ecomFeedbackContinueShoppingClickedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - product_name
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ecomFeedbackContinueShoppingClickedParams>} LogObject<ecomFeedbackContinueShoppingClickedParams>
 */
export function ecomFeedbackContinueShoppingClicked(params) {
    return {
        evid: 84,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ecomFeedbackCheckoutClicked' event (evid: 85)
 *
 * Event description: ecom feedback -> checkout clicked.
 *
 * @param {ecomFeedbackCheckoutClickedParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} c1 - product_name
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ecomFeedbackCheckoutClickedParams>} LogObject<ecomFeedbackCheckoutClickedParams>
 */
export function ecomFeedbackCheckoutClicked(params) {
    return {
        evid: 85,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ecomCartSettingsAddThankYouPage' event (evid: 86)
 *
 * Event description: ecom cart settings -> add thank you page.
 *
 * @param {ecomCartSettingsAddThankYouPageParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ecomCartSettingsAddThankYouPageParams>} LogObject<ecomCartSettingsAddThankYouPageParams>
 */
export function ecomCartSettingsAddThankYouPage(params) {
    return {
        evid: 86,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'ecomCartSettingsDesignThankYouPage' event (evid: 87)
 *
 * Event description: ecom cart settings -> design thank you page.
 *
 * @param {ecomCartSettingsDesignThankYouPageParams} params - The parameters for this event
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<ecomCartSettingsDesignThankYouPageParams>} LogObject<ecomCartSettingsDesignThankYouPageParams>
 */
export function ecomCartSettingsDesignThankYouPage(params) {
    return {
        evid: 87,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'successRateForMagentoAction' event (evid: 88)
 *
 * Event description: success rate for magento action.
 *
 * @param {successRateForMagentoActionParams} params - The parameters for this event
 * @property {GUID} vsi - vsi
 * @property {string} viewmode - viewmode
 * @property {GUID} client_id - client_id
 * @property {GUID} did - site_id
 * @property {string} c1 - action_name
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<successRateForMagentoActionParams>} LogObject<successRateForMagentoActionParams>
 */
export function successRateForMagentoAction(params) {
    return {
        evid: 88,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'performanceMetrics' event (evid: 90)
 *
 * Event description: performance metrics.
 *
 * @param {performanceMetricsParams} params - The parameters for this event
 * @property {string} step - step
 * @property {number} ts - ts
 * @property {string} viewmode - viewmode
 * @property {GUID} did - site_id
 * @property {string} vsi - vsi
 * @property {GUID} lsi - lsi
 * @property {GUID} uid - uuid
 * @property {GUID} esi - esi
 * @property {GUID} msid - msid
 * @return {LogObject<performanceMetricsParams>} LogObject<performanceMetricsParams>
 */
export function performanceMetrics(params) {
    return {
        evid: 90,
        src: 30,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountsTooltipHintShown' event (evid: 11)
 *
 * Event description: When a user click to create discount eiter from the main button or the empty state link
 *
 * @param {discountsTooltipHintShownParams} params - The parameters for this event
 * @property {string} text - the tooltip content
 * @property {string} language - the text language
 * @property {string} pageName - the page where tooltip is located
 * @property {GUID} ruleId - the discount rule id
 * @return {LogObject<discountsTooltipHintShownParams>} LogObject<discountsTooltipHintShownParams>
 */
export function discountsTooltipHintShown(params) {
    return {
        evid: 11,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCouponServer' event (evid: 1101)
 *
 * Event description: When a coupon created
 * from the client or from API
 *
 * @param {createCouponServerParams} params - The parameters for this event
 * @property {GUID} instanceId - instanceId
 * @property {DateTime} startTime - Valid between start
 * @property {DateTime} expirationTime - valid between end, when Don't set end date  is marked  expirationTime is null
 * @property {number} limitPerCustomer - 0/1
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - name given to coupon
 * @property {number} usageLimit - usage_limit
 * @property {string} appDefId - app_def_id - coupons or by TPA or Corvid
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {string} applyTo - 'specific ticket'/'specific event'/'all tickets'
 * @property {string} vertical - general | stores | bookings | music | events
 * @property {number} discountValue_long - multiply by 100000
 * @property {string} couponType - couponType
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - int multiply by 10000
 * @property {string} couponId - coupon_id
 * @property {boolean} active - active
 * @return {LogObject<createCouponServerParams>} LogObject<createCouponServerParams>
 */
export function createCouponServer(params) {
    return {
        evid: 1101,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCouponServer' event (evid: 1102)
 *
 * Event description: When a coupon deleted
 * from the client or from API
 *
 * @param {deleteCouponServerParams} params - The parameters for this event
 * @property {GUID} instanceId - instanceId
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - name given to coupon
 * @property {string} appDefId - app_def_id - coupons or by TPA or Corvid
 * @property {string} vertical - general | stores | bookings | music | events
 * @property {string} couponType - couponType
 * @property {string} couponId - coupon_id
 * @return {LogObject<deleteCouponServerParams>} LogObject<deleteCouponServerParams>
 */
export function deleteCouponServer(params) {
    return {
        evid: 1102,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateCouponServer' event (evid: 1103)
 *
 * Event description: When a coupon is updated
 * from the client or from API
 *
 * @param {updateCouponServerParams} params - The parameters for this event
 * @property {GUID} instanceId - instanceId
 * @property {DateTime} startTime - Valid between start
 * @property {DateTime} expirationTime - Valid between end. when Don't set end date  is marked  expirationTime is null
 * @property {number} limitPerCustomer - 0/1
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - name given to coupon
 * @property {number} usageLimit - usage_limit
 * @property {string} appDefId - app_def_id - coupons or by TPA or Corvid
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {string} applyTo - 'specific ticket'/'specific event'/'all tickets'
 * @property {string} vertical - general | stores | bookings | music | events
 * @property {number} discountValue_long - multiply by 100000
 * @property {string} couponType - couponType
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - int multiply by 10000
 * @property {string} couponId - coupon_id
 * @property {boolean} active - active
 * @return {LogObject<updateCouponServerParams>} LogObject<updateCouponServerParams>
 */
export function updateCouponServer(params) {
    return {
        evid: 1103,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkDeleteCouponsRequest' event (evid: 1104)
 *
 * Event description: When a request is sent from delete coupons in bulk endpoint
 *
 * @param {bulkDeleteCouponsRequestParams} params - The parameters for this event
 * @property {number} numCoupons - Number of coupons to delete
 * @return {LogObject<bulkDeleteCouponsRequestParams>} LogObject<bulkDeleteCouponsRequestParams>
 */
export function bulkDeleteCouponsRequest(params) {
    return {
        evid: 1104,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkDeleteCouponsResponse' event (evid: 1105)
 *
 * Event description: When receiving a  response from delete coupons in bulk endpoint
 *
 * @param {bulkDeleteCouponsResponseParams} params - The parameters for this event
 * @property {number} numCouponsFailedToDelete - Number coupons failed to delete
 * @property {number} numCoupons - Number of coupons to delete (requested)
 * @property {number} numCouponsDeletedSuccessfully - Number of coupons deleted successfully
 * @return {LogObject<bulkDeleteCouponsResponseParams>} LogObject<bulkDeleteCouponsResponseParams>
 */
export function bulkDeleteCouponsResponse(params) {
    return {
        evid: 1105,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'requestForCouponValidationServer' event (evid: 1300)
 *
 * Event description: when UoU clicks "Apply coupon" / logs in MA /  enters email in checkout - it triggers coupon validation on server
 *
 * @param {requestForCouponValidationServerParams} params - The parameters for this event
 * @property {number} hasEmail - 0/1 (1 if we know the email)
 * @property {string} creatorAppId - the app id who created the coupon
 * @property {GUID} visitorId - visitor
 * @property {GUID} cartId - cart_id
 * @property {number} limitPerCustomer - 0/1
 * @property {string} couponCode - coupon_code
 * @property {string} calculationType - byCode (first time) / byCode (already validated in Cart , the rest validations happen by id) / byDiscount
 * @property {string} couponType - MoneyOffCoupon, PercentOffCoupon...
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {string} identityType - user / wix_service
 * @property {string} couponId - coupon_id
 * @property {GUID} appDefId - appdefid
 * @property {string} caller - api triggered the validation request
 * @return {LogObject<requestForCouponValidationServerParams>} LogObject<requestForCouponValidationServerParams>
 */
export function requestForCouponValidationServer(params) {
    return {
        evid: 1300,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponValidationServer' event (evid: 1301)
 *
 * Event description: Coupon validation (server).
 *
 * @param {couponValidationServerParams} params - The parameters for this event
 * @property {string} creatorAppId - app_id
 * @property {GUID} visitorId - visitor
 * @property {string} couponCode - coupon_code
 * @property {string} errorReason - error_reason
 * @property {boolean} isSuccess - is_success
 * @property {string} couponType - coupon_type
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {string} identityType - user / wix_service
 * @property {string} couponId - coupon_id
 * @return {LogObject<couponValidationServerParams>} LogObject<couponValidationServerParams>
 */
export function couponValidationServer(params) {
    return {
        evid: 1301,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponUsedServer' event (evid: 1302)
 *
 * Event description: when order is placed with coupon
 *
 * @param {couponUsedServerParams} params - The parameters for this event
 * @property {string} creatorAppId - the app who created the coupon
 * @property {GUID} visitorId - visitor
 * @property {string} orderId - order_id
 * @property {string} couponCode - coupon_code
 * @property {number} discountValue_long - integer, multiplied by 100 000
 * @property {string} couponType - MoneyOffCoupon, PercentOffCoupon...
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {string} identityType - user / wix_service
 * @property {string} couponId - coupon_id
 * @property {GUID} appDefId - app def id
 * @property {string} caller - service caller
 * @return {LogObject<couponUsedServerParams>} LogObject<couponUsedServerParams>
 */
export function couponUsedServer(params) {
    return {
        evid: 1302,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCreateCouponsRequest' event (evid: 1303)
 *
 * Event description: When a request is sent from create coupons in bulk endpoint
 *
 * @param {bulkCreateCouponsRequestParams} params - The parameters for this event
 * @property {number} numCoupons - Number of coupons to delete
 * @return {LogObject<bulkCreateCouponsRequestParams>} LogObject<bulkCreateCouponsRequestParams>
 */
export function bulkCreateCouponsRequest(params) {
    return {
        evid: 1303,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCreateCouponsResponse' event (evid: 1304)
 *
 * Event description: When receiving a  response from create coupons in bulk endpoint
 *
 * @param {bulkCreateCouponsResponseParams} params - The parameters for this event
 * @property {number} numCouponsFailedToCreate - Number coupons failed to create (data since 31/08/2022)
 * @property {number} numCouponsFailedToDelete - Number coupons failed to create
 * @property {number} numCoupons - Number of coupons to create (requested)
 * @property {number} numCouponsCreatedSuccessfully - Number of coupons created successfully (data since 31/08/2022)
 * @property {number} numCouponsDeletedSuccessfully - Number of coupons created successfully
 * @return {LogObject<bulkCreateCouponsResponseParams>} LogObject<bulkCreateCouponsResponseParams>
 */
export function bulkCreateCouponsResponse(params) {
    return {
        evid: 1304,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'dummyNameSrc86Evid1500' event (evid: 1500)
 *
 * Event description: dummy-name.
 *
 * @param {dummyNameSrc86Evid1500Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc86Evid1500Params>} LogObject<dummyNameSrc86Evid1500Params>
 */
export function dummyNameSrc86Evid1500(params) {
    return {
        evid: 1500,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountRuleCreated' event (evid: 1501)
 *
 * Event description: When discount rule is created in the API
 *
 * @param {discountRuleCreatedParams} params - The parameters for this event
 * @property {string} name - The discount name
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} targettype - discount type (buy X get Y , specific items, all items )
 * @property {string} discountArray - array with the discount data from the discount rule object {[tragetType: ALL_ITEMS/specific item/... ,  , discountType: TYPE , valueLong: NUMBER*100000 ,numScopes: NUMBER of scopes the discount applied to ,numAllItemsScopes: NUMBER of all items scopes ,numCatalogItemsScopes: NUMBER of catalog items scopes ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs in the dsicount scopes]}
 * @property {string} appDefId - The app_id which triggered the API call. if the rule was created/ edited in BM then coupons app is is sent.
 * @property {number} numAndTriggers - Number of And triggers
 * @property {number} numberOfItemQuantityTriggers - Number of Item quantity triggers
 * @property {DateTime} endTime - The end date of the discount
 * @property {GUID} id - The discount id
 * @property {number} numberOfMinSubtotalTriggers - Number of minsubtotal triggers
 * @property {string} discountScopesAppIds - List of discount scopes app ids
 * @property {boolean} isActive - is the discount rule is active
 * @property {string} customTriggerAppIds - Array of App ids that created the custom trigger. If velo logic is implemented, send velo app_id, else: TPA id.
 * @property {string} offer - description of the discount rule
 * @property {string} triggersArray - array of triggers in the discount rule. {[triggerType: "minsubtotal"/"hasItems"/"And" ,  ,numScopes: NUMBER of scpoes in the trigger ,numAllItemsScopes: NUMBER of all items scopes in trigger,numCatalogItemsScopes: NUMBER of catalog items scopes in trigger ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs scopes in trigger ,fromLong: NUMBER or null toLong: number or null] ,[... ]}
 * @property {string} triggersScopesAppIds - List of triggers scopes app ids
 * @property {string} display - where the user choose to display the discount rule
 * @return {LogObject<discountRuleCreatedParams>} LogObject<discountRuleCreatedParams>
 */
export function discountRuleCreated(params) {
    return {
        evid: 1501,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountRuleUpdated' event (evid: 1502)
 *
 * Event description: When discount rule is updated in the API
 *
 * @param {discountRuleUpdatedParams} params - The parameters for this event
 * @property {boolean} is_active - is the discount rule is active
 * @property {string} name - The discount name
 * @property {number} numCustomTriggers - num of custom triggers
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} targettype - discount type (Buy X gey Y, specific items, etc)
 * @property {string} discountArray - array with the discount data from the discount rule object {[tragetType: ALL_ITEMS/specific item/... ,  , discountType: TYPE , valueLong: NUMBER*100000 ,numScopes: NUMBER of scopes the discount applied to ,numAllItemsScopes: NUMBER of all items scopes ,numCatalogItemsScopes: NUMBER of catalog items scopes ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs in the dsicount scopes]}
 * @property {string} appDefId - The app_id which triggered the API call. if the rule was created/ edited in BM then coupons app is is sent.
 * @property {number} numAndTriggers - Number of And triggers
 * @property {number} numberOfItemQuantityTriggers - Number of Item quantity triggers
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} numberOfHasItemsTriggers - Number of Hasitems triggers
 * @property {GUID} id - The discount id
 * @property {number} numberOfMinSubtotalTriggers - Number of minsubtotal triggers
 * @property {string} discountScopesAppIds - List of discount scopes app ids
 * @property {string} updatedFields - Array of fields to update
 * @property {boolean} isActive - is the discount rule is active
 * @property {string} customTriggerAppIds - Array of App ids that created the custom trigger. If velo logic is implemented, send velo app_id, else: TPA id.
 * @property {string} offer - description of the discount rule
 * @property {string} triggersArray - array of triggers in the discount rule. {[triggerType: "minsubtotal"/"hasItems"/"And" ,  ,numScopes: NUMBER of scpoes in the trigger ,numAllItemsScopes: NUMBER of all items scopes in trigger,numCatalogItemsScopes: NUMBER of catalog items scopes in trigger ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs scopes in trigger ,fromLong: NUMBER or null toLong: number or null] ,[... ]}
 * @property {string} triggersScopesAppIds - List of triggers scopes app ids
 * @property {string} display - where the user choose to display the discount rule
 * @return {LogObject<discountRuleUpdatedParams>} LogObject<discountRuleUpdatedParams>
 */
export function discountRuleUpdated(params) {
    return {
        evid: 1502,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountRuleDeleted' event (evid: 1503)
 *
 * Event description: When discount rule is deleted in the API
 *
 * @param {discountRuleDeletedParams} params - The parameters for this event
 * @property {string} name - The discount name
 * @property {GUID} id - The discount id
 * @return {LogObject<discountRuleDeletedParams>} LogObject<discountRuleDeletedParams>
 */
export function discountRuleDeleted(params) {
    return {
        evid: 1503,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountRuleUsed' event (evid: 1504)
 *
 * Event description: When discount rule is created in the API
 *
 * @param {discountRuleUsedParams} params - The parameters for this event
 * @property {string} name - The discount name
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {number} numUsages - Number of times the rule was used
 * @property {GUID} orderId - Id of the order that the rule was applied in
 * @property {string} discountArray - array with the discount data from the discount rule object {[tragetType: ALL_ITEMS/specific item/... ,  , discountType: TYPE , valueLong: NUMBER*100000 ,numScopes: NUMBER of scopes the discount applied to ,numAllItemsScopes: NUMBER of all items scopes ,numCatalogItemsScopes: NUMBER of catalog items scopes ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs in the dsicount scopes]}
 * @property {number} numAndTriggers - Number of And triggers
 * @property {GUID} id - The discount id
 * @property {string} triggersArray - array of triggers in the discount rule. {[triggerType: "minsubtotal"/"hasItems"/"And" ,  ,numScopes: NUMBER of scpoes in the trigger ,numAllItemsScopes: NUMBER of all items scopes in trigger,numCatalogItemsScopes: NUMBER of catalog items scopes in trigger ,numCustomScopes: NUMBER of custom scopes ,scopeAppIds: list of APPIDs scopes in trigger ,fromLong: NUMBER or null toLong: number or null] ,[... ]}
 * @property {number} discountAmount - the amount of the discount
 * @return {LogObject<discountRuleUsedParams>} LogObject<discountRuleUsedParams>
 */
export function discountRuleUsed(params) {
    return {
        evid: 1504,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'productSubscriptionsClickOnLearnMore' event (evid: 272)
 *
 * Event description: Click on learn more to show stores subscriptions KB from Coupons modal
 *
 * @param {productSubscriptionsClickOnLearnMoreParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {GUID} storeId - store_id
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - coupons modal
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<productSubscriptionsClickOnLearnMoreParams>} LogObject<productSubscriptionsClickOnLearnMoreParams>
 */
export function productSubscriptionsClickOnLearnMore(params) {
    return {
        evid: 272,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponsTabFilterChanged' event (evid: 273)
 *
 * Event description: when a user filters the coupons in the coupons tab
 *
 * @param {couponsTabFilterChangedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {string} filterValue - status: all/active/scheduled/ not active / expired created_with: all / manually / automations / velo and apps search: free text
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} allFiltersStatus - json of the status of all fields that affect the list currently  status: all/active/scheduled/ not active / expired created_with: all / manually / automations / velo and apps search: free text
 * @property {boolean} isMerchant - is_merchant
 * @property {string} filterCategory - -’status’, ‘created-with’, ‘search’
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<couponsTabFilterChangedParams>} LogObject<couponsTabFilterChangedParams>
 */
export function couponsTabFilterChanged(params) {
    return {
        evid: 273,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponsClickOnLearnMore' event (evid: 274)
 *
 * Event description: Click on learn more to show stores coupons KB from Coupons tab
 *
 * @param {couponsClickOnLearnMoreParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<couponsClickOnLearnMoreParams>} LogObject<couponsClickOnLearnMoreParams>
 */
export function couponsClickOnLearnMore(params) {
    return {
        evid: 274,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsSelectCouponCode' event (evid: 275)
 *
 * Event description: Select coupon code
 *
 * @param {bulkCouponsSelectCouponCodeParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - .
 * @property {string} couponName - .
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - .
 * @return {LogObject<bulkCouponsSelectCouponCodeParams>} LogObject<bulkCouponsSelectCouponCodeParams>
 */
export function bulkCouponsSelectCouponCode(params) {
    return {
        evid: 275,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnHowDoesItWork' event (evid: 277)
 *
 * Event description: Click on "how does it work" to show bulk coupons KB.
 * Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid.
 *
 * SELECT msid
 * FROM prod.verticals.apps_log
 * where instance_id = ' '
 *
 * @param {bulkCouponsClickOnHowDoesItWorkParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnHowDoesItWorkParams>} LogObject<bulkCouponsClickOnHowDoesItWorkParams>
 */
export function bulkCouponsClickOnHowDoesItWork(params) {
    return {
        evid: 277,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'copyOfBulkCouponsClickOnWixSBlankCsvTemplate' event (evid: 278)
 *
 * Event description: Click on "Wix's blank CSV template".
 * Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid.
 *
 * SELECT msid
 * FROM prod.verticals.apps_log
 * where instance_id = ' '
 *
 * @param {copyOfBulkCouponsClickOnWixSBlankCsvTemplateParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<copyOfBulkCouponsClickOnWixSBlankCsvTemplateParams>} LogObject<copyOfBulkCouponsClickOnWixSBlankCsvTemplateParams>
 */
export function copyOfBulkCouponsClickOnWixSBlankCsvTemplate(params) {
    return {
        evid: 278,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnCodeGeneratorTool' event (evid: 279)
 *
 * Event description: Click on "code generator tool" to generate codes. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnCodeGeneratorToolParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnCodeGeneratorToolParams>} LogObject<bulkCouponsClickOnCodeGeneratorToolParams>
 */
export function bulkCouponsClickOnCodeGeneratorTool(params) {
    return {
        evid: 279,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnGenerate' event (evid: 280)
 *
 * Event description: Click on "generate" in the generator tool modal. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnGenerateParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} singleCodeLength - number of characters after code prefix
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {string} codePrefix - code prefix
 * @property {number} numberOfCodes - number of codes that to create
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnGenerateParams>} LogObject<bulkCouponsClickOnGenerateParams>
 */
export function bulkCouponsClickOnGenerate(params) {
    return {
        evid: 280,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnDownloadCsv' event (evid: 281)
 *
 * Event description: Click on "download CSV" after using the generator tool. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnDownloadCsvParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {number} singleCodeLength - number of characters after code prefix
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} codePrefix - code prefix
 * @property {number} numberOfCodes - number_of_codes
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnDownloadCsvParams>} LogObject<bulkCouponsClickOnDownloadCsvParams>
 */
export function bulkCouponsClickOnDownloadCsv(params) {
    return {
        evid: 281,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnUploadCsvFile' event (evid: 282)
 *
 * Event description: Click on "Upload CSV file" when client click to upload csv file or in order to delete file that already  been uploaded. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnUploadCsvFileParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {string} buttonType - button_type
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnUploadCsvFileParams>} LogObject<bulkCouponsClickOnUploadCsvFileParams>
 */
export function bulkCouponsClickOnUploadCsvFile(params) {
    return {
        evid: 282,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnCreateCoupons' event (evid: 283)
 *
 * Event description: Click on "Create Coupons" . Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnCreateCouponsParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {string} couponName - coupon name of the original coupon (the one that was duplicated)
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon id of the original coupon (the one that was duplicated)
 * @return {LogObject<bulkCouponsClickOnCreateCouponsParams>} LogObject<bulkCouponsClickOnCreateCouponsParams>
 */
export function bulkCouponsClickOnCreateCoupons(params) {
    return {
        evid: 283,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsCouponsCreationStatusPageUploaded' event (evid: 284)
 *
 * Event description: Coupons creation status page uploaded - page that shows how many coupons were created and hoe many with errors . Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsCouponsCreationStatusPageUploadedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {number} totalNumberOfCoupons - number of coupons that the client tried to create
 * @property {string} appName - app name
 * @property {number} numberOfCouponsWithErrors - number of coupons with errors
 * @property {string} couponName - coupon name of the original coupon (the one that was duplicated)
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfCouponCreated - number of coupon that were successfully  created
 * @property {GUID} couponId - coupon id of the original coupon (the one that was duplicated)
 * @return {LogObject<bulkCouponsCouponsCreationStatusPageUploadedParams>} LogObject<bulkCouponsCouponsCreationStatusPageUploadedParams>
 */
export function bulkCouponsCouponsCreationStatusPageUploaded(params) {
    return {
        evid: 284,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnViewErrorsInCouponsCreationStatusPage' event (evid: 285)
 *
 * Event description: Click on view errors in coupons creation status page - page that shows number of created coupons and number of coupons with errors. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnViewErrorsInCouponsCreationStatusPageParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {string} errorData - json with the error code and the distinct number of coupons with this errors in this report
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {number} numberOfCouponsWithErrors - number of coupons with errors
 * @property {string} couponName - coupon_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnViewErrorsInCouponsCreationStatusPageParams>} LogObject<bulkCouponsClickOnViewErrorsInCouponsCreationStatusPageParams>
 */
export function bulkCouponsClickOnViewErrorsInCouponsCreationStatusPage(params) {
    return {
        evid: 285,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsReviewCouponCodesPageUploaded' event (evid: 286)
 *
 * Event description: Review coupon codes page uploaded. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsReviewCouponCodesPageUploadedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {number} totalNumberOfCoupons - number of coupons that the client want to create
 * @property {string} appName - app name
 * @property {number} numberOfCouponsWithErrors - number of coupon codes with errors
 * @property {string} couponName - coupon_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfReadyCoupons - number of coupon codes that are ready for creation
 * @property {GUID} couponId - coupon id of the original coupon (the one that was duplicated)
 * @return {LogObject<bulkCouponsReviewCouponCodesPageUploadedParams>} LogObject<bulkCouponsReviewCouponCodesPageUploadedParams>
 */
export function bulkCouponsReviewCouponCodesPageUploaded(params) {
    return {
        evid: 286,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnCreateCouponsFromReviewCouponCodesPage' event (evid: 287)
 *
 * Event description: Click on create coupons in Review coupon codes page Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnCreateCouponsFromReviewCouponCodesPageParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {number} totalNumberOfCoupons - number of coupons that the client want to create
 * @property {string} appName - app_name
 * @property {number} numberOfCouponsWithErrors - number of coupon codes with errors
 * @property {string} couponName - coupon name of the original coupon (the one that was duplicated)
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfReadyCoupons - number of coupon codes that are ready for creation
 * @property {GUID} couponId - coupon id of the original coupon (the one that was duplicated)
 * @return {LogObject<bulkCouponsClickOnCreateCouponsFromReviewCouponCodesPageParams>} LogObject<bulkCouponsClickOnCreateCouponsFromReviewCouponCodesPageParams>
 */
export function bulkCouponsClickOnCreateCouponsFromReviewCouponCodesPage(params) {
    return {
        evid: 287,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnViewErrorsReviewCouponCodesPage' event (evid: 288)
 *
 * Event description: Click on view errors review coupon codes page - page that shows number of created coupons and number of coupons with errors. Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid. SELECT msid FROM prod.verticals.apps_log where instance_id = ' '
 *
 * @param {bulkCouponsClickOnViewErrorsReviewCouponCodesPageParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {string} errorData - json with the error code and the distinct number of coupons with this errors in this report
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {number} numberOfCouponsWithErrors - number_of_coupons_with_errors
 * @property {string} couponName - coupon name of the original coupon (the one that was duplicated)
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon id of the original coupon (the one that was duplicated)
 * @return {LogObject<bulkCouponsClickOnViewErrorsReviewCouponCodesPageParams>} LogObject<bulkCouponsClickOnViewErrorsReviewCouponCodesPageParams>
 */
export function bulkCouponsClickOnViewErrorsReviewCouponCodesPage(params) {
    return {
        evid: 288,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsGotItPageUploaded' event (evid: 289)
 *
 * Event description: Bulk Coupons -> got it page uploaded.
 *
 * @param {bulkCouponsGotItPageUploadedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {number} numberOfCouponsWithErrors - number of coupons with errors
 * @property {string} couponName - coupon name of the original coupon (the one that was duplicated)
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numberOfCouponsCreated - number of coupons created
 * @property {string} origin - review coupon code page or coupons creation status page
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsGotItPageUploadedParams>} LogObject<bulkCouponsGotItPageUploadedParams>
 */
export function bulkCouponsGotItPageUploaded(params) {
    return {
        evid: 289,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'pageViewBm' event (evid: 313)
 *
 * Event description: Sent when one of the discount pages is loaded in BM
 *
 * @param {pageViewBmParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - The previous page
 * @property {string} pageState - page_state
 * @property {string} pageName - The page name
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<pageViewBmParams>} LogObject<pageViewBmParams>
 */
export function pageViewBm(params) {
    return {
        evid: 313,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToCreateDiscount' event (evid: 50)
 *
 * Event description: When a user click to create discount eiter from the main button or the empty state link
 *
 * @param {clickToCreateDiscountParams} params - The parameters for this event
 * @property {string} pageState - empty/ full
 * @property {string} origin - origin
 * @return {LogObject<clickToCreateDiscountParams>} LogObject<clickToCreateDiscountParams>
 */
export function clickToCreateDiscount(params) {
    return {
        evid: 50,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'sortDiscountRulesTable' event (evid: 51)
 *
 * Event description: When a user clicks to sort one of the columns if the discount rules table
 *
 * @param {sortDiscountRulesTableParams} params - The parameters for this event
 * @property {string} field - field
 * @property {string} direction - ASC / DESC
 * @return {LogObject<sortDiscountRulesTableParams>} LogObject<sortDiscountRulesTableParams>
 */
export function sortDiscountRulesTable(params) {
    return {
        evid: 51,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'filterAppliedOnDiscountRulesTable' event (evid: 52)
 *
 * Event description: When a user applied a filter in the discount rules table
 *
 * @param {filterAppliedOnDiscountRulesTableParams} params - The parameters for this event
 * @property {string} filterValue - true if filter added, false if filter removed
 * @property {string} filterStatus - json that shows snapshot of all the filter that applied on the list  filterCategory as a key  filterSubcategory as a value { status: active search: summer }
 * @property {string} origin - the origin the filter was changed from ('orders list' / ''panel')
 * @property {string} filterSubcategory - When filterCategory=status: active / inactive / expired  When filterCategory=search: The searched string When filterCategory=clearAll: Null
 * @property {string} filterCategory - status / search / clearAll
 * @return {LogObject<filterAppliedOnDiscountRulesTableParams>} LogObject<filterAppliedOnDiscountRulesTableParams>
 */
export function filterAppliedOnDiscountRulesTable(params) {
    return {
        evid: 52,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickSaveDiscountRule' event (evid: 53)
 *
 * Event description: When a user click to save discount rule in the discount rule page
 *
 * @param {clickSaveDiscountRuleParams} params - The parameters for this event
 * @property {string} name - Discount name
 * @property {number} customerGetLimit - How many items the customer get
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} discountType - The type of the discount
 * @property {number} customerBuyAmount - The amount the customer need to buy to trigger the discount
 * @property {number} customerBuyQuantity - The quantity the customer need to buy to trigger the discount
 * @property {string} scope - discount scope that was chosen. If the discount is type Buy X get X then this field contains the customer buy scope
 * @property {string} customerGetScopeAppIds - Scope of the products the customer can get
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} valueLong - The value of the discount multiplied by 100000
 * @property {GUID} id - The discount id
 * @property {number} usageLimitPerRequest - Usage limit in order
 * @property {string} type - create / update / duplicate
 * @property {string} targetType - What is the structure of the discount. Buy X get Y / specific items
 * @property {number} minimumQuantity - minimum_quantity
 * @property {number} minimumOrderSubtotalLong - Minimum order subtotal multiplied by 100000
 * @property {string} display - where the user choose to display the discount rule
 * @return {LogObject<clickSaveDiscountRuleParams>} LogObject<clickSaveDiscountRuleParams>
 */
export function clickSaveDiscountRule(params) {
    return {
        evid: 53,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToCancelInDiscountPageToOpenModal' event (evid: 54)
 *
 * Event description: Click to Cancel in discount page to open modal.
 *
 * @param {clickToCancelInDiscountPageToOpenModalParams} params - The parameters for this event
 * @property {GUID} id - The discount id
 * @property {string} origin - cancel button/ breadcrumbs
 * @property {string} type - type
 * @return {LogObject<clickToCancelInDiscountPageToOpenModalParams>} LogObject<clickToCancelInDiscountPageToOpenModalParams>
 */
export function clickToCancelInDiscountPageToOpenModal(params) {
    return {
        evid: 54,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickCancelDiscount' event (evid: 55)
 *
 * Event description: when a user clicks to cancel in the cancel discount modal. After the user clicks a warning modal is opened. The event is triggered when the user clicks to cancel inside the modal window
 *
 * @param {clickCancelDiscountParams} params - The parameters for this event
 * @property {GUID} id - The discount id
 * @property {string} origin - cancel button/ breadcrumbs
 * @property {string} type - create / update / duplicate
 * @return {LogObject<clickCancelDiscountParams>} LogObject<clickCancelDiscountParams>
 */
export function clickCancelDiscount(params) {
    return {
        evid: 55,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDuplicateEditDiscountRule' event (evid: 56)
 *
 * Event description: when a user clicks to duplicate/edit discount rule
 *
 * @param {clickToDuplicateEditDiscountRuleParams} params - The parameters for this event
 * @property {string} name - Discount name
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} discountType - The type of the discount
 * @property {string} scope - discount scope that was chosen
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} valueLong - The value of the discount multiplied by 100000
 * @property {GUID} id - The discount id
 * @property {string} type - update / duplicate
 * @property {number} minimumQuantity - Minimum quantity that was set
 * @property {number} minimumOrderSubtotalLong - Minimum order subtotal multiplied by 100000
 * @return {LogObject<clickToDuplicateEditDiscountRuleParams>} LogObject<clickToDuplicateEditDiscountRuleParams>
 */
export function clickToDuplicateEditDiscountRule(params) {
    return {
        evid: 56,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToEnableDisableDiscount' event (evid: 57)
 *
 * Event description: when a user clicks to enable/disable discount
 *
 * @param {clickToEnableDisableDiscountParams} params - The parameters for this event
 * @property {string} name - Discount name
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} discountType - The type of the discount
 * @property {string} scope - discount scope that was chosen
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} valueLong - The value of the discount multiplied by 100000
 * @property {GUID} id - The discount id
 * @property {string} origin - The origin the user clicks to enable the discount from.  there are 2 origins - First, from the three dots, second is from the discount page (after clicking save)
 * @property {string} type - edit / duplicate
 * @property {number} minimumQuantity - Minimum quantity that was set
 * @property {number} minimumOrderSubtotalLong - Minimum order subtotal multiplied by 100000
 * @property {string} display - where the user choose to display the discount rule
 * @return {LogObject<clickToEnableDisableDiscountParams>} LogObject<clickToEnableDisableDiscountParams>
 */
export function clickToEnableDisableDiscount(params) {
    return {
        evid: 57,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDeleteDiscountToOpenModal' event (evid: 58)
 *
 * Event description: when a user clicks to delete discount rule and a warning modal is opened
 *
 * @param {clickToDeleteDiscountToOpenModalParams} params - The parameters for this event
 * @property {string} name - Discount name
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} discountType - The type of the discount
 * @property {string} scope - discount scope that was chosen
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} valueLong - The value of the discount multiplied by 100000
 * @property {GUID} id - The discount id
 * @property {string} origin - ?
 * @property {string} type - edit / duplicate
 * @property {number} minimumQuantity - Minimum quantity that was set
 * @property {number} minimumOrderSubtotalLong - Minimum order subtotal multiplied by 100000
 * @return {LogObject<clickToDeleteDiscountToOpenModalParams>} LogObject<clickToDeleteDiscountToOpenModalParams>
 */
export function clickToDeleteDiscountToOpenModal(params) {
    return {
        evid: 58,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteDiscountRule' event (evid: 59)
 *
 * Event description: when a user clicks to delete discount rule inside the warning modal - actual delete
 *
 * @param {deleteDiscountRuleParams} params - The parameters for this event
 * @property {string} name - Discount name
 * @property {boolean} is_active - True if the discount is active, False if the discount is not active
 * @property {DateTime} startTime - The start date of the discount
 * @property {string} discountType - The type of the discount
 * @property {string} scope - discount scope that was chosen
 * @property {DateTime} endTime - The end date of the discount
 * @property {number} valueLong - The value of the discount multiplied by 100000
 * @property {GUID} id - The discount id
 * @property {string} origin - ?
 * @property {string} type - edit / duplicate
 * @property {number} minimumQuantity - Minimum quantity that was set
 * @property {number} minimumOrderSubtotalLong - Minimum order subtotal multiplied by 100000
 * @property {string} display - where the user choose to display the discount rule
 * @return {LogObject<deleteDiscountRuleParams>} LogObject<deleteDiscountRuleParams>
 */
export function deleteDiscountRule(params) {
    return {
        evid: 59,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountsClickOnKb' event (evid: 60)
 *
 * Event description: when a user clicks on Kb in discounts screens
 *
 * @param {discountsClickOnKbParams} params - The parameters for this event
 * @property {string} origin - The previous page
 * @return {LogObject<discountsClickOnKbParams>} LogObject<discountsClickOnKbParams>
 */
export function discountsClickOnKb(params) {
    return {
        evid: 60,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'selectDiscountModalShown' event (evid: 61)
 *
 * Event description: triggered when user clicks to 'create discount' CTA (discount list), OR when user clicks 'change discount type' in existing/new rule page and  then ‘select which discount.. ’ modal is shown.
 *
 * @param {selectDiscountModalShownParams} params - The parameters for this event
 * @property {string} origin - from where the click was made
 * @property {string} currentDiscountType - in case the modal is shown after pressing change button in new/existing rule page, then send the original discount that was chosen for the rule (standart discount / Buy X get Y). when creating new rule this should be null
 * @property {GUID} discountRuleId -  if the modal was open from ‘change action’ on existing rule,  than the discount rule id should be send (else null).
 * @property {GUID} msid - msid
 * @return {LogObject<selectDiscountModalShownParams>} LogObject<selectDiscountModalShownParams>
 */
export function selectDiscountModalShown(params) {
    return {
        evid: 61,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addCouponClicked' event (evid: 611)
 *
 * Event description: Add coupon clicked.
 *
 * @param {addCouponClickedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - origin
 * @property {GUID} userId - uuid
 * @property {string} relevant_verticals - What is installed on this site? who is Coupons relevant for {Stores/Bookings/Events}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addCouponClickedParams>} LogObject<addCouponClickedParams>
 */
export function addCouponClicked(params) {
    return {
        evid: 611,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnCouponsStatusTabs' event (evid: 612)
 *
 * Event description: when the user click on one of the tabs  'Active' / 'Not Active' / 'Expired'
 *
 * @param {clickOnCouponsStatusTabsParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {string} tab - 'Active' / 'Not Active' / 'Expired'
 * @property {GUID} biToken - msid
 * @property {string} appName - app
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} userId - uuid
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<clickOnCouponsStatusTabsParams>} LogObject<clickOnCouponsStatusTabsParams>
 */
export function clickOnCouponsStatusTabs(params) {
    return {
        evid: 612,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickShareCouponOa' event (evid: 613)
 *
 * Event description: When the user clicks to share the coupon social
 *
 * @param {clickShareCouponOaParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {GUID} biToken - msid
 * @property {string} appName - app_namr
 * @property {string} rule - example: {"buy":2,"get":1}
 * @property {number} usageLimit - limit
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {string} origin - edit coupon screen / Coupon Created success screen
 * @property {boolean} isActive - is_active
 * @property {number} discountValue_long - discount long (integer)
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {GUID} userId - uuid
 * @property {number} minSubTotal_long - integer!!!
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<clickShareCouponOaParams>} LogObject<clickShareCouponOaParams>
 */
export function clickShareCouponOa(params) {
    return {
        evid: 613,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCouponFlowOaChooseType' event (evid: 614)
 *
 * Event description: As Part of create coupon flow -> when the user chooses type
 *
 * @param {addNewCouponFlowOaChooseTypeParams} params - The parameters for this event
 * @property {GUID} instanceId - store_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - merchant?
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {GUID} userId - uuid
 * @property {string} relevant_verticals - {bookings/stores}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addNewCouponFlowOaChooseTypeParams>} LogObject<addNewCouponFlowOaChooseTypeParams>
 */
export function addNewCouponFlowOaChooseType(params) {
    return {
        evid: 614,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCouponFlowOaClickNextInSetDiscountValue' event (evid: 615)
 *
 * Event description: As Part of creating coupon flow -> when the user clicks next in the first page when he set the discount percent/amount/rule.
 * This page isn't shown for 'Free Shipping' Coupon
 *
 * @param {addNewCouponFlowOaClickNextInSetDiscountValueParams} params - The parameters for this event
 * @property {GUID} instanceId - store_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - merchant?
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {GUID} userId - uuid
 * @property {string} relevant_verticals - {bookings/stores}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addNewCouponFlowOaClickNextInSetDiscountValueParams>} LogObject<addNewCouponFlowOaClickNextInSetDiscountValueParams>
 */
export function addNewCouponFlowOaClickNextInSetDiscountValue(params) {
    return {
        evid: 615,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCoupon' event (evid: 616)
 *
 * Event description: Create Coupon.
 *
 * @param {createCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} limitPerCustomer - if only one coupon per person - 0/1
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - name given to coupon
 * @property {number} usageLimit - usage_limit
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - 'specific ticket'/'specific event'/'all tickets'
 * @property {string} vertical - general | stores | bookings | music | events
 * @property {string} origin - product page / email marketing / coupons tab
 * @property {number} discountValue_long - discount_long
 * @property {string} couponType - coupon_type
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - int
 * @property {GUID} couponId - coupon_id
 * @property {boolean} active - is_active
 * @return {LogObject<createCouponParams>} LogObject<createCouponParams>
 */
export function createCoupon(params) {
    return {
        evid: 616,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'updateCoupon' event (evid: 617)
 *
 * Event description: When user save the changes for the coupon
 *
 * @param {updateCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} limitPerCustomer - 0/1
 * @property {string} guid - guid
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - name given to coupon
 * @property {number} usageLimit - usage_limit
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - 'all products'/'specific product'/'specific collection'/'specific ticket'/'specific event'/'all tickets', 'all services'/'specific service'
 * @property {string} vertical - general | stores | bookings | music
 * @property {number} discountValue_long - discount_long
 * @property {string} couponType - coupon_type
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - min_sub_total_long
 * @property {GUID} couponId - coupon_id
 * @property {boolean} active - is_active
 * @return {LogObject<updateCouponParams>} LogObject<updateCouponParams>
 */
export function updateCoupon(params) {
    return {
        evid: 617,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'deleteCoupon' event (evid: 618)
 *
 * Event description: Delete Coupon.
 *
 * @param {deleteCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {string} origin - origin
 * @property {GUID} userId - uuid
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<deleteCouponParams>} LogObject<deleteCouponParams>
 */
export function deleteCoupon(params) {
    return {
        evid: 618,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'duplicateCoupon' event (evid: 619)
 *
 * Event description: Duplicate Coupon.
 *
 * @param {duplicateCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} limitPerCustomer - 0/1
 * @property {string} guid - guid
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {string} coupon_name - coupon name
 * @property {number} usageLimit - usage_limit
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} applyTo - 'all products'/'specific product'/'specific collection'/'specific ticket'/'specific event'/'all tickets', 'all services'/'specific service'
 * @property {string} vertical - general | stores | bookings | music
 * @property {number} discountValue_long - discount_long
 * @property {string} couponType - coupon_type
 * @property {boolean} appliesToSubscriptions - Ture (include subscriptions) / False (Exclude subscriptions)
 * @property {GUID} userId - uuid
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - min_sub_total_long
 * @property {GUID} couponId - coupon_id
 * @property {string} origCouponId - original_coupon_id
 * @property {boolean} active - is_active
 * @return {LogObject<duplicateCouponParams>} LogObject<duplicateCouponParams>
 */
export function duplicateCoupon(params) {
    return {
        evid: 619,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'discountModalClicked' event (evid: 62)
 *
 * Event description: When user clicks on continue / Cancel /X buttons in the 'select discount' modal
 *
 *
 * @param {discountModalClickedParams} params - The parameters for this event
 * @property {string} buttonAction - which CTA was clicked  [‘X’, ‘Cancel’, ‘Continue’]
 * @property {string} DiscountType - when action is ‘Continue’, send the chosen discount from the modal (buy x get y or regular). Else null.
 * @property {GUID} ruleId - discount rule id (if exist)
 * @property {string} msid - msid
 * @property {string} origin - from where the modal was open : empty state/ discount list/ rule page
 * @return {LogObject<discountModalClickedParams>} LogObject<discountModalClickedParams>
 */
export function discountModalClicked(params) {
    return {
        evid: 62,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'activateDeactivateCoupon' event (evid: 620)
 *
 * Event description: Activate Deactivate Coupon.
 *
 * @param {activateDeactivateCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {number} limitPerCustomer - 0/1
 * @property {string} guid - guid
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} rule - rule
 * @property {number} usageLimit - usage_limit
 * @property {string} number_of_item - one / all / not applicable- send one if radio button "limit discount to 1 item per order" , send "all" when  "apply discount to entire order" (all applicable items)
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {number} discountValue_long - discount_long
 * @property {string} couponType - coupon_type
 * @property {GUID} userId - uuid
 * @property {number} discountedCycleCount - for PPL - if is_subscription = true only. If empty - means it's applied to all cycles
 * @property {number} minSubTotal_long - min_sub_total_long
 * @property {GUID} couponId - coupon_id
 * @property {boolean} active - is_active
 * @return {LogObject<activateDeactivateCouponParams>} LogObject<activateDeactivateCouponParams>
 */
export function activateDeactivateCoupon(params) {
    return {
        evid: 620,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'showHideExpiredCoupons' event (evid: 621)
 *
 * Event description: Show/Hide expired coupons.
 *
 * @param {showHideExpiredCouponsParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {boolean} status - status
 * @property {GUID} userId - uuid
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<showHideExpiredCouponsParams>} LogObject<showHideExpiredCouponsParams>
 */
export function showHideExpiredCoupons(params) {
    return {
        evid: 621,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'editCouponClicked' event (evid: 622)
 *
 * Event description: when user click on a coupon (the edit page open)
 *
 * @param {editCouponClickedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} coupon_type - new name of coupon
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {string} origin - origin
 * @property {GUID} userId - uuid
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<editCouponClickedParams>} LogObject<editCouponClickedParams>
 */
export function editCouponClicked(params) {
    return {
        evid: 622,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCouponFlowOaClickNextInCouponCodeNameScreen' event (evid: 623)
 *
 * Event description: As Part of creating coupon flow -> when the user clicks next in the Coupon code/name' screen
 *
 * @param {addNewCouponFlowOaClickNextInCouponCodeNameScreenParams} params - The parameters for this event
 * @property {GUID} instanceId - store_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - merchant?
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {string} relevant_verticals - {bookings/stores}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addNewCouponFlowOaClickNextInCouponCodeNameScreenParams>} LogObject<addNewCouponFlowOaClickNextInCouponCodeNameScreenParams>
 */
export function addNewCouponFlowOaClickNextInCouponCodeNameScreen(params) {
    return {
        evid: 623,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCouponFlowOaChooseApplyType' event (evid: 624)
 *
 * Event description: As Part of creating coupon flow -> when the user clicks to choose how to apply the coupon. before 02/2019 wass sent on click in wix.coupons.ApplyCoupon screen . after - on fact of really 'choose apply to' (for all products it will be no changes, for specific product/collection will be sent after user chosen product, for order subtotal  after entering the amount and click next). also changed values for limit_to field.
 *
 * @param {addNewCouponFlowOaChooseApplyTypeParams} params - The parameters for this event
 * @property {GUID} instanceId - store_id
 * @property {string} limitTo - LimitationByProduct / LimitationByCollection / LimitationBySubtotal / NoLimit . since 02/2019 : minimumOrderSubtotal, allOrders / all (should look together with 'vertical' field as for stores it is 'all products' for bookings it is 'all offerings) /product / collection / offering
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - merchant?
 * @property {string} vertical - {bookings/stores}
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addNewCouponFlowOaChooseApplyTypeParams>} LogObject<addNewCouponFlowOaChooseApplyTypeParams>
 */
export function addNewCouponFlowOaChooseApplyType(params) {
    return {
        evid: 624,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'addNewCouponFlowOaSuccessPageShown' event (evid: 625)
 *
 * Event description: When the Coupon created successfully and the screen is shown (with 'not now' and share CTA)
 *
 * @param {addNewCouponFlowOaSuccessPageShownParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {boolean} is_active - is_active
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {string} rule - rule
 * @property {number} usageLimit - limit
 * @property {boolean} isMerchant - merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {number} discountValue_long - INTEGER!!!
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {string} type - duplicate/new/update
 * @property {number} minSubTotal_long - INT!!!
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<addNewCouponFlowOaSuccessPageShownParams>} LogObject<addNewCouponFlowOaSuccessPageShownParams>
 */
export function addNewCouponFlowOaSuccessPageShown(params) {
    return {
        evid: 625,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSendAfterChoosingACouponViaChatOa' event (evid: 626)
 *
 * Event description: When the user clicks on 'Send' after choosing a coupon to send a buyer via chat in OA or web
 *
 * @param {clickOnSendAfterChoosingACouponViaChatOaParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_namr
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<clickOnSendAfterChoosingACouponViaChatOaParams>} LogObject<clickOnSendAfterChoosingACouponViaChatOaParams>
 */
export function clickOnSendAfterChoosingACouponViaChatOa(params) {
    return {
        evid: 626,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnOneOfTheCouponsToSendViaChatOa' event (evid: 627)
 *
 * Event description: When the user clicks on of the coupons on keyboard/all_products view to send a buyer via chat in OA or web
 *
 * @param {clickOnOneOfTheCouponsToSendViaChatOaParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - couponId
 * @property {string} view - all_coupons/keyboard
 * @return {LogObject<clickOnOneOfTheCouponsToSendViaChatOaParams>} LogObject<clickOnOneOfTheCouponsToSendViaChatOaParams>
 */
export function clickOnOneOfTheCouponsToSendViaChatOa(params) {
    return {
        evid: 627,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickOnSeeAllOnCouponsKeyboardInChatOa' event (evid: 628)
 *
 * Event description: When the user clicks on 'See all' on coupons keyboard in chat in OA or web
 *
 * @param {clickOnSeeAllOnCouponsKeyboardInChatOaParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<clickOnSeeAllOnCouponsKeyboardInChatOaParams>} LogObject<clickOnSeeAllOnCouponsKeyboardInChatOaParams>
 */
export function clickOnSeeAllOnCouponsKeyboardInChatOa(params) {
    return {
        evid: 628,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponShareOnSocialNetworkOa' event (evid: 629)
 *
 * Event description: when user clicks on cancel or share in social network window. cancel or share is defined by field 'action'. relevant for iOS only
 *
 * @param {couponShareOnSocialNetworkOaParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {string} guid - product/collection id for coupon usage (null when to 'All products')
 * @property {GUID} biToken - msid
 * @property {string} appName - app_namr
 * @property {string} rule - example: {"buy":2,"get":1}
 * @property {number} usageLimit - limit
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {string} origin - edit coupon screen / Coupon Created success screen
 * @property {boolean} isActive - is_active
 * @property {number} discountValue_long - discount long (integer)
 * @property {string} couponType - MoneyOffCoupon / BuyXGetYCoupon / FreeShippingCoupon / ....
 * @property {number} minSubTotal_long - integer!!!
 * @property {GUID} couponId - coupon_id
 * @property {string} action - cancal/share
 * @return {LogObject<couponShareOnSocialNetworkOaParams>} LogObject<couponShareOnSocialNetworkOaParams>
 */
export function couponShareOnSocialNetworkOa(params) {
    return {
        evid: 629,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCouponsModalRenderedSf' event (evid: 630)
 *
 * Event description: Create/Edit/Duplicate Coupon modal rendered
 *
 * @param {createCouponsModalRenderedSfParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - biToken
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} loadingTime - loading time from start
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} type - Create / Edit / Duplicate
 * @property {string} relevant_verticals - What is installed on this site? who is Coupons relevant for {Stores/Bookings}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<createCouponsModalRenderedSfParams>} LogObject<createCouponsModalRenderedSfParams>
 */
export function createCouponsModalRenderedSf(params) {
    return {
        evid: 630,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'createCouponsModalStartLoadingSf' event (evid: 631)
 *
 * Event description: After the merchant click to create/update/edit Coupon
 * the component start loading
 *
 * @param {createCouponsModalStartLoadingSfParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - biToken
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} type - Create / Edit / Duplicate
 * @property {string} relevant_verticals - What is installed on this site? who is Coupons relevant for {Stores/Bookings}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<createCouponsModalStartLoadingSfParams>} LogObject<createCouponsModalStartLoadingSfParams>
 */
export function createCouponsModalStartLoadingSf(params) {
    return {
        evid: 631,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickToDuplicateCoupon' event (evid: 632)
 *
 * Event description: When users click to duplicate from the menu
 *
 * @param {clickToDuplicateCouponParams} params - The parameters for this event
 * @property {GUID} instanceId - in
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {GUID} couponId - guid
 * @return {LogObject<clickToDuplicateCouponParams>} LogObject<clickToDuplicateCouponParams>
 */
export function clickToDuplicateCoupon(params) {
    return {
        evid: 632,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'couponListRendered' event (evid: 633)
 *
 * Event description: when coupon list was rendered (not inside stores, for coupon tab rendered inside stores 10:212 event with page_name = 'coupons')
 *
 * @param {couponListRenderedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - what was the entry point for coupon tab : for now it is only managerApps
 * @property {GUID} userId - uuid
 * @property {string} type - empty_state / main
 * @property {string} relevant_verticals - What is installed on this site? who is Coupons relevant for {Stores/Bookings}
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<couponListRenderedParams>} LogObject<couponListRenderedParams>
 */
export function couponListRendered(params) {
    return {
        evid: 633,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotedCouponBm' event (evid: 712)
 *
 * Event description: User chooses a product / collection / coupon to promote
 *
 * @param {emailMarketingPromotedCouponBmParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - biToken
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} vertical - general | stores | bookings | music
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} couponType - coupon_type
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<emailMarketingPromotedCouponBmParams>} LogObject<emailMarketingPromotedCouponBmParams>
 */
export function emailMarketingPromotedCouponBm(params) {
    return {
        evid: 712,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotionModalRendered' event (evid: 715)
 *
 * Event description: Promotion modal rendered. Coupon Picker
 *
 * @param {emailMarketingPromotionModalRenderedParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - biToken
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {number} loadingTime - loading time from start
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} componentState - empty state / coupon picker
 * @property {string} type - general_coupon | free_shipping_coupon
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<emailMarketingPromotionModalRenderedParams>} LogObject<emailMarketingPromotionModalRenderedParams>
 */
export function emailMarketingPromotionModalRendered(params) {
    return {
        evid: 715,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'emailMarketingPromotionModalStartLoadingSm' event (evid: 717)
 *
 * Event description: After the merchant click on one of the templates.
 * the component start loading (Coupons Picker)
 *
 * @param {emailMarketingPromotionModalStartLoadingSmParams} params - The parameters for this event
 * @property {GUID} instanceId - instance_id
 * @property {GUID} biToken - biToken
 * @property {string} appName - app_name
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - email marketing tab/ product page/collection page/coupon created/coupon tab
 * @property {string} componentState - empty state / coupon picker
 * @property {string} type - general_coupon | free_shipping_coupon
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<emailMarketingPromotionModalStartLoadingSmParams>} LogObject<emailMarketingPromotionModalStartLoadingSmParams>
 */
export function emailMarketingPromotionModalStartLoadingSm(params) {
    return {
        evid: 717,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsClickOnCreateCouponInBulk' event (evid: 718)
 *
 * Event description: when client is coupons tab in BO and click on create coupons in tab.
 *
 * Only in that bulk coupons event the msid is the corect one. msid of the site and not the app
 *
 * Notice: In other bulk coupons app events use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid.
 *
 * @param {bulkCouponsClickOnCreateCouponInBulkParams} params - The parameters for this event
 * @property {GUID} instanceId - if null app not installed yet
 * @property {GUID} biToken - msid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} isMerchant - is_merchant
 * @property {string} destination - if app not installed client will be sent to app installation page
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsClickOnCreateCouponInBulkParams>} LogObject<bulkCouponsClickOnCreateCouponInBulkParams>
 */
export function bulkCouponsClickOnCreateCouponInBulk(params) {
    return {
        evid: 718,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsBulkCouponPageUpload' event (evid: 719)
 *
 * Event description: When bulk coupon page uploaded.
 * Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid.
 *
 * SELECT msid
 * FROM prod.verticals.apps_log
 * where instance_id = ' '
 *
 * @param {bulkCouponsBulkCouponPageUploadParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsBulkCouponPageUploadParams>} LogObject<bulkCouponsBulkCouponPageUploadParams>
 */
export function bulkCouponsBulkCouponPageUpload(params) {
    return {
        evid: 719,
        src: 86,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'bulkCouponsGenericNetworkError' event (evid: 720)
 *
 * Event description: When "Something went wrong page loaded".
 * Notice: In this event (and in all bulk coupons events) use instance_id and not msid in order to identify the site that performed the action. Use prod.verticals.apps_log table to get the site msid.
 *
 * SELECT msid
 * FROM prod.verticals.apps_log
 * where instance_id = ' '
 *
 * @param {bulkCouponsGenericNetworkErrorParams} params - The parameters for this event
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} appName - app name
 * @property {string} errorReason - error reason
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} couponId - coupon_id
 * @return {LogObject<bulkCouponsGenericNetworkErrorParams>} LogObject<bulkCouponsGenericNetworkErrorParams>
 */
export function bulkCouponsGenericNetworkError(params) {
    return {
        evid: 720,
        src: 86,
        endpoint: '',
        params
    };
}
//# sourceMappingURL=index.js.map