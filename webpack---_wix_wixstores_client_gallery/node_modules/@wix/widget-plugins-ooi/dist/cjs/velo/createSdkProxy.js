"use strict";

exports.__esModule = true;
exports.createSdkProxy = createSdkProxy;
var _utils = require("./utils");

function noop() {
    return createSdkProxy();
}

function createSdkProxy(slotContentSdk = {}) {
    const pluginType = slotContentSdk == null ? void 0 : slotContentSdk.type;
    switch (pluginType) {
        case '$w.CustomElementComponent':
            return new Proxy(slotContentSdk, {
                set: (sdk, propName, value) => {
                    if (typeof value !== 'function') {
                        sdk.setAttribute((0, _utils.camelToKebab)(propName), JSON.stringify(value));
                    }
                    sdk[propName] = value;
                    return true;
                },
                get: (sdk, propName) => {
                    if (propName === 'isMethodSupported') {
                        return () => false;
                    }
                    if (propName in sdk) {
                        return sdk[propName];
                    }
                    return noop;
                }
            });
        default:
            return new Proxy(slotContentSdk, {
                set: (sdk, propName, value) => {
                    if (propName in sdk) {
                        sdk[propName] = value;
                    }
                    return true;
                },
                get: (sdk, propName) => {
                    if (propName === 'isMethodSupported') {
                        return methodName => methodName in sdk;
                    }
                    if (propName in sdk) {
                        return sdk[propName];
                    }
                    return noop;
                }
            });
    }
}
//# sourceMappingURL=createSdkProxy.js.map