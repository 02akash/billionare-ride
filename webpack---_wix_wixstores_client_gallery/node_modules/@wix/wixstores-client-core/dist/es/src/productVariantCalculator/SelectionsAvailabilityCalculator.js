import {
    __assign,
    __read,
    __spreadArray,
    __values
} from "tslib";
import {
    memoize
} from 'lodash';
import {
    isProductVariantItemIsInStock,
} from './ProductVariantCalculator';
import {
    findProductItemBySelectionIds,
    getOptionBySelectionId,
    getProductOptionsSelectionIdsWithoutModifiers,
    getProductOptionsWithoutModifiers,
} from '../productOptions/productUtils';
export function composeCachedMethods(product) {
    var generateCacheKey = function(currProduct) {
        var _a;
        return JSON.stringify({
            id: currProduct.id,
            productItemsLength: (_a = currProduct.productItems.length) !== null && _a !== void 0 ? _a : 'no-product-items',
        });
    };
    var getNonModifiersOptions = memoize(function() {
        return getProductOptionsWithoutModifiers(product);
    }, function() {
        return generateCacheKey(product);
    });
    var getNonModifiersSelectionIds = memoize(function() {
        return getProductOptionsSelectionIdsWithoutModifiers(product);
    }, function() {
        return generateCacheKey(product);
    });
    var getAvailabilityItems = memoize(function(params) {
        return composeAvailabilityItems(params);
    });
    return {
        getNonModifiersOptions: getNonModifiersOptions,
        getNonModifiersSelectionIds: getNonModifiersSelectionIds,
        getAvailabilityItems: getAvailabilityItems,
    };
}
export function calcSelectionsAvailability(params) {
    var _a, _b, _c;
    var product = params.product,
        isRemoveModifiersSelectionIdsFromUserSelections = params.isRemoveModifiersSelectionIdsFromUserSelections;
    var cachedMethods = (_a = params.cachedMethods) !== null && _a !== void 0 ? _a : composeCachedMethods(product);
    var selectionIds = params.variantSelectionIds;
    if (isRemoveModifiersSelectionIdsFromUserSelections) {
        selectionIds = selectionIds.filter(function(id) {
            return cachedMethods.getNonModifiersSelectionIds().includes(id);
        });
    }
    return ((_c = (_b = product.options) === null || _b === void 0 ? void 0 : _b.reduce(function(result, option) {
        result[option.id] = calcSelectionAvailabilityByOption({
            product: product,
            isRemoveModifiersSelectionIdsFromUserSelections: isRemoveModifiersSelectionIdsFromUserSelections,
            optionId: option.id,
            option: option,
            variantSelectionIds: selectionIds,
            cachedMethods: cachedMethods,
        });
        return result;
    }, {})) !== null && _c !== void 0 ? _c : {});
}

function calcSelectionAvailabilityByOption(params) {
    var _a, _b, _c, _d;
    var product = params.product,
        optionId = params.optionId,
        isRemoveModifiersSelectionIdsFromUserSelections = params.isRemoveModifiersSelectionIdsFromUserSelections,
        option = params.option,
        cachedMethods = params.cachedMethods;
    var getNonModifiersOptions = cachedMethods.getNonModifiersOptions,
        getAvailabilityItems = cachedMethods.getAvailabilityItems;
    if (isRemoveModifiersSelectionIdsFromUserSelections) {
        var nonModifiersOptionIds = getNonModifiersOptions().map(function(currOption) {
            return currOption.id;
        });
        var isModifier = ((_a = product.productItems) === null || _a === void 0 ? void 0 : _a.length) && !nonModifiersOptionIds.includes(optionId);
        if (isModifier) {
            return (_b = option.selections) === null || _b === void 0 ? void 0 : _b.reduce(function(result, selection) {
                result[selection.id] = {
                    isVisible: true,
                    isSelectable: true,
                };
                return result;
            }, {});
        }
    }
    return ((_d = (_c = option.selections) === null || _c === void 0 ? void 0 : _c.reduce(function(result, selection) {
        var _a, _b, _c, _d;
        var isVisible;
        var isSelectable;
        if (!product.isManageProductItems) {
            isVisible = true;
            isSelectable = product.isInStock || !!((_a = product.inventory) === null || _a === void 0 ? void 0 : _a.availableForPreOrder);
        } else if (product.productItems.length === 0) {
            isVisible = (_b = selection.visible) !== null && _b !== void 0 ? _b : true;
            isSelectable = (_c = selection.inStock) !== null && _c !== void 0 ? _c : (!product.isTrackingInventory || !!((_d = product.inventory) === null || _d === void 0 ? void 0 : _d.availableForPreOrder));
        }
        if (typeof isVisible === 'undefined' || typeof isSelectable === 'undefined') {
            var nextSelections_1 = composeNextSelectionIds(__assign(__assign({}, params), {
                selectionId: selection.id
            }));
            var matchedAvailabilityItems = getAvailabilityItems(params).filter(function(item) {
                return nextSelections_1.every(function(selectionIdInItem) {
                    return item.selectionIds.includes(selectionIdInItem);
                });
            });
            isVisible = isVisible !== null && isVisible !== void 0 ? isVisible : matchedAvailabilityItems.some(function(item) {
                return item.isVisible;
            });
            isSelectable = isSelectable !== null && isSelectable !== void 0 ? isSelectable : matchedAvailabilityItems.some(function(item) {
                return item.isSelectable;
            });
        }
        result[selection.id] = {
            isVisible: isVisible,
            isSelectable: isSelectable,
        };
        return result;
    }, {})) !== null && _d !== void 0 ? _d : {});
}

function composeAllPossibleVariantSelectionIdCombos(productOptions) {
    var possibleVariants = [];

    function generateCombinationsRecursivly(currentCombination, optionIndex) {
        var e_1, _a;
        if (optionIndex === productOptions.length) {
            possibleVariants.push(__spreadArray([], __read(currentCombination), false));
            return;
        }
        try {
            for (var _b = __values(productOptions[optionIndex].selections), _c = _b.next(); !_c.done; _c = _b.next()) {
                var selection = _c.value;
                currentCombination[optionIndex] = selection.id;
                generateCombinationsRecursivly(currentCombination, optionIndex + 1);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
    }
    generateCombinationsRecursivly([], 0);
    return possibleVariants;
}

function composeAvailabilityItems(_a) {
    var product = _a.product,
        cachedMethods = _a.cachedMethods,
        isRemoveModifiersSelectionIdsFromUserSelections = _a.isRemoveModifiersSelectionIdsFromUserSelections;
    var options = isRemoveModifiersSelectionIdsFromUserSelections ?
        cachedMethods.getNonModifiersOptions() :
        product.options;
    var isTrackingInventoryByVariant = product.productItems[0].isTrackingInventory !== undefined;
    return composeAllPossibleVariantSelectionIdCombos(options).map(function(selectionIds) {
        var _a;
        var productItem = findProductItemBySelectionIds({
            product: product,
            selectionIds: selectionIds
        });
        if (!productItem) {
            return {
                selectionIds: selectionIds,
                isVisible: !isTrackingInventoryByVariant,
                isSelectable: !product.isTrackingInventory || ((_a = product.inventory) === null || _a === void 0 ? void 0 : _a.availableForPreOrder),
            };
        }
        return {
            selectionIds: selectionIds,
            isSelectable: isProductVariantItemIsInStock({
                product: product,
                productItem: productItem
            }),
            isVisible: productItem.isVisible,
        };
    });
}

function filterOutSelectionIdsByOptionId(_a) {
    var product = _a.product,
        selectionIds = _a.selectionIds,
        optionId = _a.optionId;
    var blockList = product.options.find(function(o) {
        return o.id === optionId;
    }).selections.map(function(s) {
        return s.id;
    });
    return selectionIds.filter(function(id) {
        return !blockList.includes(id);
    });
}

function composeNextSelectionIds(params) {
    var product = params.product,
        selectionId = params.selectionId,
        variantSelectionIds = params.variantSelectionIds;
    var optionIdToFilter = getOptionBySelectionId({
        product: product,
        selectionId: selectionId
    }).id;
    var filteredSelectionIds = filterOutSelectionIdsByOptionId({
        selectionIds: variantSelectionIds,
        product: product,
        optionId: optionIdToFilter,
    });
    return __spreadArray([selectionId], __read(filteredSelectionIds), false);
}
//# sourceMappingURL=SelectionsAvailabilityCalculator.js.map