import {
    __assign,
    __read,
    __spreadArray
} from "tslib";
import {
    getProductOptionsWithoutModifiers
} from '../productOptions/productUtils';
import {
    isProductVariantItemIsInStock,
} from './ProductVariantCalculator';
export function calcSelectionsAvailability(params) {
    var _a, _b;
    var product = params.product;
    return ((_b = (_a = product.options) === null || _a === void 0 ? void 0 : _a.reduce(function(result, option) {
        var _a;
        return (__assign(__assign({}, result), (_a = {}, _a[option.id] = calcSelectionAvailabilityByOption(__assign(__assign({}, params), {
            optionId: option.id
        })), _a)));
    }, {})) !== null && _b !== void 0 ? _b : {});
}
export function calcSelectionAvailabilityByOption(params) {
    var _a, _b, _c, _d;
    var product = params.product,
        optionId = params.optionId,
        isRemoveModifiersSelectionIdsFromUserSelections = params.isRemoveModifiersSelectionIdsFromUserSelections;
    var option = product.options.find(function(o) {
        return o.id === optionId;
    });
    if (isRemoveModifiersSelectionIdsFromUserSelections) {
        var productOptionsWithoutModifiersIds = getProductOptionsWithoutModifiers(product).map(function(currOption) {
            return currOption.id;
        });
        var isModifier = ((_a = product.productItems) === null || _a === void 0 ? void 0 : _a.length) && !productOptionsWithoutModifiersIds.includes(optionId);
        if (isModifier) {
            return (_b = option.selections) === null || _b === void 0 ? void 0 : _b.reduce(function(result, selection) {
                var _a;
                return (__assign(__assign({}, result), (_a = {}, _a[selection.id] = {
                    isVisible: true,
                    isSelectable: true,
                }, _a)));
            }, {});
        }
    }
    return ((_d = (_c = option.selections) === null || _c === void 0 ? void 0 : _c.reduce(function(result, selection) {
        var _a;
        var _b, _c;
        var isVisible;
        var isSelectable;
        if (!product.isManageProductItems) {
            isVisible = true;
            isSelectable = product.isInStock || !!((_b = product.inventory) === null || _b === void 0 ? void 0 : _b.availableForPreOrder);
        } else if (product.productItems.length === 0) {
            isVisible = true;
            isSelectable = !product.isTrackingInventory || !!((_c = product.inventory) === null || _c === void 0 ? void 0 : _c.availableForPreOrder);
        }
        if (typeof isVisible === 'undefined' || typeof isSelectable === 'undefined') {
            var nextSelections_1 = composeNextSelectionIds(__assign(__assign({}, params), {
                selectionId: selection.id
            }));
            var matchedAvailabilityItems = composeProductItemsAvailability(product).filter(function(item) {
                return nextSelections_1.every(function(selectionIdInItem) {
                    return item.selectionIds.includes(selectionIdInItem);
                });
            });
            isVisible = isVisible !== null && isVisible !== void 0 ? isVisible : matchedAvailabilityItems.some(function(item) {
                return item.isVisible;
            });
            isSelectable = isSelectable !== null && isSelectable !== void 0 ? isSelectable : matchedAvailabilityItems.some(function(item) {
                return item.isSelectable;
            });
        }
        return __assign(__assign({}, result), (_a = {}, _a[selection.id] = {
            isVisible: isVisible,
            isSelectable: isSelectable,
        }, _a));
    }, {})) !== null && _d !== void 0 ? _d : {});
}

function filterOutSelectionIdsByOptionId(_a) {
    var product = _a.product,
        selectionIds = _a.selectionIds,
        optionId = _a.optionId;
    var blockList = product.options.find(function(o) {
        return o.id === optionId;
    }).selections.map(function(s) {
        return s.id;
    });
    return selectionIds.filter(function(id) {
        return !blockList.includes(id);
    });
}

function getOptionBySelectionId(_a) {
    var product = _a.product,
        selectionId = _a.selectionId;
    return product.options.find(function(option) {
        return option.selections.some(function(selection) {
            return selection.id === selectionId;
        });
    });
}

function composeAllPossibleVariantSelectionIdCombos(product) {
    var possibleVariants = [];
    var selectionIndexes = Array(product.options.length).fill(0);
    possibleVariants.push(product.options.map(function(option, optionIndex) {
        return option.selections[selectionIndexes[optionIndex]].id;
    }));
    while (!selectionIndexes.every(function(selectionIndex, optionIndex) {
            return selectionIndex + 1 === product.options[optionIndex].selections.length;
        })) {
        selectionIndexes.some(function(selectionIndex, optionIndex) {
            var isNotLastSelection = selectionIndex + 1 < product.options[optionIndex].selections.length;
            if (isNotLastSelection) {
                for (var optionIndexToReset = 0; optionIndexToReset < optionIndex; optionIndexToReset += 1) {
                    selectionIndexes[optionIndexToReset] = 0;
                }
                selectionIndexes[optionIndex] += 1;
            }
            return isNotLastSelection;
        });
        possibleVariants.push(product.options.map(function(option, optionIndex) {
            return option.selections[selectionIndexes[optionIndex]].id;
        }));
    }
    return possibleVariants;
}
export function composeProductItemsAvailability(product) {
    return composeAllPossibleVariantSelectionIdCombos(product).map(function(selectionIds) {
        var _a;
        var productItem = findProductItemBySelectionIds({
            product: product,
            selectionIds: selectionIds
        });
        if (!productItem) {
            return {
                selectionIds: selectionIds,
                isVisible: true,
                isSelectable: !product.isTrackingInventory || ((_a = product.inventory) === null || _a === void 0 ? void 0 : _a.availableForPreOrder),
            };
        }
        return {
            selectionIds: selectionIds,
            isSelectable: isProductVariantItemIsInStock({
                product: product,
                productItem: productItem
            }),
            isVisible: productItem.isVisible,
        };
    });
}

function findProductItemBySelectionIds(_a) {
    var product = _a.product,
        selectionIds = _a.selectionIds;
    return product.productItems.find(function(productItem) {
        return productItem.optionsSelections.every(function(selectionIdInItem) {
            return selectionIds.includes(selectionIdInItem);
        });
    });
}

function composeNextSelectionIds(params) {
    var product = params.product,
        selectionId = params.selectionId,
        variantSelectionIds = params.variantSelectionIds;
    return __spreadArray([
        selectionId
    ], __read(filterOutSelectionIdsByOptionId({
        product: product,
        selectionIds: variantSelectionIds,
        optionId: getOptionBySelectionId({
            product: product,
            selectionId: selectionId,
        }).id,
    })), false);
}
//# sourceMappingURL=SelectionsAvailabilityCalculator.legacy.js.map