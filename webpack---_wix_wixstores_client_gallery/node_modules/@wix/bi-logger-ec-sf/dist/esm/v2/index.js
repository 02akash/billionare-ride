/**
 * A function to create a log object for the 'productAddedToCartSf' event (evid: 1052)
 *
 * Event description: Product Added To Cart SF
 *
 * @param {productAddedToCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} quantity - number of quantity added to cart in the specific product
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {string} product_id - product_guid
 * @property {number} num_items - total # of quantity (for all products) in cart after adding the product to cart
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<productAddedToCartSfParams>} LogObject<productAddedToCartSfParams>
 */
export function productAddedToCartSf(params) {
    return {
        evid: 1052,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnProductBoxSf' event (evid: 11)
 *
 * Event description: sent from web from product gallery. also since june 2019 started to be sent from OneApp Store Front (member view)
 *
 * @param {clickOnProductBoxSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {boolean} hasRibbon - has_ribbon
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} impressionId - impression_id
 * @property {GUID} owner_id - owner_id
 * @property {number} rank - rank
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductBoxSfParams>} LogObject<clickOnProductBoxSfParams>
 */
export function clickOnProductBoxSf(params) {
    return {
        evid: 11,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartCreatedSf' event (evid: 1101)
 *
 * Event description: Cart Created SF
 *
 * @param {cartCreatedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartCreatedSfParams>} LogObject<cartCreatedSfParams>
 */
export function cartCreatedSf(params) {
    return {
        evid: 1101,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnApplyPromotionalCodeSf' event (evid: 111)
 *
 * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view)
 *
 * @param {clickOnApplyPromotionalCodeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} cartId - cart_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnApplyPromotionalCodeSfParams>} LogObject<clickOnApplyPromotionalCodeSfParams>
 */
export function clickOnApplyPromotionalCodeSf(params) {
    return {
        evid: 111,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'couponAppliedSfSrc10Evid112' event (evid: 112)
 *
 * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront
 *
 * @param {couponAppliedSfSrc10Evid112Params} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<couponAppliedSfSrc10Evid112Params>} LogObject<couponAppliedSfSrc10Evid112Params>
 */
export function couponAppliedSfSrc10Evid112(params) {
    return {
        evid: 112,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutWithEWalletSf' event (evid: 113)
 *
 * Event description: buyer clicks on checkout with e-wallwt in cart page
 *
 * @param {clickOnCheckoutWithEWalletSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {string} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} user_agent - user_agent
 * @property {boolean} preOrder - pre_order
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {string} type - e-wallet type
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @return {LogObject<clickOnCheckoutWithEWalletSfParams>} LogObject<clickOnCheckoutWithEWalletSfParams>
 */
export function clickOnCheckoutWithEWalletSf(params) {
    return {
        evid: 113,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutSf' event (evid: 114)
 *
 * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'
 *
 * @param {clickOnCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping (=shipping & local delivery) /store pickup / none (when digital product)
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @return {LogObject<clickOnCheckoutSfParams>} LogObject<clickOnCheckoutSfParams>
 */
export function clickOnCheckoutSf(params) {
    return {
        evid: 114,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'removedProductFromCartSf' event (evid: 115)
 *
 * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view). Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {removedProductFromCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<removedProductFromCartSfParams>} LogObject<removedProductFromCartSfParams>
 */
export function removedProductFromCartSf(params) {
    return {
        evid: 115,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'updatedCartItemQuantitySf' event (evid: 116)
 *
 * Event description: Sent for Ecom (with catalog_app_id) here for the mini cart flow (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {updatedCartItemQuantitySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<updatedCartItemQuantitySfParams>} LogObject<updatedCartItemQuantitySfParams>
 */
export function updatedCartItemQuantitySf(params) {
    return {
        evid: 116,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorWhenApplyingACouponSf' event (evid: 117)
 *
 * Event description: Error when applying a coupon SF.
 *
 * @param {errorWhenApplyingACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} errorCode - dsc
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorWhenApplyingACouponSfParams>} LogObject<errorWhenApplyingACouponSfParams>
 */
export function errorWhenApplyingACouponSf(params) {
    return {
        evid: 117,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'removeACouponSf' event (evid: 118)
 *
 * Event description: Remove a coupon SF.
 *
 * @param {removeACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<removeACouponSfParams>} LogObject<removeACouponSfParams>
 */
export function removeACouponSf(params) {
    return {
        evid: 118,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'applyACouponSf' event (evid: 119)
 *
 * Event description: Coupon applied SF.
 *
 * @param {applyACouponSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {number} total_long - total_long
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} name - name
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {number} total - total_long
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} type - type
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<applyACouponSfParams>} LogObject<applyACouponSfParams>
 */
export function applyACouponSf(params) {
    return {
        evid: 119,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickedOnProductQuickViewSf' event (evid: 12)
 *
 * Event description: Clicked on product quick view SF.
 *
 * @param {clickedOnProductQuickViewSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {boolean} hasRibbon - has_ribbon
 * @property {string} appName - app_name
 * @property {GUID} impressionId - impression_id
 * @property {number} rank - rank
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickedOnProductQuickViewSfParams>} LogObject<clickedOnProductQuickViewSfParams>
 */
export function clickedOnProductQuickViewSf(params) {
    return {
        evid: 12,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartClickOnContinueShoppingSf' event (evid: 120)
 *
 * Event description: cart - click on continue shopping
 *
 * @param {cartClickOnContinueShoppingSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - only in minimum order modal in checkout - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - null (from checkout page) / Minimum_order_cart / minimum_order_checkout/ shopping cart
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartClickOnContinueShoppingSfParams>} LogObject<cartClickOnContinueShoppingSfParams>
 */
export function cartClickOnContinueShoppingSf(params) {
    return {
        evid: 120,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAddNoteToSellerSf' event (evid: 121)
 *
 * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickOnAddNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddNoteToSellerSfParams>} LogObject<clickOnAddNoteToSellerSfParams>
 */
export function clickOnAddNoteToSellerSf(params) {
    return {
        evid: 121,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'saveNoteToSellerSf' event (evid: 122)
 *
 * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {saveNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {boolean} is_empty - is text field empty
 * @return {LogObject<saveNoteToSellerSfParams>} LogObject<saveNoteToSellerSfParams>
 */
export function saveNoteToSellerSf(params) {
    return {
        evid: 122,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'deleteNoteToSellerSf' event (evid: 123)
 *
 * Event description: buyer clicks on 'delete note to seller' in cart page
 *
 * @param {deleteNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<deleteNoteToSellerSfParams>} LogObject<deleteNoteToSellerSfParams>
 */
export function deleteNoteToSellerSf(params) {
    return {
        evid: 123,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewCartPageSf' event (evid: 124)
 *
 * Event description: view cart page. since june 2019 also for OneApp Store front
 *
 * @param {viewCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {GUID} visitorId - visitorId
 * @property {string} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} isContinueShopping - is_continue_shopping_link
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {boolean} isFullWidth - is_full_width
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_promo_code - is_promo_code
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 * @property {string} checkoutType - checkout_type
 * @property {boolean} isShippingCalculated - is_shipping_calculated
 * @property {boolean} isTaxCosts - is_tax_costs
 * @property {number} lineItemsCount - num_line_items
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {boolean} is_note - is_note
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {boolean} isDeliveryRates - is_delivery_rates
 * @property {boolean} isPickupAvailable - is_pickup_available
 * @property {GUID} checkoutId - checkout_id
 * @property {string} shippingReason - shipping_reason
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<viewCartPageSfParams>} LogObject<viewCartPageSfParams>
 */
export function viewCartPageSf(params) {
    return {
        evid: 124,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'updateClickedInSelectYourShippingDestinationPopupSf' event (evid: 125)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation
 *
 * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} hasZipCode - has_zip_code
 * @property {string} shippingDestinationState - shipping_destination_state
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {string} shippingDestinationCountry - shipping_destination_country
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function updateClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 125,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'cancelClickedInSelectYourShippingDestinationPopupSf' event (evid: 126)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked
 *
 * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function cancelClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 126,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewOrderHistoryPageSf' event (evid: 127)
 *
 * Event description: view order history page (when it is with orders or without)
 *
 * @param {viewOrderHistoryPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact id
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewOrderHistoryPageSfParams>} LogObject<viewOrderHistoryPageSfParams>
 */
export function viewOrderHistoryPageSf(params) {
    return {
        evid: 127,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewOrderDetailsPageSf' event (evid: 128)
 *
 * Event description: view order details in order history page
 *
 * @param {viewOrderDetailsPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {number} itemsCount - number of items in the order
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order_page
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewOrderDetailsPageSfParams>} LogObject<viewOrderDetailsPageSfParams>
 */
export function viewOrderDetailsPageSf(params) {
    return {
        evid: 128,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickInOrderHistoryPageSf' event (evid: 129)
 *
 * Event description: UoU clicks that are coming from the order_history page
 *
 * @param {clickInOrderHistoryPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - instance id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} orderId - order id, in case we have it (in track order, view invoice)
 * @property {string} click_type - go_shopping / track_order / download / view_invoice
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - order_history_page / order_details_page
 * @property {string} productId - product_guid
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInOrderHistoryPageSfParams>} LogObject<clickInOrderHistoryPageSfParams>
 */
export function clickInOrderHistoryPageSf(params) {
    return {
        evid: 129,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'sortGallerySf' event (evid: 13)
 *
 * Event description: Sort gallery SF.
 *
 * @param {sortGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} method - price / newest / name
 * @property {string} sortDir - sort_order
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<sortGallerySfParams>} LogObject<sortGallerySfParams>
 */
export function sortGallerySf(params) {
    return {
        evid: 13,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToViewCartPageSf' event (evid: 130)
 *
 * Event description: click to view cart page. since june 2019 also for OneApp Store front. mini cart flor - sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 *
 * @param {clickToViewCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {boolean} isNavigateCart - hardcoded true -> for Anodot
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - add to cart / mini cart / cart widget / checkout...
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewCartPageSfParams>} LogObject<clickToViewCartPageSfParams>
 */
export function clickToViewCartPageSf(params) {
    return {
        evid: 130,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'galleryClickSortBy' event (evid: 139)
 *
 * Event description: When the user clicks the sort by button (mobile) / dropdown (desktop)
 *
 * @param {galleryClickSortByParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickSortByParams>} LogObject<galleryClickSortByParams>
 */
export function galleryClickSortBy(params) {
    return {
        evid: 139,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickLoadMoreInGallerySf' event (evid: 14)
 *
 * Event description: when a buyer clicks to view more products in the gallery (load more/next page/ etc.)
 *
 * @param {clickLoadMoreInGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} categoryId - category_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - type
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickLoadMoreInGallerySfParams>} LogObject<clickLoadMoreInGallerySfParams>
 */
export function clickLoadMoreInGallerySf(params) {
    return {
        evid: 14,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'galleryClickFilter' event (evid: 140)
 *
 * Event description: When a visitor clicks "Filter" in mobile only!
 *
 * @param {galleryClickFilterParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickFilterParams>} LogObject<galleryClickFilterParams>
 */
export function galleryClickFilter(params) {
    return {
        evid: 140,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'galleryClickApplyFilter' event (evid: 141)
 *
 * Event description: When a visitor clicks "Apply Filter" in mobile only! after he choose the filters
 *
 * @param {galleryClickApplyFilterParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} filterTypes - list of the filter types changed
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickApplyFilterParams>} LogObject<galleryClickApplyFilterParams>
 */
export function galleryClickApplyFilter(params) {
    return {
        evid: 141,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'galleryClickClearAllFilters' event (evid: 142)
 *
 * Event description: When a visitor clicks "Clear All" in mobile only! after he in the filters view
 *
 * @param {galleryClickClearAllFiltersParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<galleryClickClearAllFiltersParams>} LogObject<galleryClickClearAllFiltersParams>
 */
export function galleryClickClearAllFilters(params) {
    return {
        evid: 142,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToChangeGalleryFiltersSf' event (evid: 147)
 *
 * Event description: When a visitor changes one of the gallery filters
 *
 * @param {clickToChangeGalleryFiltersSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} filterType - relevant filter type (color, collection, etc...)
 * @property {string} appName - app
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToChangeGalleryFiltersSfParams>} LogObject<clickToChangeGalleryFiltersSfParams>
 */
export function clickToChangeGalleryFiltersSf(params) {
    return {
        evid: 147,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'chooseLogicForSliderGalleryOnComponentSettingsSfe' event (evid: 148)
 *
 * Event description: click on one of the radio buttons to choose which logic to display in the slider gallery
 *
 * @param {chooseLogicForSliderGalleryOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} algorithmId - algorithm_id
 * @property {string} appName - app_name
 * @property {GUID} algorithmProviderId - algorithm_provider_id
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page
 * @property {string} value - related products / collections
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseLogicForSliderGalleryOnComponentSettingsSfeParams>} LogObject<chooseLogicForSliderGalleryOnComponentSettingsSfeParams>
 */
export function chooseLogicForSliderGalleryOnComponentSettingsSfe(params) {
    return {
        evid: 148,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'productGalleryResizeSf' event (evid: 15)
 *
 * Event description: product Gallery Resize SF.
 *
 * @param {productGalleryResizeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} categoryId - category_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {number} newGalleryWidth - width
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<productGalleryResizeSfParams>} LogObject<productGalleryResizeSfParams>
 */
export function productGalleryResizeSf(params) {
    return {
        evid: 15,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnBackToPaypalSf' event (evid: 160)
 *
 * Event description: buyer clicks on 'back to PayPal' in shipping screen in checkout
 *
 * @param {clickOnBackToPaypalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping method that the visitor choose in the cart - free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup (the same strings as in 163 event)
 * @property {string} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBackToPaypalSfParams>} LogObject<clickOnBackToPaypalSfParams>
 */
export function clickOnBackToPaypalSf(params) {
    return {
        evid: 160,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'shippingAddressSetSf' event (evid: 161)
 *
 * Event description: Shipping address set SF. since june 2019 is also sentt from OneApp (origin =OA StoreFront)
 *
 * @param {shippingAddressSetSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<shippingAddressSetSfParams>} LogObject<shippingAddressSetSfParams>
 */
export function shippingAddressSetSf(params) {
    return {
        evid: 161,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnContinueToPaymentSf' event (evid: 163)
 *
 * Event description: Click on continue to payment SF (on web) since june 2019 also sent from OneApp (leads to "Review Oreder" (placeOrder) screen)
 *
 * @param {clickOnContinueToPaymentSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} orig_shipping_method - the shipping choice the buyer did in the cart
 * @property {number} optionscount - number of delivery methods from which buyer choosed
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} selectedoptiontype - type
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} methodType - pickup/not pickup
 * @property {string} origin - origin
 * @property {number} selectedoptionindex - index
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {string} shippingRuleOptions - shipping method type- free shipping/ Flat rate/ rate by weight/ rate by order price/store pickup / local delivery
 * @return {LogObject<clickOnContinueToPaymentSfParams>} LogObject<clickOnContinueToPaymentSfParams>
 */
export function clickOnContinueToPaymentSf(params) {
    return {
        evid: 163,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showMerchantPaymentPopupSf' event (evid: 164)
 *
 * Event description: Show merchant payment popup SF.
 *
 * @param {showMerchantPaymentPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {GUID} bi_token - msid
 * @return {LogObject<showMerchantPaymentPopupSfParams>} LogObject<showMerchantPaymentPopupSfParams>
 */
export function showMerchantPaymentPopupSf(params) {
    return {
        evid: 164,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showMerchantUpgradePopupSf' event (evid: 165)
 *
 * Event description: Show merchant upgrade popup SF.
 *
 * @param {showMerchantUpgradePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {GUID} bi_token - msid
 * @return {LogObject<showMerchantUpgradePopupSfParams>} LogObject<showMerchantUpgradePopupSfParams>
 */
export function showMerchantUpgradePopupSf(params) {
    return {
        evid: 165,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickNoThanksOnMerchantUpgradePopupSf' event (evid: 166)
 *
 * Event description: When the store owner clicks to continue to checkout to place a test order, in upgrade popup in the live site
 *
 * @param {clickNoThanksOnMerchantUpgradePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickNoThanksOnMerchantUpgradePopupSfParams>} LogObject<clickNoThanksOnMerchantUpgradePopupSfParams>
 */
export function clickNoThanksOnMerchantUpgradePopupSf(params) {
    return {
        evid: 166,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'placeOrderSf' event (evid: 168)
 *
 * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay)
 *
 * @param {placeOrderSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardCode - gift_card_code
 * @property {GUID} giftCardId - gift_card_id
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - fast flow / quick flow
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {GUID} uuid - uuid
 * @property {string} paymentMethod - paymentMethod
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} hasCustomField - true - if order was placed with filled custom field
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} numOfLineItems - num_of_line_items
 * @property {boolean} is_member - is_memebr
 * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
 * @property {boolean} hasPaymentMethod - true / false
 * @property {string} origin - origin
 * @property {boolean} isPremium - true / false
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<placeOrderSfParams>} LogObject<placeOrderSfParams>
 */
export function placeOrderSf(params) {
    return {
        evid: 168,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCallToActionInMerchantPopUpSf' event (evid: 169)
 *
 * Event description: click on call to action (upgrade / set payment) in merchant pop-up
 *
 * @param {clickOnCallToActionInMerchantPopUpSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} notificationType - payments/upgrade/shipping
 * @property {string} notification_type - payments/upgrade/shipping
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCallToActionInMerchantPopUpSfParams>} LogObject<clickOnCallToActionInMerchantPopUpSfParams>
 */
export function clickOnCallToActionInMerchantPopUpSf(params) {
    return {
        evid: 169,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewStorePageSf' event (evid: 17)
 *
 * Event description: view store page in viewer
 *
 * @param {viewStorePageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} pageId - page name - thank you page / product page...
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewStorePageSfParams>} LogObject<viewStorePageSfParams>
 */
export function viewStorePageSf(params) {
    return {
        evid: 17,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnBackInCheckoutProcessSf' event (evid: 170)
 *
 * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp
 *
 * @param {clickOnBackInCheckoutProcessSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - delivery options, payment
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnBackInCheckoutProcessSfParams>} LogObject<clickOnBackInCheckoutProcessSfParams>
 */
export function clickOnBackInCheckoutProcessSf(params) {
    return {
        evid: 170,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnEditCartSf' event (evid: 171)
 *
 * Event description: click on edit cart button in checkout process
 *
 * @param {clickOnEditCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - page in checkout (delivery, payment...)
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditCartSfParams>} LogObject<clickOnEditCartSfParams>
 */
export function clickOnEditCartSf(params) {
    return {
        evid: 171,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showShippingPopupSf' event (evid: 173)
 *
 * Event description: Show shipping popup - no shipping rule for destination
 *
 * @param {showShippingPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - origin
 * @property {string} mode - mode
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} bi_token - msid
 * @return {LogObject<showShippingPopupSfParams>} LogObject<showShippingPopupSfParams>
 */
export function showShippingPopupSf(params) {
    return {
        evid: 173,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageLoadSf' event (evid: 174)
 *
 * Event description: this event indicates witch "thank you page" was presented to the user. there are 10 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical) 2.paymentMethodType : online/offline 3. shipping method : shipping /store pickup / non.
 *
 * @param {thankYouPageLoadSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} paymentMethodType - online/offline
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {number} numOfLineItems - num_of_line_items
 * @property {string} payment_status - payment_status
 * @property {string} origin - origin
 * @property {string} paymentProvider - payment provider (paypal, strip....)
 * @property {string} shippingMethodType - shipping /store pickup / non
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageLoadSfParams>} LogObject<thankYouPageLoadSfParams>
 */
export function thankYouPageLoadSf(params) {
    return {
        evid: 174,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageDownloadFileClickedSf' event (evid: 175)
 *
 * Event description: buyer clicked on download file  in Thank you page
 *
 * @param {thankYouPageDownloadFileClickedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageDownloadFileClickedSfParams>} LogObject<thankYouPageDownloadFileClickedSfParams>
 */
export function thankYouPageDownloadFileClickedSf(params) {
    return {
        evid: 175,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageContinueShoppingClickedSf' event (evid: 176)
 *
 * Event description: buyer clicked on download file  in Thank you page
 *
 * @param {thankYouPageContinueShoppingClickedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<thankYouPageContinueShoppingClickedSfParams>} LogObject<thankYouPageContinueShoppingClickedSfParams>
 */
export function thankYouPageContinueShoppingClickedSf(params) {
    return {
        evid: 176,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'paymentDetailsCompletedSf' event (evid: 177)
 *
 * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {paymentDetailsCompletedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {number} optionscount - number of payment options
 * @property {GUID} cartId - cartid
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appname
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} paymentProvider - payment provider that was chosen
 * @property {number} selectedoptionindex - index of selected option
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<paymentDetailsCompletedSfParams>} LogObject<paymentDetailsCompletedSfParams>
 */
export function paymentDetailsCompletedSf(params) {
    return {
        evid: 177,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewStorePageInEditor' event (evid: 18)
 *
 * Event description: view store page in editor / preview
 *
 * @param {viewStorePageInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} pageId - page name - thank you page / product page...
 * @property {string} origin - editor / preview
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewStorePageInEditorParams>} LogObject<viewStorePageInEditorParams>
 */
export function viewStorePageInEditor(params) {
    return {
        evid: 18,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorInAddProductToCartOneAppStoreFront' event (evid: 183)
 *
 * Event description: when buyer clicked "Add to Cart" in product page but it doesn't work because buyer didn't selected product option / custom field / product with this product options is out of stock (if the quantity of selected)
 *
 * @param {errorInAddProductToCartOneAppStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} field - list of invalid fields (comma delimited) from quantity / product_options / custom_field
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {string} message - validation error
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorInAddProductToCartOneAppStoreFrontParams>} LogObject<errorInAddProductToCartOneAppStoreFrontParams>
 */
export function errorInAddProductToCartOneAppStoreFront(params) {
    return {
        evid: 183,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'oneAppStoreFrontClearCartSf' event (evid: 184)
 *
 * Event description: buyer cleared cart (in cart page from 3dots menu) after it the cart becomes innactive (will get neww cart_id)
 *
 * @param {oneAppStoreFrontClearCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - # of products in cart
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true  - for merchant false for member
 * @property {GUID} bi_token - msid
 * @return {LogObject<oneAppStoreFrontClearCartSfParams>} LogObject<oneAppStoreFrontClearCartSfParams>
 */
export function oneAppStoreFrontClearCartSf(params) {
    return {
        evid: 184,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickManageProductInCartOaStoreFront' event (evid: 185)
 *
 * Event description: wneh buyer in StoreFront (member view) clicks on Product name in cart (leads to open Manage Product popup)
 *
 * @param {clickManageProductInCartOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - cart_type
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner and false for member
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickManageProductInCartOaStoreFrontParams>} LogObject<clickManageProductInCartOaStoreFrontParams>
 */
export function clickManageProductInCartOaStoreFront(params) {
    return {
        evid: 185,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnViewItemsInReviewOrderScreenOaStoreFront' event (evid: 186)
 *
 * Event description: buyer in OneApp StoreFront (member view) in checkout on review order (place order in other words) stage clicks on View items(leads to open "Your items" screen - entry point to edit cart)
 *
 * @param {clickOnViewItemsInReviewOrderScreenOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnViewItemsInReviewOrderScreenOaStoreFrontParams>} LogObject<clickOnViewItemsInReviewOrderScreenOaStoreFrontParams>
 */
export function clickOnViewItemsInReviewOrderScreenOaStoreFront(params) {
    return {
        evid: 186,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnMyOrdersInThankYouPageOaStoreFront' event (evid: 187)
 *
 * Event description: in One App Sore Front )member view)  Thank you page buyer clicked My Orders (leads to open My Orders screen)
 *
 * @param {clickOnMyOrdersInThankYouPageOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>} LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>
 */
export function clickOnMyOrdersInThankYouPageOaStoreFront(params) {
    return {
        evid: 187,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickTrackOrderInMyOrderOaStoreFront' event (evid: 188)
 *
 * Event description: in MyOrder OA StoreFront buyer (member) can click on "Track order" if merchant already added tracking # (with appropriate link)
 *
 * @param {clickTrackOrderInMyOrderOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickTrackOrderInMyOrderOaStoreFrontParams>} LogObject<clickTrackOrderInMyOrderOaStoreFrontParams>
 */
export function clickTrackOrderInMyOrderOaStoreFront(params) {
    return {
        evid: 188,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'storeFrontPopupShownClckedOa' event (evid: 189)
 *
 * Event description: Merchant saw/ clicked on StoreFront popup (in MemberView)  . shown only for one time - first entering Store OA
 *
 * @param {storeFrontPopupShownClckedOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - shown / clicked
 * @property {GUID} bi_token - msid
 * @return {LogObject<storeFrontPopupShownClckedOaParams>} LogObject<storeFrontPopupShownClckedOaParams>
 */
export function storeFrontPopupShownClckedOa(params) {
    return {
        evid: 189,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnChangeLinkInSettingsSfe' event (evid: 196)
 *
 * Event description: when the user click on the change link in the settings of the cart or the thank you page / my orders
 *
 * @param {clickOnChangeLinkInSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {string} element - continue shopping / empty state / back to store
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - current navigation link
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnChangeLinkInSettingsSfeParams>} LogObject<clickOnChangeLinkInSettingsSfeParams>
 */
export function clickOnChangeLinkInSettingsSfe(params) {
    return {
        evid: 196,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'linkChangedInSettingsSfe' event (evid: 197)
 *
 * Event description: when the link changed in the settings of the cart or the thank you page / my orders
 *
 * @param {linkChangedInSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {string} element - continue shopping / empty state / back to store
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} link - new link changed
 * @property {string} component_id - thank you page / cart page / my orders
 * @property {string} value - deprecated
 * @property {GUID} bi_token - msid
 * @return {LogObject<linkChangedInSettingsSfeParams>} LogObject<linkChangedInSettingsSfeParams>
 */
export function linkChangedInSettingsSfe(params) {
    return {
        evid: 197,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'selectPaymentCategorySfCashier' event (evid: 200)
 *
 * Event description: Select payment category SF cashier - select radio button
 *
 * @param {selectPaymentCategorySfCashierParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} paymentCategory - CreditCard/Ewallet
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {string} user_agent - user_agent
 * @property {GUID} app_instance_id - store_Id
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectPaymentCategorySfCashierParams>} LogObject<selectPaymentCategorySfCashierParams>
 */
export function selectPaymentCategorySfCashier(params) {
    return {
        evid: 200,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartWidgetLoadedSf' event (evid: 211)
 *
 * Event description: Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 * This bi is being sent when there is loading of page that has mini cart on it (in every loading of the page, even if the mini cart was not opened)
 *
 * @param {cartWidgetLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - fucj
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @property {string} cartId - cart_id. Note this field was implemented in July 24
 * @return {LogObject<cartWidgetLoadedSfParams>} LogObject<cartWidgetLoadedSfParams>
 */
export function cartWidgetLoadedSf(params) {
    return {
        evid: 211,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'selectShippingMethodFromTheDropdownInCartPageSf' event (evid: 222)
 *
 * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {selectShippingMethodFromTheDropdownInCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} cartId - cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - appName
 * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page  (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<selectShippingMethodFromTheDropdownInCartPageSfParams>} LogObject<selectShippingMethodFromTheDropdownInCartPageSfParams>
 */
export function selectShippingMethodFromTheDropdownInCartPageSf(params) {
    return {
        evid: 222,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingDestinationInCartPageSf' event (evid: 223)
 *
 * Event description: When a visitor clicks to change the shipping destination on the cart page
 *
 * @param {clickOnShippingDestinationInCartPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} state - empty / full
 * @property {string} cartType - cart_type
 * @property {string} appName - appName
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} shippingDestinationState - shipping_destination_state
 * @property {string} shippingDestinationCountry - shipping_destination_country
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnShippingDestinationInCartPageSfParams>} LogObject<clickOnShippingDestinationInCartPageSfParams>
 */
export function clickOnShippingDestinationInCartPageSf(params) {
    return {
        evid: 223,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewEWalletModalSf' event (evid: 224)
 *
 * Event description: When a visitor views e-wallet Modal after clicking on checkout with e-wallet.
 *
 * @param {viewEWalletModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart'
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<viewEWalletModalSfParams>} LogObject<viewEWalletModalSfParams>
 */
export function viewEWalletModalSf(params) {
    return {
        evid: 224,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickContinueEWalletModalSf' event (evid: 225)
 *
 * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout).
 *
 * @param {clickContinueEWalletModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} fulfillerName - users input name
 * @property {number} itemsCount - count
 * @property {string} cartType - cart_type
 * @property {string} productsList - products_list
 * @property {string} appName - app name (e.g. wixstores-client-cart)
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} paymet_providers - paymet_providers
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} num_of_shipping - num_of_shipping
 * @property {string} origin - origin
 * @property {string} type - add / edit
 * @property {GUID} checkoutId - checkout_id
 * @property {string} settings - OFF / ON_ORDER_CREATED / ON_ORDER_PAID
 * @property {GUID} bi_token - msid
 * @property {number} num_of_paymet_providers - num_of_paymet_providers
 * @return {LogObject<clickContinueEWalletModalSfParams>} LogObject<clickContinueEWalletModalSfParams>
 */
export function clickContinueEWalletModalSf(params) {
    return {
        evid: 225,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'oaSfClickOnProductSocialShare' event (evid: 226)
 *
 * Event description: when member click on social share for product in Store Front OneApp. Till 09.03.20 was sent from ec-sm, 10-22.03.20 was invalid (started to be sent from ec-sf but no changes in Catalog) , since 23.03 copied to ec-sf
 *
 * @param {oaSfClickOnProductSocialShareParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<oaSfClickOnProductSocialShareParams>} LogObject<oaSfClickOnProductSocialShareParams>
 */
export function oaSfClickOnProductSocialShare(params) {
    return {
        evid: 226,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnRelatedProductOa' event (evid: 229)
 *
 * Event description: user clicked on related product in main product screen OA
 *
 * @param {clickOnRelatedProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} id - product_id of related product
 * @property {string} productId - product_id of main product
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnRelatedProductOaParams>} LogObject<clickOnRelatedProductOaParams>
 */
export function clickOnRelatedProductOa(params) {
    return {
        evid: 229,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnImageOfProductOa' event (evid: 232)
 *
 * Event description: member clicked on image in product screen OA SF (opens gallery) OR (since Feb 2023) swiped (view next image in gallery)
 *
 * @param {clickOnImageOfProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id of main product
 * @property {string} type - click /swipe
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnImageOfProductOaParams>} LogObject<clickOnImageOfProductOaParams>
 */
export function clickOnImageOfProductOa(params) {
    return {
        evid: 232,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'highRpuFeatureAdAssetShown' event (evid: 236)
 *
 * Event description: when Ad asset (e.g. banner, tooltip) to Upgrade to High ARPU to get feature is shown
 *
 * @param {highRpuFeatureAdAssetShownParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} paymentStatus - payment_status
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} messageType - high ARPU / payment / both
 * @property {string} origin - editor / onboarding / StoresBO / Live site
 * @property {string} type - banner / tooltip / UoU popup
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<highRpuFeatureAdAssetShownParams>} LogObject<highRpuFeatureAdAssetShownParams>
 */
export function highRpuFeatureAdAssetShown(params) {
    return {
        evid: 236,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'highRpuDismissFeatureAdAsset' event (evid: 237)
 *
 * Event description: when user dismisses Ad asset (e.g. banner) to Upgrade to High RPU to get feature - so it won't be shown any more
 *
 * @param {highRpuDismissFeatureAdAssetParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {GUID} bi_token - msid
 * @return {LogObject<highRpuDismissFeatureAdAssetParams>} LogObject<highRpuDismissFeatureAdAssetParams>
 */
export function highRpuDismissFeatureAdAsset(params) {
    return {
        evid: 237,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'imageGalleryOpenedInProductOa' event (evid: 238)
 *
 * Event description: after memeber clicked on image in product screen gallery opened (OA)
 *
 * @param {imageGalleryOpenedInProductOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id of main product
 * @property {GUID} bi_token - msid
 * @return {LogObject<imageGalleryOpenedInProductOaParams>} LogObject<imageGalleryOpenedInProductOaParams>
 */
export function imageGalleryOpenedInProductOa(params) {
    return {
        evid: 238,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorInCheckoutSf' event (evid: 24)
 *
 * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront')
 *
 * @param {errorInCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - na
 * @property {string} paymentResponse - payment_response
 * @property {string} stage - what stage in the chechout funnel the error is
 * @property {GUID} cartId - na
 * @property {string} field - cardNumber/expirationDate/postalCode/cvv/ county_code
 * @property {string} errorMessage - detailed error message
 * @property {string} appName - stores
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} message - for example Expiration date is not valid / shipping is not avilable
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<errorInCheckoutSfParams>} LogObject<errorInCheckoutSfParams>
 */
export function errorInCheckoutSf(params) {
    return {
        evid: 24,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickAddToCartWithOptionsSf' event (evid: 248)
 *
 * Event description: buyer clicks on 'Add to Cart' in product-widget / Add to cart button / gallery on a product with options, so the product is not added to the cart and the buyer is navigated to the Product Quick View (in Mobile - Product Page).
 *
 * @param {clickAddToCartWithOptionsSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {number} rank - the rank of the product that was clicked
 * @property {string} navigationClick - quick-view / product-page
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {string} options - a json containing the options selected for the product
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) null when (other pages), when it shows all products -> null
 * @property {string} origin - add to cart button / gallery / product-widget
 * @property {string} productId - product_guid
 * @property {string} galleryType - The gallery that the user clocked on (slider-gallery, grid-gallery,shop-page)
 * @property {string} galleryProductsLogic - the logic of the gallery the user clicked on (all-products, collection, related-products)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddToCartWithOptionsSfParams>} LogObject<clickAddToCartWithOptionsSfParams>
 */
export function clickAddToCartWithOptionsSf(params) {
    return {
        evid: 248,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickAddToWishlistSf' event (evid: 260)
 *
 * Event description: buyer clicks on to add product to wishlist
 *
 * @param {clickAddToWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickAddToWishlistSfParams>} LogObject<clickAddToWishlistSfParams>
 */
export function clickAddToWishlistSf(params) {
    return {
        evid: 260,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickRemoveFromWishlistSf' event (evid: 261)
 *
 * Event description: buyer clicks on to remove product feom wishlist
 *
 * @param {clickRemoveFromWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / wishlist-gallery
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickRemoveFromWishlistSfParams>} LogObject<clickRemoveFromWishlistSfParams>
 */
export function clickRemoveFromWishlistSf(params) {
    return {
        evid: 261,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToViewWishlistSf' event (evid: 265)
 *
 * Event description: buyer clicks to view wishlist in the Members area / login menu
 *
 * @param {clickToViewWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - members-menu / login-menu
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewWishlistSfParams>} LogObject<clickToViewWishlistSfParams>
 */
export function clickToViewWishlistSf(params) {
    return {
        evid: 265,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickLinkInMembersWishlistSf' event (evid: 266)
 *
 * Event description: buyer clicks on the 'add products to wishlist' link in the  wishlist in the Members area
 *
 * @param {clickLinkInMembersWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickLinkInMembersWishlistSfParams>} LogObject<clickLinkInMembersWishlistSfParams>
 */
export function clickLinkInMembersWishlistSf(params) {
    return {
        evid: 266,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'productAddedToWishlistSf' event (evid: 267)
 *
 * Event description: when a product was successfully added to wishlist after the buyer clicks on button
 *
 * @param {productAddedToWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {boolean} isBlocks - is it in Product Page on Blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<productAddedToWishlistSfParams>} LogObject<productAddedToWishlistSfParams>
 */
export function productAddedToWishlistSf(params) {
    return {
        evid: 267,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'productRemovedFromWishlistSf' event (evid: 268)
 *
 * Event description: when a product was successfully removed from wishlist after the buyer clicks on button
 *
 * @param {productRemovedFromWishlistSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasRibbon - does the product have ribbon
 * @property {string} appName - app_name
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {string} origin - product-page / gallery-page / quick-view / product-widget
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<productRemovedFromWishlistSfParams>} LogObject<productRemovedFromWishlistSfParams>
 */
export function productRemovedFromWishlistSf(params) {
    return {
        evid: 268,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickInWarningScreenOaStoreFront' event (evid: 270)
 *
 * Event description: click in unable to accept payment screen (not now / contact)/ 2nd level invitation (when user is redirected from 2nd level invitation to a hidden or deleted product) screen
 *
 * @param {clickInWarningScreenOaStoreFrontParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - true
 * @property {string} type - payments / view_store
 * @property {string} value - close / not now / contact
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInWarningScreenOaStoreFrontParams>} LogObject<clickInWarningScreenOaStoreFrontParams>
 */
export function clickInWarningScreenOaStoreFront(params) {
    return {
        evid: 270,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewCheckoutInLiveSitePopupSf' event (evid: 273)
 *
 * Event description: Modal opens when the user tries to view checkout in preview mode.
 *
 * @param {viewCheckoutInLiveSitePopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewCheckoutInLiveSitePopupSfParams>} LogObject<viewCheckoutInLiveSitePopupSfParams>
 */
export function viewCheckoutInLiveSitePopupSf(params) {
    return {
        evid: 273,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'notAcceptPaymentsVisitorPopupSf' event (evid: 283)
 *
 * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules).
 *
 * @param {notAcceptPaymentsVisitorPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / live / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<notAcceptPaymentsVisitorPopupSfParams>} LogObject<notAcceptPaymentsVisitorPopupSfParams>
 */
export function notAcceptPaymentsVisitorPopupSf(params) {
    return {
        evid: 283,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'productOptionsDeleteOptionFromCatalog' event (evid: 32)
 *
 * Event description: when user click to delete an option from the catalog (in manage all product options menu)
 *
 * @param {productOptionsDeleteOptionFromCatalogParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<productOptionsDeleteOptionFromCatalogParams>} LogObject<productOptionsDeleteOptionFromCatalogParams>
 */
export function productOptionsDeleteOptionFromCatalog(params) {
    return {
        evid: 32,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnLeftBarTabsOnComponentSettingsSfe' event (evid: 33)
 *
 * Event description: click to view tab in the settings component (left bar)
 *
 * @param {clickOnLeftBarTabsOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} tab - design / text / Manage
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnLeftBarTabsOnComponentSettingsSfeParams>} LogObject<clickOnLeftBarTabsOnComponentSettingsSfeParams>
 */
export function clickOnLeftBarTabsOnComponentSettingsSfe(params) {
    return {
        evid: 33,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnSettingsTopBarDesignTab' event (evid: 34)
 *
 * Event description: click on the top bar in the settings menu under design tab
 * (For members components)
 *
 * @param {clickOnSettingsTopBarDesignTabParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} tab - with orders / without orders
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSettingsTopBarDesignTabParams>} LogObject<clickOnSettingsTopBarDesignTabParams>
 */
export function clickOnSettingsTopBarDesignTab(params) {
    return {
        evid: 34,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCustomizeButtonInTheSettingsMenu' event (evid: 35)
 *
 * Event description: click on customize button in the main tab on the new settings menu
 * (For members components)
 *
 * @param {clickOnCustomizeButtonInTheSettingsMenuParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetTab - the target tab this buton reffer to
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCustomizeButtonInTheSettingsMenuParams>} LogObject<clickOnCustomizeButtonInTheSettingsMenuParams>
 */
export function clickOnCustomizeButtonInTheSettingsMenu(params) {
    return {
        evid: 35,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutPageLoadSf' event (evid: 36)
 *
 * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full
 *
 * @param {checkoutPageLoadSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} originType - origin type
 * @property {number} itemsCount - number of items in the cart
 * @property {boolean} isPolicy - is_policy
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {string} user_agent - user_agent
 * @property {string} first_stage - first_stage_open in checkout page
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - 'eWallet redirect - cancel' / 'eWallet redirect - continue' / 'cart' / 'product page' / 'product widget' / 'quick view'
 * @property {string} checkoutType - checkout_type
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} numOfPickup - num_of_pickup
 * @property {boolean} hasMembers - has_members_area
 * @property {string} paymentProviders - payment_providers
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<checkoutPageLoadSfParams>} LogObject<checkoutPageLoadSfParams>
 */
export function checkoutPageLoadSf(params) {
    return {
        evid: 36,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutPageSpecificStageExpandedSf' event (evid: 37)
 *
 * Event description: when a new stage is expanded and another collapse.
 * When all data is visible. since june 2019 is sent also from OneApp
 *
 * @param {checkoutPageSpecificStageExpandedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - the edited stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
 * @property {boolean} isGiftCardApplied - is_gift_card_applied
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 * @property {boolean} isCartPaidOnlyWithGiftCard - is_gift_card_only
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} shippingStatus - shipping_status
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} hasGiftCard - has_gift_card
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<checkoutPageSpecificStageExpandedSfParams>} LogObject<checkoutPageSpecificStageExpandedSfParams>
 */
export function checkoutPageSpecificStageExpandedSf(params) {
    return {
        evid: 37,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'exposureEventForTests' event (evid: 45)
 *
 * Event description: generic event fired on an exposure moment for tests. is_eligible data is: gallery -> true if filters enable in gallery;  ExpressCheckout - true if checkout is in viewer
 *
 * @param {exposureEventForTestsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} testName - test name
 * @property {GUID} visitorId - visitor_id
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} appState - what are the apps that currently on state
 * @property {boolean} isMobileFriendly - is_mobile_friendly
 * @property {string} type - type of exposure point
 * @property {boolean} is_eligible - true if the feature eligible, false otherwise
 * @property {GUID} bi_token - msid
 * @return {LogObject<exposureEventForTestsParams>} LogObject<exposureEventForTestsParams>
 */
export function exposureEventForTests(params) {
    return {
        evid: 45,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'subscriptionsAreComingSoonVisitorPopupSf' event (evid: 457)
 *
 * Event description: When a "subscriptions are coming soon" pop-up opens to the buyer. It happens when the user put on his store a subscription product, but doesn't have a premium.
 *
 * @param {subscriptionsAreComingSoonVisitorPopupSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} viewMode - editor / live / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - where the modal pops up (product page, product widget, gallery...)
 * @property {GUID} bi_token - msid
 * @return {LogObject<subscriptionsAreComingSoonVisitorPopupSfParams>} LogObject<subscriptionsAreComingSoonVisitorPopupSfParams>
 */
export function subscriptionsAreComingSoonVisitorPopupSf(params) {
    return {
        evid: 457,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'relatedProductsTestExposureProductPageLoad' event (evid: 47)
 *
 * Event description: BI sent from Velo for related products test - is sent when product page is loaded and we call to petri to know which gallery to show
 *
 * @param {relatedProductsTestExposureProductPageLoadParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} label - The test label from petri - true is with the new logic and false is original component
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<relatedProductsTestExposureProductPageLoadParams>} LogObject<relatedProductsTestExposureProductPageLoadParams>
 */
export function relatedProductsTestExposureProductPageLoad(params) {
    return {
        evid: 47,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'chooseAPageToDisplayThisCollectionOnClicked' event (evid: 471)
 *
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page.
 *
 * @param {chooseAPageToDisplayThisCollectionOnClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app_name
 * @property {string} button_name - Add collection/ cancel
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} pageType - new/existing
 * @property {string} pageName - page_name if available
 * @property {GUID} bi_token - msid
 * @return {LogObject<chooseAPageToDisplayThisCollectionOnClickedParams>} LogObject<chooseAPageToDisplayThisCollectionOnClickedParams>
 */
export function chooseAPageToDisplayThisCollectionOnClicked(params) {
    return {
        evid: 471,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'membersAddressInCheckoutWasChanged' event (evid: 48)
 *
 * Event description: when address was changed in the checkout
 *
 * @param {membersAddressInCheckoutWasChangedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} stage - page in checkout (delivery, payment...)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - addresses list / add address / edit address
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<membersAddressInCheckoutWasChangedParams>} LogObject<membersAddressInCheckoutWasChangedParams>
 */
export function membersAddressInCheckoutWasChanged(params) {
    return {
        evid: 48,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnProductOptionSf' event (evid: 486)
 *
 * Event description: buyer clicks to choose a product option (color / list) on product page, gallery or quickView
 *
 * @param {clickOnProductOptionSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} inStock - is the product option in/ out of stock
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - product-page / gallery-page / slider-gallery / quick-view
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {string} optiontype - list / color
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductOptionSfParams>} LogObject<clickOnProductOptionSfParams>
 */
export function clickOnProductOptionSf(params) {
    return {
        evid: 486,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCartIconToOpenMiniCartSf' event (evid: 49)
 *
 * Event description: click on cart icon to open the mini cart
 *
 * @param {clickOnCartIconToOpenMiniCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app
 * @property {boolean} isNavigateCart - hard coded false (for Anodot)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnCartIconToOpenMiniCartSfParams>} LogObject<clickOnCartIconToOpenMiniCartSfParams>
 */
export function clickOnCartIconToOpenMiniCartSf(params) {
    return {
        evid: 49,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToOpenZoomModalSf' event (evid: 490)
 *
 * Event description: When a buyer clicks on product image in product page to open zoom modal
 *
 * @param {clickToOpenZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenZoomModalSfParams>} LogObject<clickToOpenZoomModalSfParams>
 */
export function clickToOpenZoomModalSf(params) {
    return {
        evid: 490,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewZoomModalSf' event (evid: 491)
 *
 * Event description: When the zoom modal in product page loads
 *
 * @param {viewZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewZoomModalSfParams>} LogObject<viewZoomModalSfParams>
 */
export function viewZoomModalSf(params) {
    return {
        evid: 491,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'zoomModalIsClosedSf' event (evid: 492)
 *
 * Event description: When the zoom modal in product page is closed by clicking on the X or swiping up / down
 *
 * @param {zoomModalIsClosedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<zoomModalIsClosedSfParams>} LogObject<zoomModalIsClosedSfParams>
 */
export function zoomModalIsClosedSf(params) {
    return {
        evid: 492,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'pictureNavigationInZoomModalSf' event (evid: 493)
 *
 * Event description: When the buyer navigates between the product pictures in the zoom modal in product page
 *
 * @param {pictureNavigationInZoomModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product has options
 * @property {string} appName - app_name
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} value - previous / next
 * @property {GUID} bi_token - msid
 * @return {LogObject<pictureNavigationInZoomModalSfParams>} LogObject<pictureNavigationInZoomModalSfParams>
 */
export function pictureNavigationInZoomModalSf(params) {
    return {
        evid: 493,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewMiniCart' event (evid: 50)
 *
 * Event description: view mini cart pop-up. Sent for Ecom (with catalog_app_id) here (instead of src 130) until the rewrite of mini-cart).
 * This bi is being sent when there's an action on mini cart and its being presented to the UoU
 *
 * @param {viewMiniCartParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {GUID} visitorId - visitorId
 * @property {string} cartId - cartId
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {string} origin - cartIcon / addToCartButton
 * @property {string} type - The type of the cart that is shown (mini-cart ,tiny-cart ,mobile)
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - price_breakdown
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<viewMiniCartParams>} LogObject<viewMiniCartParams>
 */
export function viewMiniCart(params) {
    return {
        evid: 50,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickInFilterScreenOa' event (evid: 500)
 *
 * Event description: When user clicks clear filter close (x) -
 *
 * @param {clickInFilterScreenOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} filterScreen - filter_screen
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - products / orders
 * @property {string} value - clear / close
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickInFilterScreenOaParams>} LogObject<clickInFilterScreenOaParams>
 */
export function clickInFilterScreenOa(params) {
    return {
        evid: 500,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterOa' event (evid: 506)
 *
 * Event description: Click on filter OA.
 *
 * @param {clickOnFilterOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - products / orders /pos
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFilterOaParams>} LogObject<clickOnFilterOaParams>
 */
export function clickOnFilterOa(params) {
    return {
        evid: 506,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickOnCheckbox' event (evid: 527)
 *
 * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickOnCheckboxParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} value - checked / unchecked
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<giftCardCheckoutClickOnCheckboxParams>} LogObject<giftCardCheckoutClickOnCheckboxParams>
 */
export function giftCardCheckoutClickOnCheckbox(params) {
    return {
        evid: 527,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickApply' event (evid: 529)
 *
 * Event description: when visitor clicks "Apply" after entering Gift Card Code in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickApplyParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<giftCardCheckoutClickApplyParams>} LogObject<giftCardCheckoutClickApplyParams>
 */
export function giftCardCheckoutClickApply(params) {
    return {
        evid: 529,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnRightBarTabsWithinComponentSfe' event (evid: 53)
 *
 * Event description: click to view tab in the component (right bar)
 *
 * @param {clickOnRightBarTabsWithinComponentSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - general/product info & Image/Image Slideshow/product Options & Quantity./Ribbons/Add to cart Button/Quick view Button/Load More Button
 * @property {string} tab - design / text / Manage
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnRightBarTabsWithinComponentSfeParams>} LogObject<clickOnRightBarTabsWithinComponentSfeParams>
 */
export function clickOnRightBarTabsWithinComponentSfe(params) {
    return {
        evid: 53,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickAddCurrencySfe' event (evid: 530)
 *
 * Event description: click ‘Add Currency’ in currency converter settings (under 'Currencies' panel) to open modal.
 *
 * @param {currencyConverterClickAddCurrencySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickAddCurrencySfeParams>} LogObject<currencyConverterClickAddCurrencySfeParams>
 */
export function currencyConverterClickAddCurrencySfe(params) {
    return {
        evid: 530,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickGeneralInfoSfe' event (evid: 531)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickGeneralInfoSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickGeneralInfoSfeParams>} LogObject<currencyConverterClickGeneralInfoSfeParams>
 */
export function currencyConverterClickGeneralInfoSfe(params) {
    return {
        evid: 531,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickAddCurrenciesListSfe' event (evid: 532)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickAddCurrenciesListSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickAddCurrenciesListSfeParams>} LogObject<currencyConverterClickAddCurrenciesListSfeParams>
 */
export function currencyConverterClickAddCurrenciesListSfe(params) {
    return {
        evid: 532,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'currencyConverterClickDeleteCurrencySfe' event (evid: 533)
 *
 * Event description: click  'General Info' in currency converter settings (under 'Currencies' panel) in the stores currency tool tip.
 *
 * @param {currencyConverterClickDeleteCurrencySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<currencyConverterClickDeleteCurrencySfeParams>} LogObject<currencyConverterClickDeleteCurrencySfeParams>
 */
export function currencyConverterClickDeleteCurrencySfe(params) {
    return {
        evid: 533,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'currencyConverterChooseSiteCurrencyDisplay' event (evid: 534)
 *
 * Event description: when a buyer chooses the site currency display in the currency converter dropdown
 *
 * @param {currencyConverterChooseSiteCurrencyDisplayParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - currencyconverter-settings
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} siteCurrency - original site currency
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - msid
 * @property {string} newValue - chosen display currency
 * @return {LogObject<currencyConverterChooseSiteCurrencyDisplayParams>} LogObject<currencyConverterChooseSiteCurrencyDisplayParams>
 */
export function currencyConverterChooseSiteCurrencyDisplay(params) {
    return {
        evid: 534,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutCodeApplied' event (evid: 535)
 *
 * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout
 *
 * @param {giftCardCheckoutCodeAppliedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member
 * @return {LogObject<giftCardCheckoutCodeAppliedParams>} LogObject<giftCardCheckoutCodeAppliedParams>
 */
export function giftCardCheckoutCodeApplied(params) {
    return {
        evid: 535,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutRemoveCode' event (evid: 536)
 *
 * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout
 *
 * @param {giftCardCheckoutRemoveCodeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} giftCardId - gift_card_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} isMember - true if visitor is member
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - site_member_id
 * @return {LogObject<giftCardCheckoutRemoveCodeParams>} LogObject<giftCardCheckoutRemoveCodeParams>
 */
export function giftCardCheckoutRemoveCode(params) {
    return {
        evid: 536,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewProductPageSf' event (evid: 541)
 *
 * Event description: view product page in SF
 * (preview, Editor & live site)
 *
 * @param {viewProductPageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} isDescriptionDisplayed - True/False
 * @property {boolean} buyNow - has buy now button
 * @property {boolean} isProductOptionsDisplayed - True/False
 * @property {boolean} isQuantityDisplayed - True/False
 * @property {boolean} isProductNameDisplayed - True/False
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} isBuyNowDisplayed - True/False
 * @property {boolean} isPictureDisplayed - True/False
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {boolean} isBackInStockDisplayed - True/False
 * @property {string} appName - app name
 * @property {boolean} isAddToCartDisplayed - True/False
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} isCustomTextFieldsDisplayed - True/False
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} preOrder - has pre order button
 * @property {string} socialButton - which social button appear on page
 * @property {boolean} preOrderNow - has pre order now button
 * @property {string} options - which options types the product has, no options = NULL
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isPricePerUnitDisplayed - True/False
 * @property {boolean} isShareButtonsDisplayed - True/False
 * @property {boolean} isPriceAndDiscountDisplayed - True/False
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {boolean} isSkuDisplayed - True/False
 * @property {boolean} isPriceRangeDisplayed - True/False
 * @property {boolean} isSubscriptionDisplayed - True/False
 * @property {boolean} hasPriceBreakdownWidget - has price breakdown widget (the banner you show for installments) -- not possible
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} isMorePaymentOptionsDispalyed - True/False
 * @property {boolean} isNavigationDisplayed - True/False
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} productId - product_guid
 * @property {string} type - product page layout - - classic / sleek / stunning / spotlight / simple
 * @property {boolean} hasWishlist - has wishlist
 * @property {boolean} isInfoSectionDisplayed - True/False
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {boolean} hasDynamicPaymentMethods - does dynamic payment methods is on in pp settings (only relevant for editor))
 * @property {boolean} isTaxAndShippingInfoDisplayed - True/False
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {boolean} isGalleryDisplayed - True/False
 * @return {LogObject<viewProductPageSfParams>} LogObject<viewProductPageSfParams>
 */
export function viewProductPageSf(params) {
    return {
        evid: 541,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewGallerySf' event (evid: 542)
 *
 * Event description: view gallery (slider, grid ang gallery page) in SF
 * (preview, Editor & live site)
 *
 * @param {viewGallerySfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - is options in gallery shown
 * @property {string} algorithmId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the id of the algorithm
 * @property {boolean} isCategoryPage - Is category page  (collections by legacy)
 * @property {string} categoryId - presented category (if not relevant NULL) (collection by legacy)
 * @property {number} numOfColumns - Presented gallery columns
 * @property {boolean} hasProductCounter - Has product counter
 * @property {string} filterType - if has filters > list of displayed filters, if no filters > null
 * @property {string} productsList - array of the prdocutIds in the gallery  (only in slider)
 * @property {string} appName - app name
 * @property {boolean} hasAppliedFilters - Has applied filters
 * @property {GUID} algorithmProviderId - when a gallery is loaded with product from a algorithm (frequently bought together, frequently watched together) this field will contain the provider  id of the algorithm
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {string} filterName - ONLY custom filters names (can be NULL)
 * @property {boolean} hasHeroImage - Has hero image
 * @property {string} loadType - pagination / load more button / infinite scroll
 * @property {boolean} hasCategoryTree - Has category tree  (collections by legacy)
 * @property {string} navigationClick - what happens when you click on add to cart (if no ATC button > NULL)
 * @property {boolean} addToCart - has add to cart button
 * @property {boolean} hasSorting - is sorting in gallery shown
 * @property {boolean} hasQuickView - has quick view
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} galleryInputId - productId/ collectionId. the input ID of the gallery - when it shows collection -> collection id, when it shows related products - product id (when on product page) list -> when (other pages), when it shows all products -> null, Best Sellers -> null
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} hasPrice - is price in gallery shown
 * @property {boolean} hasQuantity - is quantity in gallery shown
 * @property {boolean} hasImageCarousel - has image carousel
 * @property {string} hoverType - swap / zoom / border / nothing
 * @property {string} productsLogic - collection / related products / all products
 * @property {string} pageName - the website page of where the gallery exists in, e.g product page, home page, etc.
 * @property {string} type - slider gallery / grid gallery / gallery page
 * @property {boolean} hasHeroDescription - Has hero description
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {boolean} hasBreadcrumbs - has_breadcrumbs
 * @property {string} layoutSettings - array with any additional settings (From layout tab)
 * @property {string} displaySettings - array with any additional settings (From display tab) - array
 * @property {string} settings - array with any additional settings (From settings tab)
 * @property {string} component_id - component_id
 * @property {string} componentType - minigalley for slider or grid gallery
 * @return {LogObject<viewGallerySfParams>} LogObject<viewGallerySfParams>
 */
export function viewGallerySf(params) {
    return {
        evid: 542,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewQuickViewSf' event (evid: 543)
 *
 * Event description: view quick view in SF
 * (preview, Editor & live site)
 *
 * @param {viewQuickViewSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} buyNow - has buy now button
 * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
 * @property {boolean} hasNotifyMe - did the merchant activated back in stock notification for the buyer
 * @property {boolean} showUnitPrice - does the product show price per unit
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {boolean} addToCart - has add to cart button
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - which social button appear on page
 * @property {string} options - which options types the product has, no options = NULL
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {boolean} oneTimePurchase - if the user enabled one time purchase with subscription
 * @property {number} remainingItemCount - The inventory quantity that is shown to the user
 * @property {boolean} hasStockIndicator - True if the user enabled stock indicator in product page false if not
 * @property {string} productId - product_guid
 * @property {boolean} hasWishlist - has wishlist
 * @property {string} inventoryStatus - in stock / out of stock / partially
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @return {LogObject<viewQuickViewSfParams>} LogObject<viewQuickViewSfParams>
 */
export function viewQuickViewSf(params) {
    return {
        evid: 543,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'productWidgetLoadedSf' event (evid: 544)
 *
 * Event description: product widget loaded in SF
 * (preview, Editor & live site)
 *
 * @param {productWidgetLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - has_options
 * @property {string} buttonType - all the time / hover / never
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - add to cart / view details
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} productId - product_guid
 * @property {string} type - layout - left / close-up / outline / add to cart / center
 * @property {GUID} bi_token - msid
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @return {LogObject<productWidgetLoadedSfParams>} LogObject<productWidgetLoadedSfParams>
 */
export function productWidgetLoadedSf(params) {
    return {
        evid: 544,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'addToCartButtonLoadedSf' event (evid: 545)
 *
 * Event description: Add to Cart Button in SF
 * (preview, Editor & live site)
 *
 * @param {addToCartButtonLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} hasOptions - does the product have options
 * @property {string} appName - app name
 * @property {boolean} hasPlans - product has subscriptions plans
 * @property {string} navigationClick - what happens when you click on add to cart
 * @property {string} productType - digital/physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<addToCartButtonLoadedSfParams>} LogObject<addToCartButtonLoadedSfParams>
 */
export function addToCartButtonLoadedSf(params) {
    return {
        evid: 545,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartIconLoadedSf' event (evid: 546)
 *
 * Event description: when user clicks on tabs inside orders / products widget in OneApp dashboard
 *
 * @param {cartIconLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} navigationClick - navigation_click
 * @property {string} tabName - recentlyUpdated / OutOfStock /  hidden / topViewed
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isMobileFriendly - is_mobile_friendly
 * @property {string} origin - product_list_widget / order_list_widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<cartIconLoadedSfParams>} LogObject<cartIconLoadedSfParams>
 */
export function cartIconLoadedSf(params) {
    return {
        evid: 546,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnPriceBreakdownWidgetInPpSf' event (evid: 550)
 *
 * Event description: buyer clicks on the price breakdown widget in the product page
 *
 * @param {clickOnPriceBreakdownWidgetInPpSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} productType - Digital/ Physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {string} type - type of installments app
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnPriceBreakdownWidgetInPpSfParams>} LogObject<clickOnPriceBreakdownWidgetInPpSfParams>
 */
export function clickOnPriceBreakdownWidgetInPpSf(params) {
    return {
        evid: 550,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'priceBreakdownModalOpenSf' event (evid: 551)
 *
 * Event description: price breakdown modal opened after clicking on the widget in the product page
 *
 * @param {priceBreakdownModalOpenSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} type - type of installments app
 * @property {GUID} bi_token - msid
 * @return {LogObject<priceBreakdownModalOpenSfParams>} LogObject<priceBreakdownModalOpenSfParams>
 */
export function priceBreakdownModalOpenSf(params) {
    return {
        evid: 551,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickPlaceOrderWithSubscription' event (evid: 58)
 *
 * Event description: if "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickPlaceOrderWithSubscriptionParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - storeId
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cartId
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {boolean} default_state - true if was turned on by default by merchant settings
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickPlaceOrderWithSubscriptionParams>} LogObject<clickPlaceOrderWithSubscriptionParams>
 */
export function clickPlaceOrderWithSubscription(params) {
    return {
        evid: 58,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewAddCollectionToSiteModalEditor' event (evid: 581)
 *
 * Event description: in the editor, when adding a collection , coming from SM CTA - add collection to page.
 *
 * @param {viewAddCollectionToSiteModalEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} name - collection_name
 * @property {string} categoryId - collection id
 * @property {string} appName - app name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewAddCollectionToSiteModalEditorParams>} LogObject<viewAddCollectionToSiteModalEditorParams>
 */
export function viewAddCollectionToSiteModalEditor(params) {
    return {
        evid: 581,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'oaSfCustomizeProductGallery' event (evid: 595)
 *
 * Event description: when merchant clicks "Add" /"Save" in Add/Edit Product Gallery screen in Add/Edit Shop flow in Customize Member View
 *
 * @param {oaSfCustomizeProductGalleryParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {boolean} showFilter - true/false
 * @property {string} categoryId - id of collection
 * @property {string} filtersList - list of filters to show
 * @property {boolean} filterChanged - only for type = edit
 * @property {string} tab - tab
 * @property {boolean} collectionChanged - only for type = edit
 * @property {string} appName - app_name
 * @property {string} section - stores_products_grid_section / stores_products_carousel_section
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} layoutSettings - crop / fit
 * @property {string} collectionName - allProducts / spedific
 * @property {string} type - add /edit
 * @property {GUID} bi_token - msid
 * @return {LogObject<oaSfCustomizeProductGalleryParams>} LogObject<oaSfCustomizeProductGalleryParams>
 */
export function oaSfCustomizeProductGallery(params) {
    return {
        evid: 595,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewShippingInfoModalSf' event (evid: 596)
 *
 * Event description: When the shipping modal loads, after the buyer clicks on shipping info link in one of the the SF components (not in cart).
 *
 * @param {viewShippingInfoModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @property {string} shippingRuleOptions - all the shipping types presented in the modal
 * @return {LogObject<viewShippingInfoModalSfParams>} LogObject<viewShippingInfoModalSfParams>
 */
export function viewShippingInfoModalSf(params) {
    return {
        evid: 596,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickShippingInfoLinkSf' event (evid: 597)
 *
 * Event description: When the buyer clicks on shipping info link in one of the the SF components (not in cart).
 *
 * @param {clickShippingInfoLinkSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - from which component
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickShippingInfoLinkSfParams>} LogObject<clickShippingInfoLinkSfParams>
 */
export function clickShippingInfoLinkSf(params) {
    return {
        evid: 597,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickLogoutInCheckoutSf' event (evid: 601)
 *
 * Event description: when  site member clicks to logout in checkout, opening logout modal
 *
 * @param {clickLogoutInCheckoutSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<clickLogoutInCheckoutSfParams>} LogObject<clickLogoutInCheckoutSfParams>
 */
export function clickLogoutInCheckoutSf(params) {
    return {
        evid: 601,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutLoadedSf' event (evid: 602)
 *
 * Event description: logout modal loaded in checkout after member presses logout
 *
 * @param {logoutModalInCheckoutLoadedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<logoutModalInCheckoutLoadedSfParams>} LogObject<logoutModalInCheckoutLoadedSfParams>
 */
export function logoutModalInCheckoutLoadedSf(params) {
    return {
        evid: 602,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutClosedSf' event (evid: 603)
 *
 * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it
 *
 * @param {logoutModalInCheckoutClosedSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<logoutModalInCheckoutClosedSfParams>} LogObject<logoutModalInCheckoutClosedSfParams>
 */
export function logoutModalInCheckoutClosedSf(params) {
    return {
        evid: 603,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnProductDetailsSf' event (evid: 61)
 *
 * Event description: When clicking a product info title in the product page
 *
 * @param {clickOnProductDetailsSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isBlocks - is_blocks
 * @property {string} productId - product_guid
 * @property {string} type - product details type (tab, expand...)
 * @property {number} index - index
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductDetailsSfParams>} LogObject<clickOnProductDetailsSfParams>
 */
export function clickOnProductDetailsSf(params) {
    return {
        evid: 61,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'socialButtons' event (evid: 62)
 *
 * Event description: when a buyer clicks on the social buttons in the product page
 *
 * @param {socialButtonsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - button
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isBlocks - is_blocks
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<socialButtonsParams>} LogObject<socialButtonsParams>
 */
export function socialButtons(params) {
    return {
        evid: 62,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCartSf' event (evid: 63)
 *
 * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'
 *
 * @param {clickOnAddToCartSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {boolean} hasOptions - has_options
 * @property {string} viewMode - editor / site / preview
 * @property {number} quantity - count
 * @property {string} buttonType - button_type
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {GUID} impressionId - impression_id
 * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
 * @property {GUID} owner_id - owner_id
 * @property {number} rank - rank
 * @property {string} navigationClick - mini-cart / cart  / none / checkout
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {string} socialButton - button
 * @property {string} options - a json containing the options selected for the product
 * @property {boolean} isMerchant - isMerchant status
 * @property {boolean} isOwner - is_owner
 * @property {string} galleryInputId - gallery_input_id
 * @property {string} origin - origin
 * @property {string} productId - product_guid
 * @property {string} galleryProductsLogic - gallery_products_logic
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddToCartSfParams>} LogObject<clickOnAddToCartSfParams>
 */
export function clickOnAddToCartSf(params) {
    return {
        evid: 63,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToViewProductVelo' event (evid: 640)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {clickToViewProductVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {string} model - the model shown in the slider gallery
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} rank - The ranking of the product in the gallery
 * @property {string} product_title - product_title
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToViewProductVeloParams>} LogObject<clickToViewProductVeloParams>
 */
export function clickToViewProductVelo(params) {
    return {
        evid: 640,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnProductQuickViewVelo' event (evid: 641)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {clickOnProductQuickViewVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - array of the prdocutIds in the gallery (sorted by ranking)
 * @property {string} model - model of the recommended products
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {number} rank - The ranking of the product in the gallery
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProductQuickViewVeloParams>} LogObject<clickOnProductQuickViewVeloParams>
 */
export function clickOnProductQuickViewVelo(params) {
    return {
        evid: 641,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewVeloGallery' event (evid: 642)
 *
 * Event description: sent from product gallery made by Velo.
 *
 * @param {viewVeloGalleryParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} productList - product_list
 * @property {string} appName - app_name
 * @property {GUID} impressionId - unique guid for the gallery loading session
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} galleryInputId - the product_guid the we present the recommendation for
 * @property {string} productsLogic - the logic of product recommendation that is presented in the gallery
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewVeloGalleryParams>} LogObject<viewVeloGalleryParams>
 */
export function viewVeloGallery(params) {
    return {
        evid: 642,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'minimumOrderMessageIsShownInCart' event (evid: 653)
 *
 * Event description: Minimum order message is shown in cart
 *
 * @param {minimumOrderMessageIsShownInCartParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderMessageIsShownInCartParams>} LogObject<minimumOrderMessageIsShownInCartParams>
 */
export function minimumOrderMessageIsShownInCart(params) {
    return {
        evid: 653,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'minimumOrderModalIsShownInCheckout' event (evid: 654)
 *
 * Event description: Minimum order modal is shown in checkout.
 *
 * @param {minimumOrderModalIsShownInCheckoutParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - minimum_value_long
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} hasPickup - has_pickup
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderModalIsShownInCheckoutParams>} LogObject<minimumOrderModalIsShownInCheckoutParams>
 */
export function minimumOrderModalIsShownInCheckout(params) {
    return {
        evid: 654,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'minimumOrderClickOnGotItInErrorModalInCheckout' event (evid: 655)
 *
 * Event description: Minimum order - click on ‘got it’ in error modal in checkout
 *
 * @param {minimumOrderClickOnGotItInErrorModalInCheckoutParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - .
 * @property {GUID} visitor_id - visitor_id
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} checkoutId - only in EP
 * @property {GUID} bi_token - msid
 * @return {LogObject<minimumOrderClickOnGotItInErrorModalInCheckoutParams>} LogObject<minimumOrderClickOnGotItInErrorModalInCheckoutParams>
 */
export function minimumOrderClickOnGotItInErrorModalInCheckout(params) {
    return {
        evid: 655,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnFilterInStoresOa' event (evid: 69)
 *
 * Event description: when user applies filter in Stores (orders, products, coupons) Screen OneApp or POS OneApp
 *
 * @param {clickOnFilterInStoresOaParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {number} productsFiltered - number of products filtered by in Order filter
 * @property {DateTime} dateRangeEnd - orderDate filter (for custom orderDateType)
 * @property {DateTime} dateRangeStart - orderDate filter (for custom orderDateType)
 * @property {string} filtersList - filters_list
 * @property {string} filterValue - filter_value
 * @property {string} paymentStatus - notPaid, paid, partiallyRefunded, refunded
 * @property {string} appName - app_name
 * @property {string} filterScreen - filter_screen
 * @property {string} productType - product type: physical , digital
 * @property {boolean} archievedStatus - true / false
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} salesChannels - WEB, EBAY, POS, WIX_APP_STORE, OTHER_PLATFORM
 * @property {string} origin - name of current page (orders/products - from products dashboard / coupons_products  - products from apply coupon / SF_products - from list of products in StoreFront/coupons)
 * @property {string} dateRange - today, lastTwoDays, thisWeek, lastTwoWeeks, custom
 * @property {number} collectionsFiltered - number of collections filtered in products filter
 * @property {string} inventoryStatus - product inventory status: in_stock,  out_of_stock,  partially_out_of_stock
 * @property {string} visibility - product visibility : visible , hidden
 * @property {string} fulfillmentStatus - fulfilled, partiallyFulfilled, canceled, notFulfilled
 * @property {string} subscriptions - withSubscription, withoutSubscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFilterInStoresOaParams>} LogObject<clickOnFilterInStoresOaParams>
 */
export function clickOnFilterInStoresOa(params) {
    return {
        evid: 69,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'duplicateCollectionClickedSm' event (evid: 804)
 *
 * Event description: Duplicate collection clicked SM
 *
 * @param {duplicateCollectionClickedSmParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} bi_token - msid
 * @return {LogObject<duplicateCollectionClickedSmParams>} LogObject<duplicateCollectionClickedSmParams>
 */
export function duplicateCollectionClickedSm(params) {
    return {
        evid: 804,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showHideCategoriesClickedInModal' event (evid: 806)
 *
 * Event description: Show/Hide categories clicked in modal
 *
 * @param {showHideCategoriesClickedInModalParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - category id (collection by legacy)
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - Categories list/Categories page
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideCategoriesClickedInModalParams>} LogObject<showHideCategoriesClickedInModalParams>
 */
export function showHideCategoriesClickedInModal(params) {
    return {
        evid: 806,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'editCategoryListSidebar' event (evid: 809)
 *
 * Event description: edit category list sidebar
 *
 * @param {editCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} categoryId - Categories list by current order (collections by legacy)
 * @property {string} appName - app_name
 * @property {string} categoryName - Category name (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} categoriesOrder - Categories list by current order (collections by legacy)
 * @property {boolean} isVisibleInSidebar - True/False
 * @property {string} action - Reorder / Change visibility in Sidebar
 * @property {GUID} bi_token - msid
 * @return {LogObject<editCategoryListSidebarParams>} LogObject<editCategoryListSidebarParams>
 */
export function editCategoryListSidebar(params) {
    return {
        evid: 809,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewStoresPanelInEditor' event (evid: 810)
 *
 * Event description: When the Stores panel is open in the Editor
 *
 * @param {viewStoresPanelInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - DESKTOP etc.
 * @property {string} state - what does the user sees when the panel is open
 * @property {GUID} site_id - site_id
 * @property {string} appName - WixStores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} actions - json with all the quick actions the user sees
 * @property {string} app_id - stores app_id
 * @property {string} type - automatic open / click on button
 * @property {GUID} esi - esi
 * @property {GUID} bi_token - msid
 * @property {string} app_name - WixStores
 * @return {LogObject<viewStoresPanelInEditorParams>} LogObject<viewStoresPanelInEditorParams>
 */
export function viewStoresPanelInEditor(params) {
    return {
        evid: 810,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'openAppSettingsSfe' event (evid: 811)
 *
 * Event description: double click / right click on a wixstores component
 *
 * @param {openAppSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app name
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isPremiumEligible - is_premium_eligible
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter
 * @property {GUID} bi_token - msid
 * @return {LogObject<openAppSettingsSfeParams>} LogObject<openAppSettingsSfeParams>
 */
export function openAppSettingsSfe(params) {
    return {
        evid: 811,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeStyleColorSfe' event (evid: 812)
 *
 * Event description: upon changing a store style or color
 *
 * @param {changeStyleColorSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - style/color parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media , withorders/whitoutorders
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - event_data
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeStyleColorSfeParams>} LogObject<changeStyleColorSfeParams>
 */
export function changeStyleColorSfe(params) {
    return {
        evid: 812,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeGalleryCollectionSfe' event (evid: 813)
 *
 * Event description: change gallery collection for display
 *
 * @param {changeGalleryCollectionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeGalleryCollectionSfeParams>} LogObject<changeGalleryCollectionSfeParams>
 */
export function changeGalleryCollectionSfe(params) {
    return {
        evid: 813,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToReOrderProductsInCollectionSfe' event (evid: 814)
 *
 * Event description: clicking 're-order products in collection' (store manager is opened in collection page)
 *
 * @param {clickToReOrderProductsInCollectionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor/onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetPage - product list / product / dashboard / ....
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToReOrderProductsInCollectionSfeParams>} LogObject<clickToReOrderProductsInCollectionSfeParams>
 */
export function clickToReOrderProductsInCollectionSfe(params) {
    return {
        evid: 814,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeImageRatioInGallerySfe' event (evid: 815)
 *
 * Event description: change image ratio in gallery
 *
 * @param {changeImageRatioInGallerySfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} imageRatio - selected image ratio (2X2. 2X3...)
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeImageRatioInGallerySfeParams>} LogObject<changeImageRatioInGallerySfeParams>
 */
export function changeImageRatioInGallerySfe(params) {
    return {
        evid: 815,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeGalleryLayoutSfe' event (evid: 816)
 *
 * Event description: change gallery layout
 *
 * @param {changeGalleryLayoutSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - columns / rows / margins
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile/desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - selected value
 * @property {GUID} bi_token - msid
 * @property {string} tab - from which tab was the change sent from ?
 * @return {LogObject<changeGalleryLayoutSfeParams>} LogObject<changeGalleryLayoutSfeParams>
 */
export function changeGalleryLayoutSfe(params) {
    return {
        evid: 816,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'resetAppSettingsSfe' event (evid: 819)
 *
 * Event description: click on 'reset settings' in app settings panel
 *
 * @param {resetAppSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - component_id
 * @property {GUID} bi_token - msid
 * @return {LogObject<resetAppSettingsSfeParams>} LogObject<resetAppSettingsSfeParams>
 */
export function resetAppSettingsSfe(params) {
    return {
        evid: 819,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeCartIconSfe' event (evid: 820)
 *
 * Event description: select a cart icon in mini cart settings
 *
 * @param {changeCartIconSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - icon type
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeCartIconSfeParams>} LogObject<changeCartIconSfeParams>
 */
export function changeCartIconSfe(params) {
    return {
        evid: 820,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showHideCategoryListSidebar' event (evid: 821)
 *
 * Event description: show/hide category list sidebar
 *
 * @param {showHideCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} componentName - Category_list
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideCategoryListSidebarParams>} LogObject<showHideCategoryListSidebarParams>
 */
export function showHideCategoryListSidebar(params) {
    return {
        evid: 821,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeMiniCartBehaviorSfe' event (evid: 822)
 *
 * Event description: select a behavior for click on mini cart in mini cart settings
 *
 * @param {changeMiniCartBehaviorSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} value - behavior type
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeMiniCartBehaviorSfeParams>} LogObject<changeMiniCartBehaviorSfeParams>
 */
export function changeMiniCartBehaviorSfe(params) {
    return {
        evid: 822,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'categoryPageHeroSectionReadMoreClicked' event (evid: 823)
 *
 * Event description: Category page hero section  ‘read more’ clicked
 *
 * @param {categoryPageHeroSectionReadMoreClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageHeroSectionReadMoreClickedParams>} LogObject<categoryPageHeroSectionReadMoreClickedParams>
 */
export function categoryPageHeroSectionReadMoreClicked(params) {
    return {
        evid: 823,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeProductPageLayoutSfe' event (evid: 824)
 *
 * Event description: user changed the product page layout in app settings
 *
 * @param {changeProductPageLayoutSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - parameter
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - mobile / desktop
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - chosen layout
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} parameters - Header section style
 * @property {string} value - Layout 1 / Layout 2
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeProductPageLayoutSfeParams>} LogObject<changeProductPageLayoutSfeParams>
 */
export function changeProductPageLayoutSfe(params) {
    return {
        evid: 824,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeProductPageDisplayedComponentsSfe' event (evid: 825)
 *
 * Event description: user checked/unchecked a displayed element in component in app settings
 *
 * @param {changeProductPageDisplayedComponentsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen layout
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @property {string} tab - the setting tab which the change where made from
 * @return {LogObject<changeProductPageDisplayedComponentsSfeParams>} LogObject<changeProductPageDisplayedComponentsSfeParams>
 */
export function changeProductPageDisplayedComponentsSfe(params) {
    return {
        evid: 825,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeProductInWidgetSfe' event (evid: 826)
 *
 * Event description: merchant changed the product connected to a product widget
 *
 * @param {changeProductInWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeProductInWidgetSfeParams>} LogObject<changeProductInWidgetSfeParams>
 */
export function changeProductInWidgetSfe(params) {
    return {
        evid: 826,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnEditProductsInProductWidgetSfe' event (evid: 827)
 *
 * Event description: merchant clicks on edit products in product widget settings
 *
 * @param {clickOnEditProductsInProductWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page, product widget
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditProductsInProductWidgetSfeParams>} LogObject<clickOnEditProductsInProductWidgetSfeParams>
 */
export function clickOnEditProductsInProductWidgetSfe(params) {
    return {
        evid: 827,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeHoverTypeSfe' event (evid: 828)
 *
 * Event description: merchant changes hover behavior in widget settings
 *
 * @param {changeHoverTypeSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen hover type
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {GUID} bi_token - msid
 * @property {string} tab - the setting tab which the change was made from
 * @return {LogObject<changeHoverTypeSfeParams>} LogObject<changeHoverTypeSfeParams>
 */
export function changeHoverTypeSfe(params) {
    return {
        evid: 828,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeWidgetButtonActionSfe' event (evid: 829)
 *
 * Event description: merchant changes the widget button action in widget settings
 *
 * @param {changeWidgetButtonActionSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} type - chosen button action type (add to cart, view details...)
 * @property {string} component_id - grid gallery, slider gallery, product page, product widget...
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeWidgetButtonActionSfeParams>} LogObject<changeWidgetButtonActionSfeParams>
 */
export function changeWidgetButtonActionSfe(params) {
    return {
        evid: 829,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnEditElementSettingsSfe' event (evid: 830)
 *
 * Event description: click on edit elements settings in product page settings
 *
 * @param {clickOnEditElementSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnEditElementSettingsSfeParams>} LogObject<clickOnEditElementSettingsSfeParams>
 */
export function clickOnEditElementSettingsSfe(params) {
    return {
        evid: 830,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeElementSettingsSfe' event (evid: 831)
 *
 * Event description: change element settings in SF component settings
 *
 * @param {changeElementSettingsSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} editorMode - editor_mode
 * @property {string} user_agent - user_agent
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor
 * @property {string} new_value - on/off, crop/fit...
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} value - value
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeElementSettingsSfeParams>} LogObject<changeElementSettingsSfeParams>
 */
export function changeElementSettingsSfe(params) {
    return {
        evid: 831,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'categoryPageBreadcrumbClicked' event (evid: 832)
 *
 * Event description: Category page breadcrumb clicked
 *
 * @param {categoryPageBreadcrumbClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} originCategoryId - Origin category ID (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {string} link - Link URL
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageBreadcrumbClickedParams>} LogObject<categoryPageBreadcrumbClickedParams>
 */
export function categoryPageBreadcrumbClicked(params) {
    return {
        evid: 832,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeTextFieldSfe' event (evid: 833)
 *
 * Event description: change the text in store front settings
 *
 * @param {changeTextFieldSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} text - new text
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galery, product page, mini cart....
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeTextFieldSfeParams>} LogObject<changeTextFieldSfeParams>
 */
export function changeTextFieldSfe(params) {
    return {
        evid: 833,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'categoryPageCategoryTreeClicked' event (evid: 834)
 *
 * Event description: Category page category tree clicked
 *
 * @param {categoryPageCategoryTreeClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} originCategoryId - Origin category ID  (collections by legacy)
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} destinationCategoryId - destination category ID (collections by legacy)
 * @property {string} link - Link URL
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageCategoryTreeClickedParams>} LogObject<categoryPageCategoryTreeClickedParams>
 */
export function categoryPageCategoryTreeClicked(params) {
    return {
        evid: 834,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'showHideFiltersSortingSfe' event (evid: 835)
 *
 * Event description: check/uncheck show all filters or sorting options in the 'sorting & filters' tab
 *
 * @param {showHideFiltersSortingSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - sorting options / filters
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<showHideFiltersSortingSfeParams>} LogObject<showHideFiltersSortingSfeParams>
 */
export function showHideFiltersSortingSfe(params) {
    return {
        evid: 835,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeSortingParameterSfe' event (evid: 836)
 *
 * Event description: change sorting (display title or sorting options) in the 'Sorting & Filters' tab
 *
 * @param {changeSortingParameterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} defaultSortingValue - Default sorting value
 * @property {string} type - sort option
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeSortingParameterSfeParams>} LogObject<changeSortingParameterSfeParams>
 */
export function changeSortingParameterSfe(params) {
    return {
        evid: 836,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToOpenProductsListToChangeProductInWidgetSfe' event (evid: 837)
 *
 * Event description: merchant click to open the product list in order to change the connected product to a product widget
 *
 * @param {clickToOpenProductsListToChangeProductInWidgetSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToOpenProductsListToChangeProductInWidgetSfeParams>} LogObject<clickToOpenProductsListToChangeProductInWidgetSfeParams>
 */
export function clickToOpenProductsListToChangeProductInWidgetSfe(params) {
    return {
        evid: 837,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'changeFilterOptionsParameterSfe' event (evid: 838)
 *
 * Event description: change filters (display title/options/show)
 *
 * @param {changeFilterOptionsParameterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} type - filter option
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {string} action - checked / unchecked
 * @property {GUID} bi_token - msid
 * @return {LogObject<changeFilterOptionsParameterSfeParams>} LogObject<changeFilterOptionsParameterSfeParams>
 */
export function changeFilterOptionsParameterSfe(params) {
    return {
        evid: 838,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'addCustomFilterSfe' event (evid: 839)
 *
 * Event description: add custom filter- right now it is for collections filter only
 *
 * @param {addCustomFilterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<addCustomFilterSfeParams>} LogObject<addCustomFilterSfeParams>
 */
export function addCustomFilterSfe(params) {
    return {
        evid: 839,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'removeCustomFilterSfe' event (evid: 840)
 *
 * Event description: add custom filter- right now it is for collections filter only
 *
 * @param {removeCustomFilterSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {GUID} userGuid - userGuid
 * @property {string} text - custom filter name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} component_id - grid gallery, slider gallery, product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<removeCustomFilterSfeParams>} LogObject<removeCustomFilterSfeParams>
 */
export function removeCustomFilterSfe(params) {
    return {
        evid: 840,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToAddWishlistSfe' event (evid: 841)
 *
 * Event description: when a user clicks to add wishlist in product page settings
 *
 * @param {clickToAddWishlistSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} hasMembers - Does the site have members area installed when adding wishlist (different buttons)
 * @property {string} component_id - product
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToAddWishlistSfeParams>} LogObject<clickToAddWishlistSfeParams>
 */
export function clickToAddWishlistSfe(params) {
    return {
        evid: 841,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToRemoveWishlistSfe' event (evid: 842)
 *
 * Event description: when a user clicks to remove wishlist in product page settings
 *
 * @param {clickToRemoveWishlistSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} component_id - product page
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToRemoveWishlistSfeParams>} LogObject<clickToRemoveWishlistSfeParams>
 */
export function clickToRemoveWishlistSfe(params) {
    return {
        evid: 842,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToPreviewWishlistInMembersSfe' event (evid: 843)
 *
 * Event description: when a user clicks in notification to preview Wishlist in Members
 *
 * @param {clickToPreviewWishlistInMembersSfeParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickToPreviewWishlistInMembersSfeParams>} LogObject<clickToPreviewWishlistInMembersSfeParams>
 */
export function clickToPreviewWishlistInMembersSfe(params) {
    return {
        evid: 843,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'wishlistInstallationStage' event (evid: 844)
 *
 * Event description: wishlist installation stage
 *
 * @param {wishlistInstallationStageParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} stage - which stage in the wishlist installation process
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<wishlistInstallationStageParams>} LogObject<wishlistInstallationStageParams>
 */
export function wishlistInstallationStage(params) {
    return {
        evid: 844,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnProPlanUpgradeInComponentSetting' event (evid: 845)
 *
 * Event description: When a user clicks on the pro plan upgrade button in component setting (Can also be from GFPP) OR  When user clicks on Upgrade Now from button / popover / banner in Stores BO for High RPU feature
 *
 * @param {clickOnProPlanUpgradeInComponentSettingParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax, Subscription
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnProPlanUpgradeInComponentSettingParams>} LogObject<clickOnProPlanUpgradeInComponentSettingParams>
 */
export function clickOnProPlanUpgradeInComponentSetting(params) {
    return {
        evid: 845,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'proPlanUpgradeModalLoaded' event (evid: 846)
 *
 * Event description: when the pro plan upgrade modal is loaded in the editor/ADI OR when in Stores BO Upgrade modal loaded for High RPU
 *
 * @param {proPlanUpgradeModalLoadedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} messageType - high ARPU / both (means high ARPU and payment)
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - From which component the modal was opened (
 * CurrencyConverter, AvalaraTax, subscriptions)
 * @property {GUID} bi_token - msid
 * @return {LogObject<proPlanUpgradeModalLoadedParams>} LogObject<proPlanUpgradeModalLoadedParams>
 */
export function proPlanUpgradeModalLoaded(params) {
    return {
        evid: 846,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnUpgradeButtonInProPlanModal' event (evid: 847)
 *
 * Event description: When the user clicks on the upgrade button in pro plan modal (high RPU upgrade modal)
 *
 * @param {clickOnUpgradeButtonInProPlanModalParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - isMerchant status
 * @property {string} package_name - The type of the premium package that is connected to the site (if free then null)
 * @property {string} origin - editor / onboarding / StoresBO
 * @property {string} type - button / tooltip / banner
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnUpgradeButtonInProPlanModalParams>} LogObject<clickOnUpgradeButtonInProPlanModalParams>
 */
export function clickOnUpgradeButtonInProPlanModal(params) {
    return {
        evid: 847,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'pagesAtAppInstallation' event (evid: 849)
 *
 * Event description: event sent for each page that is installed within the app installation (i.e Shop page, Cart Page..)
 *
 * @param {pagesAtAppInstallationParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} installationType - originally_in_template/siteless/duplicate/the rest will be manual
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} appid - app def id
 * @property {string} pageName - i.e Shop page/ Categories page..
 * @property {string} initiatorName - EDITOR / DASHBOARD
 * @property {GUID} msid - msid
 * @property {string} identityType - identityType
 * @property {GUID} bi_token - msid
 * @return {LogObject<pagesAtAppInstallationParams>} LogObject<pagesAtAppInstallationParams>
 */
export function pagesAtAppInstallation(params) {
    return {
        evid: 849,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnQuickActionStoresPanelInEditor' event (evid: 850)
 *
 * Event description: When the user clicks on one of the quick actions in the Stores 6th button in the editor
 *
 * @param {clickOnQuickActionStoresPanelInEditorParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - DESKTOP etc.
 * @property {GUID} site_id - site_id
 * @property {string} appName - WixStores
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} buttonName - name of the button (find products,add payment...)
 * @property {string} app_id - stores app_id
 * @property {GUID} esi - esi
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnQuickActionStoresPanelInEditorParams>} LogObject<clickOnQuickActionStoresPanelInEditorParams>
 */
export function clickOnQuickActionStoresPanelInEditor(params) {
    return {
        evid: 850,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnFreeText' event (evid: 851)
 *
 * Event description: Send when click on free text field
 *
 * @param {clickOnFreeTextParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnFreeTextParams>} LogObject<clickOnFreeTextParams>
 */
export function clickOnFreeText(params) {
    return {
        evid: 851,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnQuantity' event (evid: 852)
 *
 * Event description: When UoU changes the quantity of product at product Page
 *
 * @param {clickOnQuantityParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {number} valueInt - value
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnQuantityParams>} LogObject<clickOnQuantityParams>
 */
export function clickOnQuantity(params) {
    return {
        evid: 852,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnSubscriptionOption' event (evid: 853)
 *
 * Event description: When UoU is clicking on one of the subscription options at product page
 *
 * @param {clickOnSubscriptionOptionParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} value - one-time/recurring
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSubscriptionOptionParams>} LogObject<clickOnSubscriptionOptionParams>
 */
export function clickOnSubscriptionOption(params) {
    return {
        evid: 853,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnMorePaymentOptions' event (evid: 854)
 *
 * Event description: When UoU clicks on 'More Payment Options' link in product page.
 *
 * @param {clickOnMorePaymentOptionsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnMorePaymentOptionsParams>} LogObject<clickOnMorePaymentOptionsParams>
 */
export function clickOnMorePaymentOptions(params) {
    return {
        evid: 854,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAdditionalPictures' event (evid: 855)
 *
 * Event description: When UoU is choosing to see more pictures of the product at product page.
 *
 * @param {clickOnAdditionalPicturesParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAdditionalPicturesParams>} LogObject<clickOnAdditionalPicturesParams>
 */
export function clickOnAdditionalPictures(params) {
    return {
        evid: 855,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnNavigation' event (evid: 856)
 *
 * Event description: When UoU clicks on product page breadcrums of Prev/Next option.
 *
 * @param {clickOnNavigationParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {string} component - breadcrum/(Prev/Next)
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnNavigationParams>} LogObject<clickOnNavigationParams>
 */
export function clickOnNavigation(params) {
    return {
        evid: 856,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorMessageSf' event (evid: 857)
 *
 * Event description: When UoU gets an error message at product page.
 * i.e when size option is not selected.
 *
 * @param {errorMessageSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} fieldName - list of fields  in which error messages were displayed to UoU
 * @property {string} origin - product page
 * @property {boolean} isBlocks - Is the product page is using Blocks.
 * @property {GUID} bi_token - msid
 * @return {LogObject<errorMessageSfParams>} LogObject<errorMessageSfParams>
 */
export function errorMessageSf(params) {
    return {
        evid: 857,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'categoryPageHeroSectionReadLessClicked' event (evid: 858)
 *
 * Event description: Category page hero section ‘read less’ clicked
 *
 * @param {categoryPageHeroSectionReadLessClickedParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<categoryPageHeroSectionReadLessClickedParams>} LogObject<categoryPageHeroSectionReadLessClickedParams>
 */
export function categoryPageHeroSectionReadLessClicked(params) {
    return {
        evid: 858,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'manageCategoryListSidebar' event (evid: 860)
 *
 * Event description: manage category list sidebar
 *
 * @param {manageCategoryListSidebarParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} componentName - Category_list
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - Sync automatically / Customize manually
 * @property {GUID} bi_token - msid
 * @return {LogObject<manageCategoryListSidebarParams>} LogObject<manageCategoryListSidebarParams>
 */
export function manageCategoryListSidebar(params) {
    return {
        evid: 860,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'pageLoadingTimeSf' event (evid: 861)
 *
 * Event description: this event holds loading time stamp for each step in wixstores iframe loading in live site
 *
 * @param {pageLoadingTimeSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_id
 * @property {number} startTime - start time for iframe loading
 * @property {string} appName - app_name
 * @property {number} domLoading_ts - dom loading time stamp
 * @property {number} configPhase_ts - config phase time stamp
 * @property {string} appVersion - app version
 * @property {number} domComplete_ts - dom complete time stamp
 * @property {number} preRequest_ts - pre request time stamp
 * @property {string} user_agent - user_agent
 * @property {number} latency_ts - latency time stamp
 * @property {boolean} isMerchant - isMerchant status
 * @property {number} runPhase_ts - run_phase time stamp
 * @property {number} angularFinished_ts - angular finished time stamp
 * @property {number} serverResponse_ts - server response time stamp
 * @property {GUID} bi_token - msid
 * @return {LogObject<pageLoadingTimeSfParams>} LogObject<pageLoadingTimeSfParams>
 */
export function pageLoadingTimeSf(params) {
    return {
        evid: 861,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCartBuyNow' event (evid: 863)
 *
 * Event description: Click on Add to cart / Buy Now sent from Product Page made by Velo.
 *
 * @param {clickOnAddToCartBuyNowParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {string} buttonType - buy now / add to cart
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnAddToCartBuyNowParams>} LogObject<clickOnAddToCartBuyNowParams>
 */
export function clickOnAddToCartBuyNow(params) {
    return {
        evid: 863,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewProductPageVelo' event (evid: 864)
 *
 * Event description: sent from Product Page made by Velo.
 *
 * @param {viewProductPageVeloParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @property {string} appName - app_name
 * @property {string} productType - digital / physical
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} productId - product_guid
 * @property {GUID} bi_token - msid
 * @return {LogObject<viewProductPageVeloParams>} LogObject<viewProductPageVeloParams>
 */
export function viewProductPageVelo(params) {
    return {
        evid: 864,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clientCallingSetupForGettingExperiments' event (evid: 888)
 *
 * Event description: Client calling “setup” for getting experiments on this visitor
 *
 * @param {clientCallingSetupForGettingExperimentsParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {GUID} visitorId - visitor_id
 * @property {string} appName - app_name
 * @property {string} result - result from petri server
 * @property {string} direction - to petri / from petri
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} msid - msid
 * @property {GUID} bi_token - msid
 * @return {LogObject<clientCallingSetupForGettingExperimentsParams>} LogObject<clientCallingSetupForGettingExperimentsParams>
 */
export function clientCallingSetupForGettingExperiments(params) {
    return {
        evid: 888,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'newClickOnItemInShopPagesSettingSf' event (evid: 895)
 *
 * Event description: Click on Item in Shop Pages Setting  SF
 *
 * @param {newClickOnItemInShopPagesSettingSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} category - ‘Manage Store’, Add Shop Page’, ‘Switch to Category Page’, ‘Delete Wix Stores’
 * @property {GUID} bi_token - msid
 * @return {LogObject<newClickOnItemInShopPagesSettingSfParams>} LogObject<newClickOnItemInShopPagesSettingSfParams>
 */
export function newClickOnItemInShopPagesSettingSf(params) {
    return {
        evid: 895,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnSwitchToCategoriesModalSf' event (evid: 896)
 *
 * Event description: Click on Switch to Categories Modal SF
 *
 * @param {clickOnSwitchToCategoriesModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Switch’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickOnSwitchToCategoriesModalSfParams>} LogObject<clickOnSwitchToCategoriesModalSfParams>
 */
export function clickOnSwitchToCategoriesModalSf(params) {
    return {
        evid: 896,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickSwitchToCategoriesVerificationModalSf' event (evid: 897)
 *
 * Event description: Click Switch to Categories Verification Modal SF
 *
 * @param {clickSwitchToCategoriesVerificationModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Switch’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickSwitchToCategoriesVerificationModalSfParams>} LogObject<clickSwitchToCategoriesVerificationModalSfParams>
 */
export function clickSwitchToCategoriesVerificationModalSf(params) {
    return {
        evid: 897,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickSwitchToCategoriesConfirmationModalSf' event (evid: 898)
 *
 * Event description: Click Switch to Categories Confirmation Modal SF
 *
 * @param {clickSwitchToCategoriesConfirmationModalSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {string} action - ‘Go to Dashboard’, ‘Cancel’
 * @property {GUID} bi_token - msid
 * @return {LogObject<clickSwitchToCategoriesConfirmationModalSfParams>} LogObject<clickSwitchToCategoriesConfirmationModalSfParams>
 */
export function clickSwitchToCategoriesConfirmationModalSf(params) {
    return {
        evid: 898,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
/**
 * A function to create a log object for the 'manuallyOptInToCategoriesSf' event (evid: 899)
 *
 * Event description: Manually Opt-In to Categories SF
 *
 * @param {manuallyOptInToCategoriesSfParams} params - The parameters for this event
 * @property {GUID} userId - user_guid
 * @property {GUID} storeId - store_id
 * @property {GUID} visitor_id - visitor_guid
 * @property {string} appName - app_name
 * @property {string} user_agent - user_agent
 * @property {boolean} isMerchant - is_merchant
 * @property {GUID} bi_token - msid
 * @return {LogObject<manuallyOptInToCategoriesSfParams>} LogObject<manuallyOptInToCategoriesSfParams>
 */
export function manuallyOptInToCategoriesSf(params) {
    return {
        evid: 899,
        src: 10,
        endpoint: 'ec-sf',
        params: params
    };
}
//# sourceMappingURL=index.js.map